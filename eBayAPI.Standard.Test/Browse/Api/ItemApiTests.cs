/* 
 * Browse API
 *
 * The Browse API has the following resources: item_summary: Lets shoppers search for specific items by keyword, GTIN, category, product, or item aspects and refine the results by using filters. item: Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size. This resource also provides a bridge between the eBay legacy APIs, such as Trading and Finding, and the RESTful APIs, such as Browse, which use different formats for the item IDs. You can use the Browse API to retrieve the basic details of the item and the RESTful item ID using a legacy item ID.
 *
 * OpenAPI spec version: v1_beta.12.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ItemApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestClass]
    public class ItemApiTests
    {
        private ItemApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [TestInitialize]
        public void Init()
        {
            instance = new ItemApi();
            ApiClient apiClient;
           
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TestCleanup]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ItemApi
        /// </summary>
        [TestMethod]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ItemApi
            //Assert.IsInstanceOfType(typeof(ItemApi), instance, "instance is a ItemApi");
        }

        
        /// <summary>
        /// Test GetItem
        /// </summary>
        [TestMethod]
        public void GetItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string itemId = null;
            //string fieldgroups = null;
            //var response = instance.GetItem(itemId, fieldgroups);
            //Assert.IsInstanceOf<Item> (response, "response is Item");
        }
        
        /// <summary>
        /// Test GetItemByLegacyId
        /// </summary>
        [TestMethod]
        public void GetItemByLegacyIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string legacyItemId = null;
            //string fieldgroups = null;
            //string legacyVariationId = null;
            //string legacyVariationSku = null;
            //var response = instance.GetItemByLegacyId(legacyItemId, fieldgroups, legacyVariationId, legacyVariationSku);
            //Assert.IsInstanceOf<Item> (response, "response is Item");
        }
        
        /// <summary>
        /// Test GetItemsByItemGroup
        /// </summary>
        [TestMethod]
        public void GetItemsByItemGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string itemGroupId = null;
            //var response = instance.GetItemsByItemGroup(itemGroupId);
            //Assert.IsInstanceOf<Items> (response, "response is Items");
        }
        
    }

}
