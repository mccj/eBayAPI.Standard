/* 
 * Buy Marketing API
 *
 * The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed.
 *
 * OpenAPI spec version: v1_beta.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing MerchandisedProductApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MerchandisedProductApiTests
    {
        private MerchandisedProductApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MerchandisedProductApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MerchandisedProductApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' MerchandisedProductApi
            //Assert.IsInstanceOfType(typeof(MerchandisedProductApi), instance, "instance is a MerchandisedProductApi");
        }

        
        /// <summary>
        /// Test GetAlsoBoughtByProduct
        /// </summary>
        [Test]
        public void GetAlsoBoughtByProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brand = null;
            //string epid = null;
            //string gtin = null;
            //string mpn = null;
            //var response = instance.GetAlsoBoughtByProduct(brand, epid, gtin, mpn);
            //Assert.IsInstanceOf<BestSellingProductResponse> (response, "response is BestSellingProductResponse");
        }
        
        /// <summary>
        /// Test GetAlsoViewedByProduct
        /// </summary>
        [Test]
        public void GetAlsoViewedByProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string brand = null;
            //string epid = null;
            //string gtin = null;
            //string mpn = null;
            //var response = instance.GetAlsoViewedByProduct(brand, epid, gtin, mpn);
            //Assert.IsInstanceOf<BestSellingProductResponse> (response, "response is BestSellingProductResponse");
        }
        
        /// <summary>
        /// Test GetMerchandisedProducts
        /// </summary>
        [Test]
        public void GetMerchandisedProductsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string categoryId = null;
            //string metricName = null;
            //string aspectFilter = null;
            //string limit = null;
            //var response = instance.GetMerchandisedProducts(categoryId, metricName, aspectFilter, limit);
            //Assert.IsInstanceOf<BestSellingProductResponse> (response, "response is BestSellingProductResponse");
        }
        
    }

}
