//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using RestSharp;
namespace eBayApi
{
    public partial class eBayClient
    {
        public eBayApi.Buy.Browse.BrowseClient Browse { get; set; } = new eBayApi.Buy.Browse.BrowseClient("https://api.ebay.com/buy/browse/v1");
        public eBayApi.Buy.Feed.FeedClient Feed { get; set; } = new eBayApi.Buy.Feed.FeedClient("https://api.ebay.com/buy/feed/v1_beta");
        public eBayApi.Buy.Marketing.MarketingClient Marketing { get; set; } = new eBayApi.Buy.Marketing.MarketingClient("https://api.ebay.com/buy/marketing/v1_beta");
        public eBayApi.Commerce.Catalog.CatalogClient Catalog { get; set; } = new eBayApi.Commerce.Catalog.CatalogClient("https://api.ebay.com/commerce/catalog/v1_beta");
        public eBayApi.Commerce.Taxonomy.TaxonomyClient Taxonomy { get; set; } = new eBayApi.Commerce.Taxonomy.TaxonomyClient("https://api.ebay.com/commerce/taxonomy/v1_beta");
        public eBayApi.Sell.Compliance.ComplianceClient Compliance { get; set; } = new eBayApi.Sell.Compliance.ComplianceClient("https://api.ebay.com/sell/compliance/v1");
        public eBayApi.Sell.Fulfillment.FulfillmentClient Fulfillment { get; set; } = new eBayApi.Sell.Fulfillment.FulfillmentClient("https://api.ebay.com/sell/fulfillment/v1");
        private void Setting(Action<Api.Client.ApiBase> execute)
        {
            execute(Browse);
            execute(Feed);
            execute(Marketing);
            execute(Catalog);
            execute(Taxonomy);
            execute(Compliance);
            execute(Fulfillment);
        }
    }
}
namespace eBayApi.Buy.Browse
{
    public class BrowseClient : Api.Client.ApiBase
    {
        public BrowseClient(Api.Client.ApiClient apiClient = null) : base(apiClient) { }
        public BrowseClient(string basePath) : base(basePath) { }
        /// <summary>
        ///  This call retrieves the details of a specific item, such as description, price, category, all item aspects, condition, return policies, seller feedback and score, shipping options, shipping costs, estimated delivery, and other information the buyer needs to make a purchasing decision. The Buy APIs are designed to let you create an eBay shopping experience in your app or website. This means you will need to know when something, such as the availability, quantity, etc., has changed in any eBay item you are offering. You can do this easily by setting the fieldgroups URI parameter. This parameter lets you control what is returned in the response. Setting fieldgroups to COMPACT reduces the response to only the five fields that you need in order to check if any item detail has changed. Setting fieldgroups to PRODUCT, adds additional fields to the default response that return information about the product of the item. You can use either COMPACT or PRODUCT but not both. For more information, see fieldgroups. URLs for this call Production URL: https://api.ebay.com/buy/browse/v1/item/ Sandbox URL: https://api.sandbox.ebay.com/buy/browse/v1/item/ Request headers You will want to use the X-EBAY-C-ENDUSERCTX request header with this call. If you are an eBay Network Partner you must use affiliateCampaignId=ePNCampaignId,affiliateReferenceId=referenceId in the header in order to be paid for selling eBay items on your site and it is strongly recommended you use contextualLocation to improve the estimated delivery window information. For details see, Request headers in the Buy APIs Overview. Restrictions For a list of supported sites and other restrictions, see API Restrictions.
        /// </summary>
        /// <param name="fieldgroups">This parameter lets you control what is returned in the response. If you do not set this field, the call returns all the details of the item. Valid values: PRODUCT - This adds the additionalImages, additionalProductIdentities, aspectGroups, description, gtins, image, and title product fields to the response, which describe the product associated with the item. See Product for more information about these fields. COMPACT - This returns only the following fields, which let you quickly check if the availability or price of the item has changed, if the item has been revised by the seller, or if an item's top-rated plus status has changed for items you have stored. itemId - The identifier of the item. sellerItemRevision - An identifier generated/incremented when a seller revises the item. There are two types of item revisions; seller changes, such as changing the title, and eBay system changes, such as changing the quantity when an item is purchased. This ID is changed only when the seller makes a change to the item. This means you cannot use this value to determine if the quantity has changed. topRatedBuyingExperience - A boolean value indicating if this item is a top-rated plus item. A change in the item's top rated plus standing is not tracked by the revision ID. See topRatedBuyingExperience for more information. price - This is tracked by the revision ID but is returned here to enable you to quickly verify the price of the item. estimatedAvailabilities - Returns the item availability information, which is based on the item's quantity. Changes in quantity are not tracked by the revision ID. For Example To check if a stored item's information is current, do following. Pass in the item ID and set fieldgroups to COMPACT. item/v1|46566502948|0?fieldgroups=COMPACT Do one of the following: If the sellerItemRevision field is returned and you haven't stored a revision number for this item, record the number and pass in the item ID in the getItem call to get the latest information. If the revision number is different from the value you have stored, update the value and pass in the item ID in the getItem call to get the latest information. If the sellerItemRevision field is not returned or has not changed, where needed, update the item information with the information returned in the response. Maximum value: 1 If more than one values is specified, the first value will be used.</param> 
        /// <param name="itemId">The eBay RESTful identifier of an item. This ID is returned by the Browse and Feed API calls. RESTful Item ID Format: v1|#|# For example: v1|272394640372|0 or v1|162846450672|461882996982 For more information about item ID for RESTful APIs, see the Legacy API compatibility section of the Buy APIs Overview.</param> 
        /// <returns>Models.Item</returns>
        public Models.Item GetItem(string itemId, string fieldgroups = null)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'itemId' when calling GetItem");

            var path = "/item/{item_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "item_id" + "}", ApiClient.ParameterToString(itemId));

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (fieldgroups != null) queryParams.Add("fieldgroups", ApiClient.ParameterToString(fieldgroups)); // query parameter




            // authentication setting, if any
            var authSettings = new String[] { "Client Credentials" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetItem: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetItem: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.Item)ApiClient.Deserialize(response.Content, typeof(Models.Item), response.Headers);
        }
        /// <summary>
        ///  This call is a bridge between the eBay legacy APIs, such as Trading, Shopping, and Finding and the eBay Buy APIs. There are differences between how legacy APIs and RESTful APIs return the identifier of an &quot;item&quot;. There is also a difference in what the item ID represents and in the format of the item ID value returned. This call lets you use the legacy item IDs retrieve the details of a specific item, such as description, price, and other information the buyer needs to make a purchasing decision. It also returns the RESTful item ID, which you can use with all the Buy API calls. For more information about how to use legacy IDs with the Buy APIs, see Legacy API compatibility in the Buying Integration guide. This call returns the item details and requires you to pass in either the item ID of a non-variation item or the item IDs of both the parent and child of an item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. When an item group is created, one of the item variations, such as the red shirt size L, is chosen as the &quot;parent&quot;. All the other items in the group are the children, such as the blue shirt size L, red shirt size M, etc. The fieldgroups URI parameter lets you control what is returned in the response. Setting fieldgroups to PRODUCT, adds additional fields to the default response that return information about the product of the item. For more information, see fieldgroups. URLs for this call Production URL: https://api.ebay.com/buy/browse/v1/item/get_item_by_legacy_id/ Sandbox URL: https://api.sandbox.ebay.com/buy/browse/v1/item/get_item_by_legacy_id/ Request headers You will want to use the X-EBAY-C-ENDUSERCTX request header with this call. If you are an eBay Network Partner you must use affiliateCampaignId=ePNCampaignId,affiliateReferenceId=referenceId in the header in order to be paid for selling eBay items on your site and it is strongly recommended you use contextualLocation to improved the estimated delivery window information. For details see, Request headers in the Buy APIs Overview. Restrictions For a list of supported sites and other restrictions, see API Restrictions.
        /// </summary>
        /// <param name="fieldgroups">This field lets you control what is returned in the response. If you do not set this field, the call returns all the details of the item. Note: In this call, the only value supported is PRODUCT. Valid values: PRODUCT - This adds the additionalImages, additionalProductIdentities, aspectGroups, description, gtins, image, and title fields to the response, which describe the item's product. See Product for more information about these fields.</param> 
        /// <param name="legacyItemId">Specifies either: The legacy item ID of an item that is not part of a group. The legacy item ID of a group, which is the ID of the &quot;parent&quot; of the group of items. Note: If you pass in a group ID, you must also use the legacy_variation_id field and pass in the legacy ID of the specific item variation (child ID). Legacy IDs are returned by eBay traditional APIs, such as the Trading API or Finding API. The following is an example of using the value of the ItemID field for a specific item from Trading to get the RESTful itemId value. &nbsp;&nbsp;&nbsp; browse/v1/item/get_item_by_legacy_id?legacy_item_id=110039490209 Maximum: 1</param> 
        /// <param name="legacyVariationId">Specifies the legacy item ID of a specific item in an item group, such as the red shirt size L. Legacy IDs are returned by eBay traditional APIs, such as the Trading API or Finding API. Maximum: 1 Requirement: You must always pass in the legacy_item_id with the legacy_variation_id</param> 
        /// <param name="legacyVariationSku">Specifics the legacy SKU of the item. SKU are item IDs created by the seller. Legacy SKUs are returned by eBay traditional APIs, such as the Trading API or Finding API. The following is an example of using the value of the ItemID and SKU fields, which were returned by the Trading API, to get the RESTful itemId value. &nbsp;&nbsp;&nbsp; browse/v1/item/get_item_by_legacy_id?legacy_item_id=110039490209&amp;legacy_variation_sku=V-00031-WHM Maximum: 1 Requirement: You must always pass in the legacy_item_id with the legacy_variation_sku</param> 
        /// <returns>Models.Item</returns>
        public Models.Item GetItemByLegacyId(string legacyItemId, string fieldgroups = null, string legacyVariationId = null, string legacyVariationSku = null)
        {
            // verify the required parameter 'legacyItemId' is set
            if (legacyItemId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'legacyItemId' when calling GetItemByLegacyId");

            var path = "/item/get_item_by_legacy_id";
            path = path.Replace("{format}", "json");


            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (fieldgroups != null) queryParams.Add("fieldgroups", ApiClient.ParameterToString(fieldgroups)); // query parameter
            if (legacyItemId != null) queryParams.Add("legacy_item_id", ApiClient.ParameterToString(legacyItemId)); // query parameter
            if (legacyVariationId != null) queryParams.Add("legacy_variation_id", ApiClient.ParameterToString(legacyVariationId)); // query parameter
            if (legacyVariationSku != null) queryParams.Add("legacy_variation_sku", ApiClient.ParameterToString(legacyVariationSku)); // query parameter




            // authentication setting, if any
            var authSettings = new String[] { "Client Credentials" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetItemByLegacyId: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetItemByLegacyId: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.Item)ApiClient.Deserialize(response.Content, typeof(Models.Item), response.Headers);
        }
        /// <summary>
        ///  This call retrieves the details of the individual items in an item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. You pass in the item group ID as a URI parameter. You use this call to show the item details of items with multiple aspects, such as color, size, storage capacity, etc. This call returns two main containers; items and commonDescriptions. The items container has an array of containers with the details of each item in the group. The commonDescriptions container has an array of containers for a description and the item IDs of all the items that have this exact description. Because items within an item group often have the same description, this decreases the size of the response. URLs for this call Production URL: https://api.ebay.com/buy/browse/v1/item/get_items_by_item_group/ Sandbox URL: https://api.sandbox.ebay.com/buy/browse/v1/item/get_items_by_item_group/ Request headers You will want to use the X-EBAY-C-ENDUSERCTX request header with this call. If you are an eBay Network Partner you must use affiliateCampaignId=ePNCampaignId,affiliateReferenceId=referenceId in the header in order to be paid for selling eBay items on your site and it is strongly recommended you use contextualLocation to improved the estimated delivery window information. For details see, Request headers in the Buy APIs Overview. Restrictions For a list of supported sites and other restrictions, see API Restrictions.
        /// </summary>
        /// <param name="itemGroupId">Identifier of the item group to return. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. This ID is returned in the itemGroupHref field of the search and getItem calls. For Example: https://api.ebay.com/buy/browse/v1/item/get_items_by_item_group?item_group_id=351825690866</param> 
        /// <returns>Models.Items</returns>
        public Models.Items GetItemsByItemGroup(string itemGroupId)
        {
            // verify the required parameter 'itemGroupId' is set
            if (itemGroupId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'itemGroupId' when calling GetItemsByItemGroup");

            var path = "/item/get_items_by_item_group";
            path = path.Replace("{format}", "json");


            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (itemGroupId != null) queryParams.Add("item_group_id", ApiClient.ParameterToString(itemGroupId)); // query parameter




            // authentication setting, if any
            var authSettings = new String[] { "Client Credentials" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetItemsByItemGroup: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetItemsByItemGroup: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.Items)ApiClient.Deserialize(response.Content, typeof(Models.Items), response.Headers);
        }
        /// <summary>
        ///  This call searches for eBay items by various URI query parameters and retrieves summaries of the items. You can search by keyword, category, eBay product ID (ePID), or GTIN or a combination of these. The following are examples of using these parameters to limit the results: The following call returns 4,330,774 items. &nbsp;&nbsp;&nbsp;/buy/browse/v1/item_summary/search?q=phone This call, which limits the results to the category &quot;Cell Phones &amp; Smartphones&quot;, returns 142,098 items. &nbsp;&nbsp;&nbsp;/buy/browse/v1/item_summary/search?q=phone&amp;category_ids=9355 These calls, which limit results to a Samsung Galaxy S5, returns 97 items. &nbsp;&nbsp;&nbsp;/buy/browse/v1/item_summary/search?q=phone&amp;category_ids=220&amp;epid=182527490 &nbsp;&nbsp;&nbsp;or &nbsp;&nbsp;&nbsp;/buy/browse/v1/item_summary/search?epid=182527490 Controlling what is returned You can also control what is returned by using the fieldgroups field. In addition to returning items, which is the default, you can return refinements (metadata) about an item that enables you to create aspect histograms. A histogram enables users to drill down in each refinement narrowing the search results. You can return: ASPECT_REFINEMENTS - Lets shoppers refine the result set by variation aspects, such as Brand, Color, etc. BUYING_OPTION_REFINEMENT - Lets shoppers refine the result set by either FIXED_PRICE or AUCTION CATEGORY_REFINEMENTS - Lets shoppers refine the result set by items in a category CONDITION_REFINEMENT - Lets shoppers refine the result set by item condition, such as NEW, USED, etc. EXTENDED - Returns the shortDescription field, which provides condition and item aspect information. MATCHING_ITEMS - The default, which returns the items. When used with one or more of the refinement values above the specified refinements and all the matching items are returned. FULL - This returns all the refinement containers and all the matching items. Filtering by aspects You can use the ASPECT_REFINEMENTS returned to filter the result set using the aspect_filter field. For example: This call gets a list of the aspects pairs for the item and the dominant category (category most of the items are in). /buy/browse/v1/item_summary/search?q=world cup soccer ball&amp;fieldgroups=ASPECT_REFINEMENTS This call filters the items by one of the aspect pairs returned and the dominant category. The category ID is required twice when using aspect_filter; once as a URI parameter and as part of the aspect_filter. /buy/browse/v1/item_summary/search?q=world cup soccer ball&amp;category_ids=20863&amp;aspect_filter=categoryId:20863,Brand:{adidas} This call filters the items by multiple aspects /buy/browse/v1/item_summary/search?q=world cup soccer ball&amp;category_ids=20863&amp;aspect_filter=categoryId:20863,Brand:{adidas},Featured Refinements:{Adidas Match Ball} This call filters the items by multiple aspect values /buy/browse/v1/item_summary/search?q=world cup soccer ball&amp;category_ids=20863&amp;aspect_filter=categoryId:20863,Brand:{Nike|Wilson} Fields filters There are also field filters you can use to refine the result set, such as listing format, item condition, price range, listing end date, location, and more. You can use multiple field filters in a single call. For a list and details of the supported filters, see search Call Field Filters. Pagination and sort controls There are pagination controls ( limit and offset fields) and sort query parameters that control/sort the data that is returned. By default, the results are sorted by &quot;Best Match&quot;. For more information about Best Match, see the eBay help page Best Match. URLs for this call Production URL: https://api.ebay.com/buy/browse/v1/item_summary/ Sandbox URL: https://api.sandbox.ebay.com/buy/browse/v1/item_summary/ Request headers You will want to use the X-EBAY-C-ENDUSERCTX request header with this call. If you are an eBay Network Partner you must use affiliateCampaignId=ePNCampaignId,affiliateReferenceId=referenceId in the header in order to be paid for selling eBay items on your site and it is strongly recommended you use contextualLocation to improve the estimated delivery window information. For details see, Request headers in the Buy APIs Overview. Restrictions This call can return a maximum of 10,000 items. For a list of supported sites and other restrictions, see API Restrictions. URL Encoding Parameters and Headers As with all query parameter values, the filter parameter value and request header values must be URL encoded. For better readability, the examples in this document omit the encoding. Example: &nbsp;&nbsp;search?q=world cup soccer ball&amp;category_ids=20863&amp;aspect_filter=categoryId:20863,Brand:{Nike|Wilson} Encoded Example: &nbsp;&nbsp; search?q=world cup soccer ball&amp;category_ids=20863&amp;aspect_filter=categoryId%3A20863%2CBrand%3A%7BNike%7CWilson%7D For more information about encoding, see HTML URL Encoding Reference.
        /// </summary>
        /// <param name="aspectFilter">This field lets you filter by item aspects. The aspect name/value pairs and category, which is required, is used to limit the results to specific aspects of the item. For example, in a clothing category one aspect pair would be Color/Red. For example, the call below uses the category ID for Women's Clothing. This will return only items for a woman's red shirt. /buy/browse/v1/item_summary/search?q=shirt&amp;category_ids=15724&amp;aspect_filter=categoryId:15724,Color:{Red} To get a list of the aspects pairs and the category, which is returned in the dominantCategoryId field, set fieldgroups to ASPECT_REFINEMENTS. /buy/browse/v1/item_summary/search?q=shirt&amp;fieldgroups=ASPECT_REFINEMENTS Required: The category ID is required twice; once as a URI parameter and as part of the aspect_filter. For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/browse/types/AspectFilter.html</param> 
        /// <param name="categoryIds">The category ID is used to limit the results. This field can have one category ID or a comma separated list of IDs. For example: &nbsp;&nbsp;&nbsp;/buy/browse/v1/item_summary/search?category_ids=29792 Note: Currently, you can pass in only one category ID. You can also use any combination of the category_Ids, epid, and q fields. This gives you additional control over the result set. For example, let's say you are looking of a toy phone. If you search for &quot;phone&quot;, the result set will be mobile phones because this is the &quot;Best Match&quot; for this search. But if you also include the toy category ID, the results will be what you wanted. For example: &nbsp;&nbsp;&nbsp;/buy/browse/v1/item_summary/search?q=phone&amp;category_ids=220 The list of eBay category IDs is not published and category IDs are not the same across all the eBay marketplaces. You can use the following techniques to find a category by site: Use the Category Changes page. Use the Taxonomy API. For details see Get Categories for Buy APIs. Submit the following call to get the dominantCategoryId for an item. /buy/browse/v1/item_summary/search?q=keyword&amp;fieldgroups=ASPECT_REFINEMENTS Note: If a top-level (L1) category is specified, you must also include the q query parameter. Required: The call must have category_ids, epid, gtin, or q (or any combination of these)</param> 
        /// <param name="epid">The ePID is the eBay product identifier of a product from the eBay product catalog. This field limits the results to only items in the specified ePID. The Marketing API getMerchandisedProducts call and the Browse API getItem, getItemByLegacyId, and getItemsByItemGroup calls return the ePID of the product. You can also use the product_summary/search call in the Catalog API to search for the ePID of the product. &nbsp;&nbsp;&nbsp;/buy/browse/v1/item_summary/search?epid=15032 Maximum: 1 Required: The call must have category_ids, epid, gtin, or q (or any combination of these)</param> 
        /// <param name="fieldgroups">This field is a comma separated list of values that lets you control what is returned in the response. The default is MATCHING_ITEMS, which returns the items that match the keyword or category specified. The other values return data that can be used to create histograms or provide additional information. Valid Values: ASPECT_REFINEMENTS - This returns the aspectDistributions container, which has the dominantCategoryId, matchCount, and refinementHref for the various aspects of the items found. For example, if you searched for 'Mustang', some of the aspect would be Model Year, Exterior Color, Vehicle Mileage, etc. Note: ASPECT_REFINEMENTS are category specific. BUYING_OPTION_REFINEMENTS - This returns the buyingOptionDistributions container, which has the matchCount and refinementHref for AUCTION and FIXED_PRICE (Buy It Now) items. Note: Classified items are not supported. CATEGORY_REFINEMENTS - This returns the categoryDistributions container, which has the categories that the item is in. CONDITION_REFINEMENTS - This returns the conditionDistributions container, such as NEW, USED, etc. Within these groups are multiple states of the condition. For example, New can be New without tag, New in box, New without box, etc. EXTENDED - Returns the shortDescription field, which provides condition and item aspect information. MATCHING_ITEMS - This is meant to be used with one or more of the refinement values above. You use this to return the specified refinements and all the matching items. FULL - This returns all the refinement containers and all the matching items. Code so that your app gracefully handles any future changes to this list. Default: MATCHING_ITEMS</param> 
        /// <param name="filter">This field supports multiple field filters that can be used to limit/customize the result set. For example: &nbsp;&nbsp;&nbsp;/buy/browse/v1/item_summary/search?q=shirt&amp;filter=price:[10..50] You can also combine filters. &nbsp;&nbsp;&nbsp;/buy/browse/v1/item_summary/search?q=shirt&amp;filter=price:[10..50],sellers:{rpseller|bigSal} The following are the supported filters. For details and examples for all the filters, see search Call Field Filters. buyingOptions conditionIds conditions deliveryCountry deliveryOptions deliveryPostalCode excludeCategoryIds excludeSellers itemEndDate itemLocationCountry itemStartDate paymentMethods pickupCountry pickupPostalCode pickupRadius pickupRadiusUnit price priceCurrency maxDeliveryCost (free shipping) returnsAccepted sellerAccountTypes sellers For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/browse/types/FilterField.html</param> 
        /// <param name="gtin">This field lets you search by the Global Trade Item Number of the item as defined by http://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value. &nbsp;&nbsp;&nbsp;/buy/browse/v1/item_summary/search?gtin=099482432621 Maximum: 1 Required: The call must have category_ids, epid, gtin, or q (or any combination of these)</param> 
        /// <param name="limit">The number of items in a result set. Default: 50 Maximum per result set: 200 Total Maximum number of items for all result sets: 10,000</param> 
        /// <param name="offset">The number of items to skip in the result set. This is used with the limit field to control the pagination of the output. If offset is 0 and limit is 10, the call will retrieve items 1-10 from the list of items returned, if offset is 10 and limit is 10, the call will retrieve items 11 thru 20 from the list of items returned. Valid Values: 0-10,000 (inclusive) Default: 0 Maximum number of items returned: 10,000</param> 
        /// <param name="q">A string consisting of one or more keywords that are used to search for items on eBay. The keywords are handled as follows: If the keywords are separated by a comma (iphone,ipad), the query returns items that have iphone AND ipad. If the keywords are separated by a space (iphone&nbsp;ipad or iphone,&nbsp;ipad), the query returns items that have iphone OR ipad. Restriction: The * wildcard character is not allowed in this field. Required: The call must have category_ids, epid, gtin, or q (or any combination of these)</param> 
        /// <param name="sort">Specifies the order and the field name to use to sort the items. To sort in descending order use - before the field name. Currently, you can only sort by price (in ascending or descending order), or by distance (only applicable if the &quot;pickup&quot; filters are used, and only ascending order is supported). If no sort parameter is submitted, the result set is sorted by &quot;Best Match&quot;. The following are examples of using the sort query parameter. Sort Result &amp;sort=price Sorts by price in ascending order (lowest price first) &amp;sort=-price Sorts by price in descending order (highest price first) &amp;sort=distance Sorts by distance in ascending order (shortest distance first) Default: ascending For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/browse/types/SortField.html</param> 
        /// <returns>Models.SearchPagedCollection</returns>
        public Models.SearchPagedCollection Search(string aspectFilter = null, string categoryIds = null, string epid = null, string fieldgroups = null, string filter = null, string gtin = null, string limit = null, string offset = null, string q = null, string sort = null)
        {


            var path = "/item_summary/search";
            path = path.Replace("{format}", "json");


            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (aspectFilter != null) queryParams.Add("aspect_filter", ApiClient.ParameterToString(aspectFilter)); // query parameter
            if (categoryIds != null) queryParams.Add("category_ids", ApiClient.ParameterToString(categoryIds)); // query parameter
            if (epid != null) queryParams.Add("epid", ApiClient.ParameterToString(epid)); // query parameter
            if (fieldgroups != null) queryParams.Add("fieldgroups", ApiClient.ParameterToString(fieldgroups)); // query parameter
            if (filter != null) queryParams.Add("filter", ApiClient.ParameterToString(filter)); // query parameter
            if (gtin != null) queryParams.Add("gtin", ApiClient.ParameterToString(gtin)); // query parameter
            if (limit != null) queryParams.Add("limit", ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) queryParams.Add("offset", ApiClient.ParameterToString(offset)); // query parameter
            if (q != null) queryParams.Add("q", ApiClient.ParameterToString(q)); // query parameter
            if (sort != null) queryParams.Add("sort", ApiClient.ParameterToString(sort)); // query parameter




            // authentication setting, if any
            var authSettings = new String[] { "Client Credentials" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling Search: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling Search: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.SearchPagedCollection)ApiClient.Deserialize(response.Content, typeof(Models.SearchPagedCollection), response.Headers);
        }
    }
}
namespace eBayApi.Buy.Browse.Models
{
    /// <summary>
    /// The type that defines the fields that can be returned in an error.
    /// </summary>
    [DataContract]
    public class Error
    {
        /// <summary>
        /// This string value indicates the error category. There are three categories of errors: request errors, application errors, and system errors.
        /// </summary>
        /// <value>This string value indicates the error category. There are three categories of errors: request errors, application errors, and system errors.</value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }
        /// <summary>
        /// The name of the primary system where the error occurred. This is relevant for application errors.
        /// </summary>
        /// <value>The name of the primary system where the error occurred. This is relevant for application errors.</value>
        [DataMember(Name = "domain", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "domain")]
        public string Domain { get; set; }
        /// <summary>
        /// A unique code that identifies the particular error or warning that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms.
        /// </summary>
        /// <value>A unique code that identifies the particular error or warning that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms.</value>
        [DataMember(Name = "errorId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "errorId")]
        public int? ErrorId { get; set; }
        /// <summary>
        /// An array of reference IDs that identify the specific request elements most closely associated to the error or warning, if any.
        /// </summary>
        /// <value>An array of reference IDs that identify the specific request elements most closely associated to the error or warning, if any.</value>
        [DataMember(Name = "inputRefIds", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "inputRefIds")]
        public string[] InputRefIds { get; set; }
        /// <summary>
        /// A detailed description of the condition that caused the error or warning, and information on what to do to correct the problem.
        /// </summary>
        /// <value>A detailed description of the condition that caused the error or warning, and information on what to do to correct the problem.</value>
        [DataMember(Name = "longMessage", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "longMessage")]
        public string LongMessage { get; set; }
        /// <summary>
        /// A description of the condition that caused the error or warning.
        /// </summary>
        /// <value>A description of the condition that caused the error or warning.</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }
        /// <summary>
        /// An array of reference IDs that identify the specific response elements most closely associated to the error or warning, if any.
        /// </summary>
        /// <value>An array of reference IDs that identify the specific response elements most closely associated to the error or warning, if any.</value>
        [DataMember(Name = "outputRefIds", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "outputRefIds")]
        public string[] OutputRefIds { get; set; }
        /// <summary>
        /// An array of warning and error messages that return one or more variables contextual information about the error or warning. This is often the field or value that triggered the error or warning.
        /// </summary>
        /// <value>An array of warning and error messages that return one or more variables contextual information about the error or warning. This is often the field or value that triggered the error or warning.</value>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "parameters")]
        public ErrorParameter[] Parameters { get; set; }
        /// <summary>
        /// The name of the subdomain in which the error or warning occurred.
        /// </summary>
        /// <value>The name of the subdomain in which the error or warning occurred.</value>
        [DataMember(Name = "subdomain", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "subdomain")]
        public string Subdomain { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  ErrorId: ").Append(ErrorId).Append("\n");
            sb.Append("  InputRefIds: ").Append(InputRefIds).Append("\n");
            sb.Append("  LongMessage: ").Append(LongMessage).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  OutputRefIds: ").Append(OutputRefIds).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Subdomain: ").Append(Subdomain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// An array of name/value pairs that provide more details regarding error condition.
    /// </summary>
    [DataContract]
    public class ErrorParameter
    {
        /// <summary>
        /// This is the name of input field that caused an issue with the call request.
        /// </summary>
        /// <value>This is the name of input field that caused an issue with the call request.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        /// <summary>
        /// This is the actual value that was passed in for the element specified in the name field.
        /// </summary>
        /// <value>This is the actual value that was passed in for the element specified in the name field.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that define the fields for the aspect information. Aspects are the variations of an item, such as color, size, etc.
    /// </summary>
    [DataContract]
    public class AspectDistribution
    {
        /// <summary>
        /// An array of containers for the various values of the aspect and the match count and a HATEOAS reference ( refinementHref) for this aspect.
        /// </summary>
        /// <value>An array of containers for the various values of the aspect and the match count and a HATEOAS reference ( refinementHref) for this aspect.</value>
        [DataMember(Name = "aspectValueDistributions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectValueDistributions")]
        public AspectValueDistribution[] AspectValueDistributions { get; set; }
        /// <summary>
        /// Name of an aspect, such as Brand, Color, etc.
        /// </summary>
        /// <value>Name of an aspect, such as Brand, Color, etc.</value>
        [DataMember(Name = "localizedAspectName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "localizedAspectName")]
        public string LocalizedAspectName { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AspectValueDistributions: ").Append(AspectValueDistributions).Append("\n");
            sb.Append("  LocalizedAspectName: ").Append(LocalizedAspectName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The container that defines the fields for the conditions refinements. This container is returned when <b> fieldgroups</b> is set to <code>ASPECT_REFINEMENTS</code> or <code>FULL</code> in the request.
    /// </summary>
    [DataContract]
    public class AspectValueDistribution
    {
        /// <summary>
        /// The value of an aspect. For example, Red is a value for the aspect Color.
        /// </summary>
        /// <value>The value of an aspect. For example, Red is a value for the aspect Color.</value>
        [DataMember(Name = "localizedAspectValue", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "localizedAspectValue")]
        public string LocalizedAspectValue { get; set; }
        /// <summary>
        /// The number of items with this aspect.
        /// </summary>
        /// <value>The number of items with this aspect.</value>
        [DataMember(Name = "matchCount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "matchCount")]
        public int? MatchCount { get; set; }
        /// <summary>
        /// A HATEOAS reference for this aspect.
        /// </summary>
        /// <value>A HATEOAS reference for this aspect.</value>
        [DataMember(Name = "refinementHref", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "refinementHref")]
        public string RefinementHref { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  LocalizedAspectValue: ").Append(LocalizedAspectValue).Append("\n");
            sb.Append("  MatchCount: ").Append(MatchCount).Append("\n");
            sb.Append("  RefinementHref: ").Append(RefinementHref).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The container that defines the fields for the buying options refinements. This container is returned when <b> fieldgroups</b> is set to <code>BUYING_OPTION_REFINEMENTS</code> or <code>FULL</code> in the request.
    /// </summary>
    [DataContract]
    public class BuyingOptionDistribution
    {
        /// <summary>
        /// Buying option type. This will be AUCTION or FIXED_PRICE or both.
        /// </summary>
        /// <value>Buying option type. This will be AUCTION or FIXED_PRICE or both.</value>
        [DataMember(Name = "buyingOption", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "buyingOption")]
        public string BuyingOption { get; set; }
        /// <summary>
        /// The number of items having this buying option.
        /// </summary>
        /// <value>The number of items having this buying option.</value>
        [DataMember(Name = "matchCount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "matchCount")]
        public int? MatchCount { get; set; }
        /// <summary>
        /// The HATEOAS reference for this buying option.
        /// </summary>
        /// <value>The HATEOAS reference for this buying option.</value>
        [DataMember(Name = "refinementHref", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "refinementHref")]
        public string RefinementHref { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  BuyingOption: ").Append(BuyingOption).Append("\n");
            sb.Append("  MatchCount: ").Append(MatchCount).Append("\n");
            sb.Append("  RefinementHref: ").Append(RefinementHref).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type is used by the <b> categories</b>  container in the response of the <b> search</b>  call, and contains the primary item category ID of the item, as well as the secondary item category if the item was listed in two categories.
    /// </summary>
    [DataContract]
    public class Category
    {
        /// <summary>
        /// The unique identifier of the primary item category of the item, as well as the secondary item category if item was listed in two categories.
        /// </summary>
        /// <value>The unique identifier of the primary item category of the item, as well as the secondary item category if item was listed in two categories.</value>
        [DataMember(Name = "categoryId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryId")]
        public string CategoryId { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The container that defines the fields for the category refinements. This container is returned when <b> fieldgroups</b> is set to <code>CATEGORY_REFINEMENTS</code> or <code>FULL</code> in the request.
    /// </summary>
    [DataContract]
    public class CategoryDistribution
    {
        /// <summary>
        /// The identifier of the category.
        /// </summary>
        /// <value>The identifier of the category.</value>
        [DataMember(Name = "categoryId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryId")]
        public string CategoryId { get; set; }
        /// <summary>
        /// The name of the category, such as Baby &amp; Toddler Clothing.
        /// </summary>
        /// <value>The name of the category, such as Baby &amp; Toddler Clothing.</value>
        [DataMember(Name = "categoryName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryName")]
        public string CategoryName { get; set; }
        /// <summary>
        /// The number of items in this category.
        /// </summary>
        /// <value>The number of items in this category.</value>
        [DataMember(Name = "matchCount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "matchCount")]
        public int? MatchCount { get; set; }
        /// <summary>
        /// The HATEOAS reference of this category.
        /// </summary>
        /// <value>The HATEOAS reference of this category.</value>
        [DataMember(Name = "refinementHref", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "refinementHref")]
        public string RefinementHref { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  MatchCount: ").Append(MatchCount).Append("\n");
            sb.Append("  RefinementHref: ").Append(RefinementHref).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The container that defines the fields for the conditions refinements. This container is returned when <b> fieldgroups</b> is set to <code>CONDITION_REFINEMENTS</code> or <code>FULL</code> in the request.
    /// </summary>
    [DataContract]
    public class ConditionDistribution
    {
        /// <summary>
        /// The text describing the condition of the item, such as New or Used. For a list of condition names, see ConditionEnum. Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>The text describing the condition of the item, such as New or Used. For a list of condition names, see ConditionEnum. Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "condition", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "condition")]
        public string Condition { get; set; }
        /// <summary>
        /// The identifier of the condition. For example, 1000 is the identifier for NEW.
        /// </summary>
        /// <value>The identifier of the condition. For example, 1000 is the identifier for NEW.</value>
        [DataMember(Name = "conditionId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "conditionId")]
        public string ConditionId { get; set; }
        /// <summary>
        /// The number of items having the condition.
        /// </summary>
        /// <value>The number of items having the condition.</value>
        [DataMember(Name = "matchCount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "matchCount")]
        public int? MatchCount { get; set; }
        /// <summary>
        /// The HATEOAS reference of this condition.
        /// </summary>
        /// <value>The HATEOAS reference of this condition.</value>
        [DataMember(Name = "refinementHref", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "refinementHref")]
        public string RefinementHref { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  ConditionId: ").Append(ConditionId).Append("\n");
            sb.Append("  MatchCount: ").Append(MatchCount).Append("\n");
            sb.Append("  RefinementHref: ").Append(RefinementHref).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type defines the monetary value of an amount. It can provide the amount in both the currency used on the eBay site where an item is being offered and the conversion of that value into another currency, if applicable.
    /// </summary>
    [DataContract]
    public class ConvertedAmount
    {
        /// <summary>
        /// A three-letter ISO 4217 code that indicates the currency of the amount in the convertedFromValue field. This value is required or returned only if currency conversion/localization is required, and represents the pre-conversion currency. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/CurrencyCodeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>A three-letter ISO 4217 code that indicates the currency of the amount in the convertedFromValue field. This value is required or returned only if currency conversion/localization is required, and represents the pre-conversion currency. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/CurrencyCodeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "convertedFromCurrency", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "convertedFromCurrency")]
        public string ConvertedFromCurrency { get; set; }
        /// <summary>
        /// The monetary amount before any conversion is performed, in the currency specified by the convertedFromCurrency field. This value is required or returned only if currency conversion/localization is required. The value field contains the converted amount of this value, in the currency specified by the currency field.
        /// </summary>
        /// <value>The monetary amount before any conversion is performed, in the currency specified by the convertedFromCurrency field. This value is required or returned only if currency conversion/localization is required. The value field contains the converted amount of this value, in the currency specified by the currency field.</value>
        [DataMember(Name = "convertedFromValue", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "convertedFromValue")]
        public string ConvertedFromValue { get; set; }
        /// <summary>
        /// A three-letter ISO 4217 code that indicates the currency of the amount in the value field. If currency conversion/localization is required, this is the post-conversion currency of the amount in the value field. Default: The currency of the authenticated user's country. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/CurrencyCodeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>A three-letter ISO 4217 code that indicates the currency of the amount in the value field. If currency conversion/localization is required, this is the post-conversion currency of the amount in the value field. Default: The currency of the authenticated user's country. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/CurrencyCodeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "currency")]
        public string Currency { get; set; }
        /// <summary>
        /// The monetary amount, in the currency specified by the currency field. If currency conversion/localization is required, this value is the converted amount, and the convertedFromValue field contains the amount in the original currency.
        /// </summary>
        /// <value>The monetary amount, in the currency specified by the currency field. If currency conversion/localization is required, this value is the converted amount, and the convertedFromValue field contains the amount in the original currency.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ConvertedFromCurrency: ").Append(ConvertedFromCurrency).Append("\n");
            sb.Append("  ConvertedFromValue: ").Append(ConvertedFromValue).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// Type the defines the details of an image, such as size and image URL. Currently only <b> imageUrl</b> is  populated. The <b> height</b> and <b> width</b> were added for future use.
    /// </summary>
    [DataContract]
    public class Image
    {
        /// <summary>
        /// Reserved for future use.
        /// </summary>
        /// <value>Reserved for future use.</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "height")]
        public int? Height { get; set; }
        /// <summary>
        /// The URL of the image.
        /// </summary>
        /// <value>The URL of the image.</value>
        [DataMember(Name = "imageUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "imageUrl")]
        public string ImageUrl { get; set; }
        /// <summary>
        /// Reserved for future use.
        /// </summary>
        /// <value>Reserved for future use.</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "width")]
        public int? Width { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type is used by the <b> itemLocation</b>  container, which provides location information for the item.
    /// </summary>
    [DataContract]
    public class ItemLocationImpl
    {
        /// <summary>
        /// The first line of the street address.
        /// </summary>
        /// <value>The first line of the street address.</value>
        [DataMember(Name = "addressLine1", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "addressLine1")]
        public string AddressLine1 { get; set; }
        /// <summary>
        /// The second line of the street address. This field may contain such values as an apartment or suite number.
        /// </summary>
        /// <value>The second line of the street address. This field may contain such values as an apartment or suite number.</value>
        [DataMember(Name = "addressLine2", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "addressLine2")]
        public string AddressLine2 { get; set; }
        /// <summary>
        /// The city in which the item is located.
        /// </summary>
        /// <value>The city in which the item is located.</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "city")]
        public string City { get; set; }
        /// <summary>
        /// The two-letter ISO 3166 standard code that indicates the country in which the item is located. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/CountryCodeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The two-letter ISO 3166 standard code that indicates the country in which the item is located. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/CountryCodeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }
        /// <summary>
        /// The county in which the item is located.
        /// </summary>
        /// <value>The county in which the item is located.</value>
        [DataMember(Name = "county", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "county")]
        public string County { get; set; }
        /// <summary>
        /// The postal code (or zip code in US) where the item is located.
        /// </summary>
        /// <value>The postal code (or zip code in US) where the item is located.</value>
        [DataMember(Name = "postalCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "postalCode")]
        public string PostalCode { get; set; }
        /// <summary>
        /// The state or province in which the item is located.
        /// </summary>
        /// <value>The state or province in which the item is located.</value>
        [DataMember(Name = "stateOrProvince", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "stateOrProvince")]
        public string StateOrProvince { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  County: ").Append(County).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  StateOrProvince: ").Append(StateOrProvince).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the item details for a specific item.
    /// </summary>
    [DataContract]
    public class ItemSummary
    {
        /// <summary>
        /// An array of containers with the URLs for the images that are in addition to the primary image. The primary image is returned in the image.imageUrl field.
        /// </summary>
        /// <value>An array of containers with the URLs for the images that are in addition to the primary image. The primary image is returned in the image.imageUrl field.</value>
        [DataMember(Name = "additionalImages", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "additionalImages")]
        public Image[] AdditionalImages { get; set; }
        /// <summary>
        /// This indicates if the item is for adults only. For more information about adult-only items on eBay, see Adult items policy for sellers and Searching for adult only items for buyers.
        /// </summary>
        /// <value>This indicates if the item is for adults only. For more information about adult-only items on eBay, see Adult items policy for sellers and Searching for adult only items for buyers.</value>
        [DataMember(Name = "adultOnly", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "adultOnly")]
        public bool? AdultOnly { get; set; }
        /// <summary>
        /// This integer value indicates the total number of bids that have been placed for an auction item. This field is only returned for auction items.
        /// </summary>
        /// <value>This integer value indicates the total number of bids that have been placed for an auction item. This field is only returned for auction items.</value>
        [DataMember(Name = "bidCount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "bidCount")]
        public int? BidCount { get; set; }
        /// <summary>
        /// A comma separated list of the purchase options available for the item, such as FIXED_PRICE, AUCTION. FIXED_PRICE - Returned for fixed-price items (non-auction) AUCTION - Returned for auction items without Buy It Now feature FIXED_PRICE and AUCTION - Returned for auction items enabled with the Buy It Now feature Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>A comma separated list of the purchase options available for the item, such as FIXED_PRICE, AUCTION. FIXED_PRICE - Returned for fixed-price items (non-auction) AUCTION - Returned for auction items without Buy It Now feature FIXED_PRICE and AUCTION - Returned for auction items enabled with the Buy It Now feature Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "buyingOptions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "buyingOptions")]
        public string[] BuyingOptions { get; set; }
        /// <summary>
        /// This container returns the primary category ID of the item (as well as the secondary category if the item was listed in two categories).
        /// </summary>
        /// <value>This container returns the primary category ID of the item (as well as the secondary category if the item was listed in two categories).</value>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categories")]
        public Category[] Categories { get; set; }
        /// <summary>
        /// The text describing the condition of the item, such as New or Used. For a list of condition names, see ConditionEnum. Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>The text describing the condition of the item, such as New or Used. For a list of condition names, see ConditionEnum. Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "condition", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "condition")]
        public string Condition { get; set; }
        /// <summary>
        /// The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see ConditionEnum. Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see ConditionEnum. Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "conditionId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "conditionId")]
        public string ConditionId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "currentBidPrice", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "currentBidPrice")]
        public ConvertedAmount CurrentBidPrice { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "distanceFromPickupLocation", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "distanceFromPickupLocation")]
        public TargetLocation DistanceFromPickupLocation { get; set; }
        /// <summary>
        /// This indicates the energy efficiency rating of the item. Energy efficiency ratings apply to products listed by commercial vendors in electronics categories only. Currently, this field is only applicable for the Germany site, and is only returned if the seller specified the energy efficiency rating through item specifics at listing time. Rating values include A+++, A++, A+, A, B, C, D, E, F, and G.
        /// </summary>
        /// <value>This indicates the energy efficiency rating of the item. Energy efficiency ratings apply to products listed by commercial vendors in electronics categories only. Currently, this field is only applicable for the Germany site, and is only returned if the seller specified the energy efficiency rating through item specifics at listing time. Rating values include A+++, A++, A+, A, B, C, D, E, F, and G.</value>
        [DataMember(Name = "energyEfficiencyClass", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "energyEfficiencyClass")]
        public string EnergyEfficiencyClass { get; set; }
        /// <summary>
        /// An ePID is the eBay product identifier of a product from the eBay product catalog. This indicates the product in which the item belongs.
        /// </summary>
        /// <value>An ePID is the eBay product identifier of a product from the eBay product catalog. This indicates the product in which the item belongs.</value>
        [DataMember(Name = "epid", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "epid")]
        public string Epid { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "image")]
        public Image Image { get; set; }
        /// <summary>
        /// The URL to the View Item page of the item, which includes the affiliate tracking ID. This field is only returned if the seller enables affiliate tracking for the item by including the X-EBAY-C-ENDUSERCTX request header in the call.
        /// </summary>
        /// <value>The URL to the View Item page of the item, which includes the affiliate tracking ID. This field is only returned if the seller enables affiliate tracking for the item by including the X-EBAY-C-ENDUSERCTX request header in the call.</value>
        [DataMember(Name = "itemAffiliateWebUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemAffiliateWebUrl")]
        public string ItemAffiliateWebUrl { get; set; }
        /// <summary>
        /// The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. Note: This field is returned only for item groups.
        /// </summary>
        /// <value>The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. Note: This field is returned only for item groups.</value>
        [DataMember(Name = "itemGroupHref", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemGroupHref")]
        public string ItemGroupHref { get; set; }
        /// <summary>
        /// The indicates the item group type. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. Currently only SELLER_DEFINED_VARIATIONS is supported and indicates this is an item group created by the seller. Note: This field is returned only for item groups. Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>The indicates the item group type. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. Currently only SELLER_DEFINED_VARIATIONS is supported and indicates this is an item group created by the seller. Note: This field is returned only for item groups. Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "itemGroupType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemGroupType")]
        public string ItemGroupType { get; set; }
        /// <summary>
        /// The URI for the Browse API getItem call, which can be used to retrieve more details about items in the search results.
        /// </summary>
        /// <value>The URI for the Browse API getItem call, which can be used to retrieve more details about items in the search results.</value>
        [DataMember(Name = "itemHref", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemHref")]
        public string ItemHref { get; set; }
        /// <summary>
        /// The unique RESTful identifier of the item.
        /// </summary>
        /// <value>The unique RESTful identifier of the item.</value>
        [DataMember(Name = "itemId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemId")]
        public string ItemId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "itemLocation", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemLocation")]
        public ItemLocationImpl ItemLocation { get; set; }
        /// <summary>
        /// The URL to the View Item page of the item. This enables you to include a &quot;Report Item on eBay&quot; hyperlink that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.
        /// </summary>
        /// <value>The URL to the View Item page of the item. This enables you to include a &quot;Report Item on eBay&quot; hyperlink that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.</value>
        [DataMember(Name = "itemWebUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemWebUrl")]
        public string ItemWebUrl { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "marketingPrice", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "marketingPrice")]
        public MarketingPrice MarketingPrice { get; set; }
        /// <summary>
        /// This container returns the local pickup options available to the buyer. This container is only returned if the user is searching for local pickup items and set the local pickup filters in the call request.
        /// </summary>
        /// <value>This container returns the local pickup options available to the buyer. This container is only returned if the user is searching for local pickup items and set the local pickup filters in the call request.</value>
        [DataMember(Name = "pickupOptions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "pickupOptions")]
        public PickupOptionSummary[] PickupOptions { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "price")]
        public ConvertedAmount Price { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "seller", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "seller")]
        public Seller Seller { get; set; }
        /// <summary>
        /// This container returns the shipping options available to ship the item.
        /// </summary>
        /// <value>This container returns the shipping options available to ship the item.</value>
        [DataMember(Name = "shippingOptions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shippingOptions")]
        public ShippingOptionSummary[] ShippingOptions { get; set; }
        /// <summary>
        /// This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.). Sometimes the title doesn't give enough information but the description is much to big. Surfacing the shortDescription can often provide buyers with the additional information that could help them make a buying decision. For example: &quot;title&quot;: &quot;Petrel U42W FPV Drone RC Quadcopter w/HD Camera Live Video One Key Off / Landing&quot;, &quot;shortDescription&quot;: &quot;1 U42W Quadcopter. Syma X5SW-V3 Wifi FPV RC Drone Quadcopter 2.4Ghz 6-Axis Gyro with Headless Mode. Syma X20 Pocket Drone 2.4Ghz Mini RC Quadcopter Headless Mode Altitude Hold. One Key Take Off / Landing function: allow beginner to easy to fly the drone without any skill.&quot;, Restriction: This field is returned only when fieldgroups = EXTENDED. Restriction: This field is returned only when fieldgroups = EXTENDED.
        /// </summary>
        /// <value>This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.). Sometimes the title doesn't give enough information but the description is much to big. Surfacing the shortDescription can often provide buyers with the additional information that could help them make a buying decision. For example: &quot;title&quot;: &quot;Petrel U42W FPV Drone RC Quadcopter w/HD Camera Live Video One Key Off / Landing&quot;, &quot;shortDescription&quot;: &quot;1 U42W Quadcopter. Syma X5SW-V3 Wifi FPV RC Drone Quadcopter 2.4Ghz 6-Axis Gyro with Headless Mode. Syma X20 Pocket Drone 2.4Ghz Mini RC Quadcopter Headless Mode Altitude Hold. One Key Take Off / Landing function: allow beginner to easy to fly the drone without any skill.&quot;, Restriction: This field is returned only when fieldgroups = EXTENDED. Restriction: This field is returned only when fieldgroups = EXTENDED.</value>
        [DataMember(Name = "shortDescription", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shortDescription")]
        public string ShortDescription { get; set; }
        /// <summary>
        /// An array of thumbnail images for the item.
        /// </summary>
        /// <value>An array of thumbnail images for the item.</value>
        [DataMember(Name = "thumbnailImages", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "thumbnailImages")]
        public Image[] ThumbnailImages { get; set; }
        /// <summary>
        /// The seller-created title of the item. Maximum Length: 80 characters
        /// </summary>
        /// <value>The seller-created title of the item. Maximum Length: 80 characters</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "unitPrice", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "unitPrice")]
        public ConvertedAmount UnitPrice { get; set; }
        /// <summary>
        /// The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;
        /// </summary>
        /// <value>The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;</value>
        [DataMember(Name = "unitPricingMeasure", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "unitPricingMeasure")]
        public string UnitPricingMeasure { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AdditionalImages: ").Append(AdditionalImages).Append("\n");
            sb.Append("  AdultOnly: ").Append(AdultOnly).Append("\n");
            sb.Append("  BidCount: ").Append(BidCount).Append("\n");
            sb.Append("  BuyingOptions: ").Append(BuyingOptions).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  ConditionId: ").Append(ConditionId).Append("\n");
            sb.Append("  CurrentBidPrice: ").Append(CurrentBidPrice).Append("\n");
            sb.Append("  DistanceFromPickupLocation: ").Append(DistanceFromPickupLocation).Append("\n");
            sb.Append("  EnergyEfficiencyClass: ").Append(EnergyEfficiencyClass).Append("\n");
            sb.Append("  Epid: ").Append(Epid).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  ItemAffiliateWebUrl: ").Append(ItemAffiliateWebUrl).Append("\n");
            sb.Append("  ItemGroupHref: ").Append(ItemGroupHref).Append("\n");
            sb.Append("  ItemGroupType: ").Append(ItemGroupType).Append("\n");
            sb.Append("  ItemHref: ").Append(ItemHref).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ItemLocation: ").Append(ItemLocation).Append("\n");
            sb.Append("  ItemWebUrl: ").Append(ItemWebUrl).Append("\n");
            sb.Append("  MarketingPrice: ").Append(MarketingPrice).Append("\n");
            sb.Append("  PickupOptions: ").Append(PickupOptions).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Seller: ").Append(Seller).Append("\n");
            sb.Append("  ShippingOptions: ").Append(ShippingOptions).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  ThumbnailImages: ").Append(ThumbnailImages).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  UnitPricingMeasure: ").Append(UnitPricingMeasure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields that describe a seller discount.
    /// </summary>
    [DataContract]
    public class MarketingPrice
    {
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "discountAmount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "discountAmount")]
        public ConvertedAmount DiscountAmount { get; set; }
        /// <summary>
        /// This field expresses the percentage of the seller discount based on the value in the originalPrice container.
        /// </summary>
        /// <value>This field expresses the percentage of the seller discount based on the value in the originalPrice container.</value>
        [DataMember(Name = "discountPercentage", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "discountPercentage")]
        public string DiscountPercentage { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "originalPrice", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "originalPrice")]
        public ConvertedAmount OriginalPrice { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  DiscountPercentage: ").Append(DiscountPercentage).Append("\n");
            sb.Append("  OriginalPrice: ").Append(OriginalPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the local pickup options that are available for the item. It is used by the <b>  pickupOptions</b>  container.
    /// </summary>
    [DataContract]
    public class PickupOptionSummary
    {
        /// <summary>
        /// This container returns the local pickup options available to the buyer. Possible values are ARRANGED_LOCATION and STORE.
        /// </summary>
        /// <value>This container returns the local pickup options available to the buyer. Possible values are ARRANGED_LOCATION and STORE.</value>
        [DataMember(Name = "pickupLocationType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "pickupLocationType")]
        public string PickupLocationType { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  PickupLocationType: ").Append(PickupLocationType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type defines the fields for the various refinements of an item. You can use the information in this container to create histograms, which help shoppers choose exactly what they want.
    /// </summary>
    [DataContract]
    public class Refinement
    {
        /// <summary>
        /// A array of containers for the all the aspect refinements.
        /// </summary>
        /// <value>A array of containers for the all the aspect refinements.</value>
        [DataMember(Name = "aspectDistributions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectDistributions")]
        public AspectDistribution[] AspectDistributions { get; set; }
        /// <summary>
        /// A array of containers for the all the buying option refinements.
        /// </summary>
        /// <value>A array of containers for the all the buying option refinements.</value>
        [DataMember(Name = "buyingOptionDistributions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "buyingOptionDistributions")]
        public BuyingOptionDistribution[] BuyingOptionDistributions { get; set; }
        /// <summary>
        /// A array of containers for the all the category refinements.
        /// </summary>
        /// <value>A array of containers for the all the category refinements.</value>
        [DataMember(Name = "categoryDistributions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryDistributions")]
        public CategoryDistribution[] CategoryDistributions { get; set; }
        /// <summary>
        /// A array of containers for the all the condition refinements.
        /// </summary>
        /// <value>A array of containers for the all the condition refinements.</value>
        [DataMember(Name = "conditionDistributions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "conditionDistributions")]
        public ConditionDistribution[] ConditionDistributions { get; set; }
        /// <summary>
        /// The identifier of the category that most of the items are part of.
        /// </summary>
        /// <value>The identifier of the category that most of the items are part of.</value>
        [DataMember(Name = "dominantCategoryId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "dominantCategoryId")]
        public string DominantCategoryId { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AspectDistributions: ").Append(AspectDistributions).Append("\n");
            sb.Append("  BuyingOptionDistributions: ").Append(BuyingOptionDistributions).Append("\n");
            sb.Append("  CategoryDistributions: ").Append(CategoryDistributions).Append("\n");
            sb.Append("  ConditionDistributions: ").Append(ConditionDistributions).Append("\n");
            sb.Append("  DominantCategoryId: ").Append(DominantCategoryId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for a paginated result set. The response consists of 0 or more sequenced <em> result sets</em> where each result sets has 0 or more items. 
    /// </summary>
    [DataContract]
    public class SearchPagedCollection
    {
        /// <summary>
        /// The URI of the current result set. For example: https://api.ebay.com/buy/v1/item/search?q=shirt&amp;price=[20..80]&amp;limit=5 This query is for a shirt, that is priced between 20 and 80 dollars and limits the response to 5 items.
        /// </summary>
        /// <value>The URI of the current result set. For example: https://api.ebay.com/buy/v1/item/search?q=shirt&amp;price=[20..80]&amp;limit=5 This query is for a shirt, that is priced between 20 and 80 dollars and limits the response to 5 items.</value>
        [DataMember(Name = "href", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "href")]
        public string Href { get; set; }
        /// <summary>
        /// An array of items in one result set. The items are sorted according to the sorting method specified in the request.
        /// </summary>
        /// <value>An array of items in one result set. The items are sorted according to the sorting method specified in the request.</value>
        [DataMember(Name = "itemSummaries", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemSummaries")]
        public ItemSummary[] ItemSummaries { get; set; }
        /// <summary>
        /// The maximum number of items that can be returned in a result set. This is the limit value that was used in the request.
        /// </summary>
        /// <value>The maximum number of items that can be returned in a result set. This is the limit value that was used in the request.</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "limit")]
        public int? Limit { get; set; }
        /// <summary>
        /// The URL for the next result set. This is returned if there is a next result set. The following example returns items 11 thru 20 from the list of items. https://api.ebay.com/buy/v1/item/search?query=t-shirts&amp;limit=10&amp;offset=0
        /// </summary>
        /// <value>The URL for the next result set. This is returned if there is a next result set. The following example returns items 11 thru 20 from the list of items. https://api.ebay.com/buy/v1/item/search?query=t-shirts&amp;limit=10&amp;offset=0</value>
        [DataMember(Name = "next", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "next")]
        public string Next { get; set; }
        /// <summary>
        /// This value indicates the current 'page' of items being displayed. This value is 0 for the first page of data, 1 for the second page of data, and so on.
        /// </summary>
        /// <value>This value indicates the current 'page' of items being displayed. This value is 0 for the first page of data, 1 for the second page of data, and so on.</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "offset")]
        public int? Offset { get; set; }
        /// <summary>
        /// The URL for the previous result set. This is returned if there is a previous result set. The following example returns items 1 thru 10 from the list of items. https://api.ebay.com/buy/v1/item/search?query=t-shirts&amp;limit=10&amp;offset=0
        /// </summary>
        /// <value>The URL for the previous result set. This is returned if there is a previous result set. The following example returns items 1 thru 10 from the list of items. https://api.ebay.com/buy/v1/item/search?query=t-shirts&amp;limit=10&amp;offset=0</value>
        [DataMember(Name = "prev", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "prev")]
        public string Prev { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "refinement", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "refinement")]
        public Refinement Refinement { get; set; }
        /// <summary>
        /// The total number of items that match the input criteria.
        /// </summary>
        /// <value>The total number of items that match the input criteria.</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "total")]
        public int? Total { get; set; }
        /// <summary>
        /// The container with all the warnings for the input request.
        /// </summary>
        /// <value>The container with all the warnings for the input request.</value>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "warnings")]
        public Error[] Warnings { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  ItemSummaries: ").Append(ItemSummaries).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Prev: ").Append(Prev).Append("\n");
            sb.Append("  Refinement: ").Append(Refinement).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for basic information about the seller of the item returned by the <b> item_summary</b> resource.
    /// </summary>
    [DataContract]
    public class Seller
    {
        /// <summary>
        /// The percentage of the total positive feedback.
        /// </summary>
        /// <value>The percentage of the total positive feedback.</value>
        [DataMember(Name = "feedbackPercentage", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "feedbackPercentage")]
        public string FeedbackPercentage { get; set; }
        /// <summary>
        /// The feedback score of the seller. This value is based on the ratings from eBay members that bought items from this seller.
        /// </summary>
        /// <value>The feedback score of the seller. This value is based on the ratings from eBay members that bought items from this seller.</value>
        [DataMember(Name = "feedbackScore", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "feedbackScore")]
        public int? FeedbackScore { get; set; }
        /// <summary>
        /// Indicates if the seller is a business or an individual. This is determined when the seller registers with eBay. If they register for a business account, this value will be BUSINESS. If they register for a private account, this value will be INDIVIDUAL. This designation is required by the tax laws in some countries. This field is returned only on the following sites. EBAY-AT &nbsp;&nbsp;&nbsp;EBAY-BE &nbsp;&nbsp;&nbsp;EBAY-CH &nbsp;&nbsp;&nbsp;EBAY-DE &nbsp;&nbsp;&nbsp;EBAY-ES &nbsp;&nbsp;&nbsp;EBAY-FR &nbsp;&nbsp;&nbsp;EBAY-GB &nbsp;&nbsp;&nbsp;EBAY-IE &nbsp;&nbsp;&nbsp; EBAY-IT &nbsp;&nbsp;&nbsp;EBAY-PL Valid values: BUSINESS INDIVIDUALCode so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>Indicates if the seller is a business or an individual. This is determined when the seller registers with eBay. If they register for a business account, this value will be BUSINESS. If they register for a private account, this value will be INDIVIDUAL. This designation is required by the tax laws in some countries. This field is returned only on the following sites. EBAY-AT &nbsp;&nbsp;&nbsp;EBAY-BE &nbsp;&nbsp;&nbsp;EBAY-CH &nbsp;&nbsp;&nbsp;EBAY-DE &nbsp;&nbsp;&nbsp;EBAY-ES &nbsp;&nbsp;&nbsp;EBAY-FR &nbsp;&nbsp;&nbsp;EBAY-GB &nbsp;&nbsp;&nbsp;EBAY-IE &nbsp;&nbsp;&nbsp; EBAY-IT &nbsp;&nbsp;&nbsp;EBAY-PL Valid values: BUSINESS INDIVIDUALCode so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "sellerAccountType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sellerAccountType")]
        public string SellerAccountType { get; set; }
        /// <summary>
        /// The user name created by the seller for use on eBay.
        /// </summary>
        /// <value>The user name created by the seller for use on eBay.</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  FeedbackPercentage: ").Append(FeedbackPercentage).Append("\n");
            sb.Append("  FeedbackScore: ").Append(FeedbackScore).Append("\n");
            sb.Append("  SellerAccountType: ").Append(SellerAccountType).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the shipping information.
    /// </summary>
    [DataContract]
    public class ShippingOptionSummary
    {
        /// <summary>
        /// The end date of the delivery window (latest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the contextualLocation values in the X-EBAY-C-ENDUSERCTX request header.
        /// </summary>
        /// <value>The end date of the delivery window (latest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the contextualLocation values in the X-EBAY-C-ENDUSERCTX request header.</value>
        [DataMember(Name = "maxEstimatedDeliveryDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "maxEstimatedDeliveryDate")]
        public string MaxEstimatedDeliveryDate { get; set; }
        /// <summary>
        /// The start date of the delivery window (earliest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the contextualLocation values in the X-EBAY-C-ENDUSERCTX request header.
        /// </summary>
        /// <value>The start date of the delivery window (earliest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the contextualLocation values in the X-EBAY-C-ENDUSERCTX request header.</value>
        [DataMember(Name = "minEstimatedDeliveryDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "minEstimatedDeliveryDate")]
        public string MinEstimatedDeliveryDate { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "shippingCost", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shippingCost")]
        public ConvertedAmount ShippingCost { get; set; }
        /// <summary>
        /// This field indicates the type of shipping used to ship the item. Possible values are FIXED (flat-rate shipping) and CALCULATED (calculated shipping).
        /// </summary>
        /// <value>This field indicates the type of shipping used to ship the item. Possible values are FIXED (flat-rate shipping) and CALCULATED (calculated shipping).</value>
        [DataMember(Name = "shippingCostType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shippingCostType")]
        public string ShippingCostType { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  MaxEstimatedDeliveryDate: ").Append(MaxEstimatedDeliveryDate).Append("\n");
            sb.Append("  MinEstimatedDeliveryDate: ").Append(MinEstimatedDeliveryDate).Append("\n");
            sb.Append("  ShippingCost: ").Append(ShippingCost).Append("\n");
            sb.Append("  ShippingCostType: ").Append(ShippingCostType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the distance between the item location and the buyer's location. 
    /// </summary>
    [DataContract]
    public class TargetLocation
    {
        /// <summary>
        /// This value shows the unit of measurement used to measure the distance between the location of the item and the buyer's location. This value is typically mi or km.
        /// </summary>
        /// <value>This value shows the unit of measurement used to measure the distance between the location of the item and the buyer's location. This value is typically mi or km.</value>
        [DataMember(Name = "unitOfMeasure", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "unitOfMeasure")]
        public string UnitOfMeasure { get; set; }
        /// <summary>
        /// This value indicates the distance (measured in the measurement unit in the unitOfMeasure field) between the item location and the buyer's location.
        /// </summary>
        /// <value>This value indicates the distance (measured in the measurement unit in the unitOfMeasure field) between the item location and the buyer's location.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for a period of time in the time-measurement units supplied.
    /// </summary>
    [DataContract]
    public class TimeDuration
    {
        /// <summary>
        /// An enumeration value that indicates the units (such as hours) of the time span. The enumeration value in this field defines the period of time being used to measure the duration, such as business days, months, or years. See the TimeDurationUnitEnum type for a list of possible time-measuring units. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/TimeDurationUnitEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>An enumeration value that indicates the units (such as hours) of the time span. The enumeration value in this field defines the period of time being used to measure the duration, such as business days, months, or years. See the TimeDurationUnitEnum type for a list of possible time-measuring units. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/TimeDurationUnitEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "unit", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "unit")]
        public string Unit { get; set; }
        /// <summary>
        /// Retrieves the duration of the time span (no units).The value in this field indicates the number of years, months, days, hours, or minutes in the defined period.
        /// </summary>
        /// <value>Retrieves the duration of the time span (no units).The value in this field indicates the number of years, months, days, hours, or minutes in the defined period.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "value")]
        public int? Value { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the array of product identifiers associated with the item. This container is returned if the seller has associated the eBay Product Identifier (ePID) with the item and in the request <b> fieldgroups</b> is set to <code>PRODUCT</code>.
    /// </summary>
    [DataContract]
    public class AdditionalProductIdentity
    {
        /// <summary>
        /// An array of the product identifier/value pairs for the product associated with the item. This is returned if the seller has associated the eBay Product Identifier (ePID) with the item and the request has fieldgroups set to PRODUCT. The following table shows what is returned, based on the item information provided by the seller, when the fieldgroups set to PRODUCT. ePID Provided Product&nbsp;ID(s) Provided Response No No The AdditionalProductIdentity container is not returned. No Yes The AdditionalProductIdentity container is not returned but the product identifiers specified by the seller are returned in the localizedAspects container. Yes No The AdditionalProductIdentity container is returned listing the product identifiers of the product. Yes Yes The AdditionalProductIdentity container is returned listing all the product identifiers of the product and the product identifiers specified by the seller are returned in the localizedAspects container.
        /// </summary>
        /// <value>An array of the product identifier/value pairs for the product associated with the item. This is returned if the seller has associated the eBay Product Identifier (ePID) with the item and the request has fieldgroups set to PRODUCT. The following table shows what is returned, based on the item information provided by the seller, when the fieldgroups set to PRODUCT. ePID Provided Product&nbsp;ID(s) Provided Response No No The AdditionalProductIdentity container is not returned. No Yes The AdditionalProductIdentity container is not returned but the product identifiers specified by the seller are returned in the localizedAspects container. Yes No The AdditionalProductIdentity container is returned listing the product identifiers of the product. Yes Yes The AdditionalProductIdentity container is returned listing all the product identifiers of the product and the product identifiers specified by the seller are returned in the localizedAspects container.</value>
        [DataMember(Name = "productIdentity", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "productIdentity")]
        public ProductIdentity[] ProductIdentity { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ProductIdentity: ").Append(ProductIdentity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for an address.
    /// </summary>
    [DataContract]
    public class Address
    {
        /// <summary>
        /// The first line of the street address.
        /// </summary>
        /// <value>The first line of the street address.</value>
        [DataMember(Name = "addressLine1", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "addressLine1")]
        public string AddressLine1 { get; set; }
        /// <summary>
        /// The second line of the street address. This field is not always used, but can be used for 'Suite Number' or 'Apt Number'.
        /// </summary>
        /// <value>The second line of the street address. This field is not always used, but can be used for 'Suite Number' or 'Apt Number'.</value>
        [DataMember(Name = "addressLine2", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "addressLine2")]
        public string AddressLine2 { get; set; }
        /// <summary>
        /// The city of the address.
        /// </summary>
        /// <value>The city of the address.</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "city")]
        public string City { get; set; }
        /// <summary>
        /// The two-letter ISO 3166 standard of the country of the address. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/CountryCodeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The two-letter ISO 3166 standard of the country of the address. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/CountryCodeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }
        /// <summary>
        /// The county of the address.
        /// </summary>
        /// <value>The county of the address.</value>
        [DataMember(Name = "county", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "county")]
        public string County { get; set; }
        /// <summary>
        /// The postal code of the address.
        /// </summary>
        /// <value>The postal code of the address.</value>
        [DataMember(Name = "postalCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "postalCode")]
        public string PostalCode { get; set; }
        /// <summary>
        /// The state or province of the address.
        /// </summary>
        /// <value>The state or province of the address.</value>
        [DataMember(Name = "stateOrProvince", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "stateOrProvince")]
        public string StateOrProvince { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  County: ").Append(County).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  StateOrProvince: ").Append(StateOrProvince).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the name/value pairs for the aspects of the product. For example: BRAND/Apple
    /// </summary>
    [DataContract]
    public class Aspect
    {
        /// <summary>
        /// The text representing the name of the aspect for the name/value pair, such as Brand.
        /// </summary>
        /// <value>The text representing the name of the aspect for the name/value pair, such as Brand.</value>
        [DataMember(Name = "localizedName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "localizedName")]
        public string LocalizedName { get; set; }
        /// <summary>
        /// The text representing the value of the aspect for the name/value pair, such as Apple.
        /// </summary>
        /// <value>The text representing the value of the aspect for the name/value pair, such as Apple.</value>
        [DataMember(Name = "localizedValues", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "localizedValues")]
        public string[] LocalizedValues { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  LocalizedName: ").Append(LocalizedName).Append("\n");
            sb.Append("  LocalizedValues: ").Append(LocalizedValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class AspectGroup
    {
        /// <summary>
        /// An array of the name/value pairs for the aspects of the product. For example: BRAND/Apple
        /// </summary>
        /// <value>An array of the name/value pairs for the aspects of the product. For example: BRAND/Apple</value>
        [DataMember(Name = "aspects", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspects")]
        public Aspect[] Aspects { get; set; }
        /// <summary>
        /// The name of a group of aspects. In the following example, Product Identifiers and Process are product aspect group names. Under the group name are the product aspect name/value pairs. Product Identifiers &nbsp;&nbsp;&nbsp;Brand/Apple &nbsp;&nbsp;&nbsp;Product Family/iMac Processor &nbsp;&nbsp;&nbsp;Processor Type/Intel &nbsp;&nbsp;&nbsp;Processor Speed/3.10
        /// </summary>
        /// <value>The name of a group of aspects. In the following example, Product Identifiers and Process are product aspect group names. Under the group name are the product aspect name/value pairs. Product Identifiers &nbsp;&nbsp;&nbsp;Brand/Apple &nbsp;&nbsp;&nbsp;Product Family/iMac Processor &nbsp;&nbsp;&nbsp;Processor Type/Intel &nbsp;&nbsp;&nbsp;Processor Speed/3.10</value>
        [DataMember(Name = "localizedGroupName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "localizedGroupName")]
        public string LocalizedGroupName { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Aspects: ").Append(Aspects).Append("\n");
            sb.Append("  LocalizedGroupName: ").Append(LocalizedGroupName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the item IDs that all use a common description.  Often the item variations within an item group all have the same description. Instead of repeating this description in the item details of each item, a description that is shared by at least one other item is returned in this container. If the description is unique, it is returned in the <b> items.description</b> field.
    /// </summary>
    [DataContract]
    public class CommonDescriptions
    {
        /// <summary>
        /// The item description that is used by more than one of the item variations.
        /// </summary>
        /// <value>The item description that is used by more than one of the item variations.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        /// <summary>
        /// A list of item IDs that have this description.
        /// </summary>
        /// <value>A list of item IDs that have this description.</value>
        [DataMember(Name = "itemIds", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemIds")]
        public string[] ItemIds { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ItemIds: ").Append(ItemIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the estimated item availability information.
    /// </summary>
    [DataContract]
    public class EstimatedAvailability
    {
        /// <summary>
        /// This field is return only when the seller sets their 'display item quantity' preference to Display &quot;More than 10 available&quot; in your listing (if applicable). The value of this field will be &quot;10&quot;, which is the threshold value. Code so that your app gracefully handles any future changes to this value.
        /// </summary>
        /// <value>This field is return only when the seller sets their 'display item quantity' preference to Display &quot;More than 10 available&quot; in your listing (if applicable). The value of this field will be &quot;10&quot;, which is the threshold value. Code so that your app gracefully handles any future changes to this value.</value>
        [DataMember(Name = "availabilityThreshold", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "availabilityThreshold")]
        public int? AvailabilityThreshold { get; set; }
        /// <summary>
        /// This field is return only when the seller sets their Display Item Quantity preference to Display &quot;More than 10 available&quot; in your listing (if applicable). The value of this field will be MORE_THAN. This indicates that the seller has more than the 'quantity display preference', which is 10, in stock for this item. The following are the display item quantity preferences the seller can set. Display &quot;More than 10 available&quot; in your listing (if applicable) If the seller enables this preference, this field is returned as long as there are more than 10 of this item in inventory. If the quantity is equal to 10 or drops below 10, this field is not returned and the estimated quantity of the item is returned in the estimatedAvailableQuantity field. Display the exact quantity in your items If the seller enables this preference, the availabilityThresholdType and availabilityThreshold fields are not returned and the estimated quantity of the item is returned in the estimatedAvailableQuantity field. Note: Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. Code so that your app gracefully handles any future changes to these preferences. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/AvailabilityThresholdEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>This field is return only when the seller sets their Display Item Quantity preference to Display &quot;More than 10 available&quot; in your listing (if applicable). The value of this field will be MORE_THAN. This indicates that the seller has more than the 'quantity display preference', which is 10, in stock for this item. The following are the display item quantity preferences the seller can set. Display &quot;More than 10 available&quot; in your listing (if applicable) If the seller enables this preference, this field is returned as long as there are more than 10 of this item in inventory. If the quantity is equal to 10 or drops below 10, this field is not returned and the estimated quantity of the item is returned in the estimatedAvailableQuantity field. Display the exact quantity in your items If the seller enables this preference, the availabilityThresholdType and availabilityThreshold fields are not returned and the estimated quantity of the item is returned in the estimatedAvailableQuantity field. Note: Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. Code so that your app gracefully handles any future changes to these preferences. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/AvailabilityThresholdEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "availabilityThresholdType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "availabilityThresholdType")]
        public string AvailabilityThresholdType { get; set; }
        /// <summary>
        /// An array of available delivery options. Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>An array of available delivery options. Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "deliveryOptions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "deliveryOptions")]
        public string[] DeliveryOptions { get; set; }
        /// <summary>
        /// An enumeration value representing the inventory status of this item. Values: IN_STOCK LIMITED_STOCK OUT_OF_STOCK Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/AvailabilityStatusEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>An enumeration value representing the inventory status of this item. Values: IN_STOCK LIMITED_STOCK OUT_OF_STOCK Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/AvailabilityStatusEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "estimatedAvailabilityStatus", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "estimatedAvailabilityStatus")]
        public string EstimatedAvailabilityStatus { get; set; }
        /// <summary>
        /// The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.
        /// </summary>
        /// <value>The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.</value>
        [DataMember(Name = "estimatedAvailableQuantity", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "estimatedAvailableQuantity")]
        public int? EstimatedAvailableQuantity { get; set; }
        /// <summary>
        /// The estimated number of this item that have been sold.
        /// </summary>
        /// <value>The estimated number of this item that have been sold.</value>
        [DataMember(Name = "estimatedSoldQuantity", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "estimatedSoldQuantity")]
        public int? EstimatedSoldQuantity { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AvailabilityThreshold: ").Append(AvailabilityThreshold).Append("\n");
            sb.Append("  AvailabilityThresholdType: ").Append(AvailabilityThresholdType).Append("\n");
            sb.Append("  DeliveryOptions: ").Append(DeliveryOptions).Append("\n");
            sb.Append("  EstimatedAvailabilityStatus: ").Append(EstimatedAvailabilityStatus).Append("\n");
            sb.Append("  EstimatedAvailableQuantity: ").Append(EstimatedAvailableQuantity).Append("\n");
            sb.Append("  EstimatedSoldQuantity: ").Append(EstimatedSoldQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// Type that defines the fields for the item details for a specific item.
    /// </summary>
    [DataContract]
    public class Item
    {
        /// <summary>
        /// An array of containers with the URLs for the images that are in addition to the primary image. The primary image is returned in the image.imageUrl field.
        /// </summary>
        /// <value>An array of containers with the URLs for the images that are in addition to the primary image. The primary image is returned in the image.imageUrl field.</value>
        [DataMember(Name = "additionalImages", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "additionalImages")]
        public Image[] AdditionalImages { get; set; }
        /// <summary>
        /// This indicates if the item is for adults only. For more information about adult-only items on eBay, see Adult items policy for sellers and Searching for adult only items for buyers.
        /// </summary>
        /// <value>This indicates if the item is for adults only. For more information about adult-only items on eBay, see Adult items policy for sellers and Searching for adult only items for buyers.</value>
        [DataMember(Name = "adultOnly", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "adultOnly")]
        public bool? AdultOnly { get; set; }
        /// <summary>
        /// (Primary Item Aspect) The age group for which the product is recommended. For example, newborn, infant, toddler, kids, adult, etc. All the item aspects, including this aspect, are returned in the localizedAspects container.
        /// </summary>
        /// <value>(Primary Item Aspect) The age group for which the product is recommended. For example, newborn, infant, toddler, kids, adult, etc. All the item aspects, including this aspect, are returned in the localizedAspects container.</value>
        [DataMember(Name = "ageGroup", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "ageGroup")]
        public string AgeGroup { get; set; }
        /// <summary>
        /// This integer value indicates the total number of bids that have been placed against an auction item. This field is returned only for auction items.
        /// </summary>
        /// <value>This integer value indicates the total number of bids that have been placed against an auction item. This field is returned only for auction items.</value>
        [DataMember(Name = "bidCount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "bidCount")]
        public int? BidCount { get; set; }
        /// <summary>
        /// (Primary Item Aspect) The name brand of the item, such as Nike, Apple, etc. All the item aspects, including this aspect, are returned in the localizedAspects container.
        /// </summary>
        /// <value>(Primary Item Aspect) The name brand of the item, such as Nike, Apple, etc. All the item aspects, including this aspect, are returned in the localizedAspects container.</value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "brand")]
        public string Brand { get; set; }
        /// <summary>
        /// A comma separated list of the purchase options available for the item, such as FIXED_PRICE, AUCTION. FIXED_PRICE - Returned for fixed-price items (non-auction) AUCTION - Returned for auction items without Buy It Now feature FIXED_PRICE and AUCTION - Returned for auction items enabled with the Buy It Now feature Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>A comma separated list of the purchase options available for the item, such as FIXED_PRICE, AUCTION. FIXED_PRICE - Returned for fixed-price items (non-auction) AUCTION - Returned for auction items without Buy It Now feature FIXED_PRICE and AUCTION - Returned for auction items enabled with the Buy It Now feature Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "buyingOptions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "buyingOptions")]
        public string[] BuyingOptions { get; set; }
        /// <summary>
        /// The ID of the leaf category for this item. A left category is the lowest level in the category tree. This category has no children.
        /// </summary>
        /// <value>The ID of the leaf category for this item. A left category is the lowest level in the category tree. This category has no children.</value>
        [DataMember(Name = "categoryId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryId")]
        public string CategoryId { get; set; }
        /// <summary>
        /// Text that shows the category hierarchy of the item. For example: Computers/Tablets &amp; Networking, Laptops &amp; Netbooks, PC Laptops &amp; Netbooks
        /// </summary>
        /// <value>Text that shows the category hierarchy of the item. For example: Computers/Tablets &amp; Networking, Laptops &amp; Netbooks, PC Laptops &amp; Netbooks</value>
        [DataMember(Name = "categoryPath", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryPath")]
        public string CategoryPath { get; set; }
        /// <summary>
        /// (Primary Item Aspect) Text describing the color of the item. All the item aspects, including this aspect, are returned in the localizedAspects container.
        /// </summary>
        /// <value>(Primary Item Aspect) Text describing the color of the item. All the item aspects, including this aspect, are returned in the localizedAspects container.</value>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "color")]
        public string Color { get; set; }
        /// <summary>
        /// The text describing the condition of the item, such as New or Used. For a list of condition names, see ConditionEnum. Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>The text describing the condition of the item, such as New or Used. For a list of condition names, see ConditionEnum. Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "condition", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "condition")]
        public string Condition { get; set; }
        /// <summary>
        /// The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see ConditionEnum. Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see ConditionEnum. Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "conditionId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "conditionId")]
        public string ConditionId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "currentBidPrice", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "currentBidPrice")]
        public ConvertedAmount CurrentBidPrice { get; set; }
        /// <summary>
        /// The full description of the item that was created by the seller. This can be plain text or rich content.
        /// </summary>
        /// <value>The full description of the item that was created by the seller. This can be plain text or rich content.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        /// <summary>
        /// Indicates if the item can be purchased using Guest Checkout in the Order API. You can use this flag to exclude items from your inventory that are not eligible for Guest Checkout, such as gift cards.
        /// </summary>
        /// <value>Indicates if the item can be purchased using Guest Checkout in the Order API. You can use this flag to exclude items from your inventory that are not eligible for Guest Checkout, such as gift cards.</value>
        [DataMember(Name = "enabledForGuestCheckout", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "enabledForGuestCheckout")]
        public bool? EnabledForGuestCheckout { get; set; }
        /// <summary>
        /// Indicates the European energy efficiency rating (EEK) of the item. This field is returned only if the seller specified the energy efficiency rating. The rating is a set of energy efficiency classes from A to G, where 'A' is the most energy efficient and 'G' is the least efficient. This rating helps buyers choose between various models. When the manufacturer's specifications for this item are available, the link to this information is returned in the productFicheWebUrl field.
        /// </summary>
        /// <value>Indicates the European energy efficiency rating (EEK) of the item. This field is returned only if the seller specified the energy efficiency rating. The rating is a set of energy efficiency classes from A to G, where 'A' is the most energy efficient and 'G' is the least efficient. This rating helps buyers choose between various models. When the manufacturer's specifications for this item are available, the link to this information is returned in the productFicheWebUrl field.</value>
        [DataMember(Name = "energyEfficiencyClass", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "energyEfficiencyClass")]
        public string EnergyEfficiencyClass { get; set; }
        /// <summary>
        /// An EPID is the eBay product identifier of a product from the eBay product catalog. This indicates the product in which the item belongs.
        /// </summary>
        /// <value>An EPID is the eBay product identifier of a product from the eBay product catalog. This indicates the product in which the item belongs.</value>
        [DataMember(Name = "epid", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "epid")]
        public string Epid { get; set; }
        /// <summary>
        /// The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.
        /// </summary>
        /// <value>The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.</value>
        [DataMember(Name = "estimatedAvailabilities", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "estimatedAvailabilities")]
        public EstimatedAvailability[] EstimatedAvailabilities { get; set; }
        /// <summary>
        /// (Primary Item Aspect) The gender for the item. This is used for items that could vary by gender, such as clothing. For example: male, female, or unisex. All the item aspects, including this aspect, are returned in the localizedAspects container.
        /// </summary>
        /// <value>(Primary Item Aspect) The gender for the item. This is used for items that could vary by gender, such as clothing. For example: male, female, or unisex. All the item aspects, including this aspect, are returned in the localizedAspects container.</value>
        [DataMember(Name = "gender", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "gender")]
        public string Gender { get; set; }
        /// <summary>
        /// The unique Global Trade Item number of the item as defined by http://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.
        /// </summary>
        /// <value>The unique Global Trade Item number of the item as defined by http://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.</value>
        [DataMember(Name = "gtin", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "gtin")]
        public string Gtin { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "image")]
        public Image Image { get; set; }
        /// <summary>
        /// The URL of the View Item page of the item, which includes the affiliate tracking ID. This field is only returned if the seller enables affiliate tracking for the item by including the X-EBAY-C-ENDUSERCTX request header in the call.
        /// </summary>
        /// <value>The URL of the View Item page of the item, which includes the affiliate tracking ID. This field is only returned if the seller enables affiliate tracking for the item by including the X-EBAY-C-ENDUSERCTX request header in the call.</value>
        [DataMember(Name = "itemAffiliateWebUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemAffiliateWebUrl")]
        public string ItemAffiliateWebUrl { get; set; }
        /// <summary>
        /// The date and time up to which the items can be purchased. This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer.
        /// </summary>
        /// <value>The date and time up to which the items can be purchased. This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer.</value>
        [DataMember(Name = "itemEndDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemEndDate")]
        public string ItemEndDate { get; set; }
        /// <summary>
        /// The unique RESTful identifier of the item.
        /// </summary>
        /// <value>The unique RESTful identifier of the item.</value>
        [DataMember(Name = "itemId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemId")]
        public string ItemId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "itemLocation", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemLocation")]
        public Address ItemLocation { get; set; }
        /// <summary>
        /// The URL of the View Item page of the item. This enables you to include a &quot;Report Item on eBay&quot; hyperlink that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.
        /// </summary>
        /// <value>The URL of the View Item page of the item. This enables you to include a &quot;Report Item on eBay&quot; hyperlink that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.</value>
        [DataMember(Name = "itemWebUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemWebUrl")]
        public string ItemWebUrl { get; set; }
        /// <summary>
        /// An array of containers for the complete list of the name/value pairs that describe the variation of the item.
        /// </summary>
        /// <value>An array of containers for the complete list of the name/value pairs that describe the variation of the item.</value>
        [DataMember(Name = "localizedAspects", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "localizedAspects")]
        public TypedNameValue[] LocalizedAspects { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "marketingPrice", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "marketingPrice")]
        public MarketingPrice MarketingPrice { get; set; }
        /// <summary>
        /// (Primary Item Aspect) Text describing what the item is made of. For example, silk. All the item aspects, including this aspect, are returned in the localizedAspects container.
        /// </summary>
        /// <value>(Primary Item Aspect) Text describing what the item is made of. For example, silk. All the item aspects, including this aspect, are returned in the localizedAspects container.</value>
        [DataMember(Name = "material", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "material")]
        public string Material { get; set; }
        /// <summary>
        /// The manufacturer's part number, which is a unique number that identifies a specific product. To identify the product, this is always used along with brand.
        /// </summary>
        /// <value>The manufacturer's part number, which is a unique number that identifies a specific product. To identify the product, this is always used along with brand.</value>
        [DataMember(Name = "mpn", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "mpn")]
        public string Mpn { get; set; }
        /// <summary>
        /// (Primary Item Aspect) Text describing the pattern used on the item. For example, paisley. All the item aspects, including this aspect, are returned in the localizedAspects container.
        /// </summary>
        /// <value>(Primary Item Aspect) Text describing the pattern used on the item. For example, paisley. All the item aspects, including this aspect, are returned in the localizedAspects container.</value>
        [DataMember(Name = "pattern", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "pattern")]
        public string Pattern { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "price")]
        public ConvertedAmount Price { get; set; }
        /// <summary>
        /// An enumeration value that indicates how the item price is displayed. For some items, the prices are so low that they can only be shown to the buyer after they add the item to the cart. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/PriceDisplayConditionEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>An enumeration value that indicates how the item price is displayed. For some items, the prices are so low that they can only be shown to the buyer after they add the item to the cart. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/PriceDisplayConditionEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "priceDisplayCondition", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "priceDisplayCondition")]
        public string PriceDisplayCondition { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "primaryItemGroup", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "primaryItemGroup")]
        public ItemGroupSummary PrimaryItemGroup { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "primaryProductReviewRating", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "primaryProductReviewRating")]
        public ReviewRating PrimaryProductReviewRating { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "product", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "product")]
        public Product Product { get; set; }
        /// <summary>
        /// The URL of a page containing the manufacture's specification of this item, which helps buyers make a purchasing decision. This information is available only for items that include the European energy efficiency rating (EEK) but is not available for all items with an EEK rating. This field is returned only if this information is available. The EEK rating of the item is returned in the energyEfficiencyClass field.
        /// </summary>
        /// <value>The URL of a page containing the manufacture's specification of this item, which helps buyers make a purchasing decision. This information is available only for items that include the European energy efficiency rating (EEK) but is not available for all items with an EEK rating. This field is returned only if this information is available. The EEK rating of the item is returned in the energyEfficiencyClass field.</value>
        [DataMember(Name = "productFicheWebUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "productFicheWebUrl")]
        public string ProductFicheWebUrl { get; set; }
        /// <summary>
        /// The maximum number for a specific item that one buyer can purchase.
        /// </summary>
        /// <value>The maximum number for a specific item that one buyer can purchase.</value>
        [DataMember(Name = "quantityLimitPerBuyer", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "quantityLimitPerBuyer")]
        public int? QuantityLimitPerBuyer { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "returnTerms", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "returnTerms")]
        public ItemReturnTerms ReturnTerms { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "seller", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "seller")]
        public Seller_0 Seller { get; set; }
        /// <summary>
        /// An identifier generated/incremented when a seller revises the item. There are two types of item revisions; seller changes, such as changing the title, and eBay system changes, such as changing the quantity when an item is purchased. This ID is changed only when the seller makes a change to the item. This means you cannot use this value to determine if the quantity has changed.
        /// </summary>
        /// <value>An identifier generated/incremented when a seller revises the item. There are two types of item revisions; seller changes, such as changing the title, and eBay system changes, such as changing the quantity when an item is purchased. This ID is changed only when the seller makes a change to the item. This means you cannot use this value to determine if the quantity has changed.</value>
        [DataMember(Name = "sellerItemRevision", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sellerItemRevision")]
        public string SellerItemRevision { get; set; }
        /// <summary>
        /// An array of shipping options containers that have the details about cost, carrier, etc. of one shipping option.
        /// </summary>
        /// <value>An array of shipping options containers that have the details about cost, carrier, etc. of one shipping option.</value>
        [DataMember(Name = "shippingOptions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shippingOptions")]
        public ShippingOption[] ShippingOptions { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "shipToLocations", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shipToLocations")]
        public ShipToLocations ShipToLocations { get; set; }
        /// <summary>
        /// This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.).
        /// </summary>
        /// <value>This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.).</value>
        [DataMember(Name = "shortDescription", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shortDescription")]
        public string ShortDescription { get; set; }
        /// <summary>
        /// (Primary Item Aspect) The size of the item. For example, '7' for a size 7 shoe. All the item aspects, including this aspect, are returned in the localizedAspects container.
        /// </summary>
        /// <value>(Primary Item Aspect) The size of the item. For example, '7' for a size 7 shoe. All the item aspects, including this aspect, are returned in the localizedAspects container.</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "size")]
        public string Size { get; set; }
        /// <summary>
        /// (Primary Item Aspect) The sizing system of the country. All the item aspects, including this aspect, are returned in the localizedAspects container. Valid Values: &nbsp;&nbsp;US &nbsp;&nbsp;UK &nbsp;&nbsp;EU &nbsp;&nbsp;DE &nbsp;&nbsp;FR &nbsp;&nbsp;JP &nbsp;&nbsp;CN (China) &nbsp;&nbsp;IT &nbsp;&nbsp;BR &nbsp;&nbsp;MEX &nbsp;&nbsp;AU Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>(Primary Item Aspect) The sizing system of the country. All the item aspects, including this aspect, are returned in the localizedAspects container. Valid Values: &nbsp;&nbsp;US &nbsp;&nbsp;UK &nbsp;&nbsp;EU &nbsp;&nbsp;DE &nbsp;&nbsp;FR &nbsp;&nbsp;JP &nbsp;&nbsp;CN (China) &nbsp;&nbsp;IT &nbsp;&nbsp;BR &nbsp;&nbsp;MEX &nbsp;&nbsp;AU Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "sizeSystem", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sizeSystem")]
        public string SizeSystem { get; set; }
        /// <summary>
        /// (Primary Item Aspect) Text describing a size group in which the item would be included, such as regular, petite, plus, big-and-tall or maternity. All the item aspects, including this aspect, are returned in the localizedAspects container.
        /// </summary>
        /// <value>(Primary Item Aspect) Text describing a size group in which the item would be included, such as regular, petite, plus, big-and-tall or maternity. All the item aspects, including this aspect, are returned in the localizedAspects container.</value>
        [DataMember(Name = "sizeType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sizeType")]
        public string SizeType { get; set; }
        /// <summary>
        /// An additional shorten title for the item that is created by the seller.
        /// </summary>
        /// <value>An additional shorten title for the item that is created by the seller.</value>
        [DataMember(Name = "subtitle", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "subtitle")]
        public string Subtitle { get; set; }
        /// <summary>
        /// The container for the tax information for item.
        /// </summary>
        /// <value>The container for the tax information for item.</value>
        [DataMember(Name = "taxes", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "taxes")]
        public Taxes[] Taxes { get; set; }
        /// <summary>
        /// The seller-created title of the item. Maximum Length: 80 characters
        /// </summary>
        /// <value>The seller-created title of the item. Maximum Length: 80 characters</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }
        /// <summary>
        /// Indicates if the item a top-rated plus item. There are three benefits of a top-rated plus item; a minimum 30-day money-back return policy, shipping the items in 1 business day with tracking provided, and the added comfort of knowing this item is from experienced sellers with the highest buyer ratings. See the Top Rated Plus Items and Becoming a Top Rated Seller and qualifying for Top Rated Plus help topics for more information.
        /// </summary>
        /// <value>Indicates if the item a top-rated plus item. There are three benefits of a top-rated plus item; a minimum 30-day money-back return policy, shipping the items in 1 business day with tracking provided, and the added comfort of knowing this item is from experienced sellers with the highest buyer ratings. See the Top Rated Plus Items and Becoming a Top Rated Seller and qualifying for Top Rated Plus help topics for more information.</value>
        [DataMember(Name = "topRatedBuyingExperience", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "topRatedBuyingExperience")]
        public bool? TopRatedBuyingExperience { get; set; }
        /// <summary>
        /// This integer value indicates the number of different eBay users who have placed one or more bids on an auction item. This field is only applicable to auction items.
        /// </summary>
        /// <value>This integer value indicates the number of different eBay users who have placed one or more bids on an auction item. This field is only applicable to auction items.</value>
        [DataMember(Name = "uniqueBidderCount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "uniqueBidderCount")]
        public int? UniqueBidderCount { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "unitPrice", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "unitPrice")]
        public ConvertedAmount UnitPrice { get; set; }
        /// <summary>
        /// The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;
        /// </summary>
        /// <value>The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;</value>
        [DataMember(Name = "unitPricingMeasure", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "unitPricingMeasure")]
        public string UnitPricingMeasure { get; set; }
        /// <summary>
        /// An array of warning messages. These type of errors do not prevent the call from executing but should be checked.
        /// </summary>
        /// <value>An array of warning messages. These type of errors do not prevent the call from executing but should be checked.</value>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "warnings")]
        public Error[] Warnings { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AdditionalImages: ").Append(AdditionalImages).Append("\n");
            sb.Append("  AdultOnly: ").Append(AdultOnly).Append("\n");
            sb.Append("  AgeGroup: ").Append(AgeGroup).Append("\n");
            sb.Append("  BidCount: ").Append(BidCount).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  BuyingOptions: ").Append(BuyingOptions).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryPath: ").Append(CategoryPath).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  ConditionId: ").Append(ConditionId).Append("\n");
            sb.Append("  CurrentBidPrice: ").Append(CurrentBidPrice).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EnabledForGuestCheckout: ").Append(EnabledForGuestCheckout).Append("\n");
            sb.Append("  EnergyEfficiencyClass: ").Append(EnergyEfficiencyClass).Append("\n");
            sb.Append("  Epid: ").Append(Epid).Append("\n");
            sb.Append("  EstimatedAvailabilities: ").Append(EstimatedAvailabilities).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Gtin: ").Append(Gtin).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  ItemAffiliateWebUrl: ").Append(ItemAffiliateWebUrl).Append("\n");
            sb.Append("  ItemEndDate: ").Append(ItemEndDate).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ItemLocation: ").Append(ItemLocation).Append("\n");
            sb.Append("  ItemWebUrl: ").Append(ItemWebUrl).Append("\n");
            sb.Append("  LocalizedAspects: ").Append(LocalizedAspects).Append("\n");
            sb.Append("  MarketingPrice: ").Append(MarketingPrice).Append("\n");
            sb.Append("  Material: ").Append(Material).Append("\n");
            sb.Append("  Mpn: ").Append(Mpn).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  PriceDisplayCondition: ").Append(PriceDisplayCondition).Append("\n");
            sb.Append("  PrimaryItemGroup: ").Append(PrimaryItemGroup).Append("\n");
            sb.Append("  PrimaryProductReviewRating: ").Append(PrimaryProductReviewRating).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  ProductFicheWebUrl: ").Append(ProductFicheWebUrl).Append("\n");
            sb.Append("  QuantityLimitPerBuyer: ").Append(QuantityLimitPerBuyer).Append("\n");
            sb.Append("  ReturnTerms: ").Append(ReturnTerms).Append("\n");
            sb.Append("  Seller: ").Append(Seller).Append("\n");
            sb.Append("  SellerItemRevision: ").Append(SellerItemRevision).Append("\n");
            sb.Append("  ShippingOptions: ").Append(ShippingOptions).Append("\n");
            sb.Append("  ShipToLocations: ").Append(ShipToLocations).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  SizeSystem: ").Append(SizeSystem).Append("\n");
            sb.Append("  SizeType: ").Append(SizeType).Append("\n");
            sb.Append("  Subtitle: ").Append(Subtitle).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TopRatedBuyingExperience: ").Append(TopRatedBuyingExperience).Append("\n");
            sb.Append("  UniqueBidderCount: ").Append(UniqueBidderCount).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  UnitPricingMeasure: ").Append(UnitPricingMeasure).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the details of each item in an item group. An item group is  an item that has various aspect differences, such as color, size, storage capacity, etc. When an item group is created, one of the item variations, such as the red shirt size L, is chosen as the "parent". All the other items in the group are the children, such as the blue shirt size L, red shirt size M, etc. <br /><br /><span class="tablenote"><b> Note: </b> This container is returned only if the <b> item_id</b> in the request is an item group (parent ID of an item with variations).</span>
    /// </summary>
    [DataContract]
    public class ItemGroupSummary
    {
        /// <summary>
        /// An array of containers with the URLs for images that are in addition to the primary image of the item group. The primary image is returned in the itemGroupImage field.
        /// </summary>
        /// <value>An array of containers with the URLs for images that are in addition to the primary image of the item group. The primary image is returned in the itemGroupImage field.</value>
        [DataMember(Name = "itemGroupAdditionalImages", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemGroupAdditionalImages")]
        public Image[] ItemGroupAdditionalImages { get; set; }
        /// <summary>
        /// The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.
        /// </summary>
        /// <value>The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.</value>
        [DataMember(Name = "itemGroupHref", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemGroupHref")]
        public string ItemGroupHref { get; set; }
        /// <summary>
        /// The unique identifier for the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.
        /// </summary>
        /// <value>The unique identifier for the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.</value>
        [DataMember(Name = "itemGroupId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemGroupId")]
        public string ItemGroupId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "itemGroupImage", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemGroupImage")]
        public Image ItemGroupImage { get; set; }
        /// <summary>
        /// The title of the item that appears on the item group page. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.
        /// </summary>
        /// <value>The title of the item that appears on the item group page. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.</value>
        [DataMember(Name = "itemGroupTitle", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemGroupTitle")]
        public string ItemGroupTitle { get; set; }
        /// <summary>
        /// An enumeration value that indicates the type of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/ItemGroupTypeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>An enumeration value that indicates the type of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/ItemGroupTypeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "itemGroupType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemGroupType")]
        public string ItemGroupType { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ItemGroupAdditionalImages: ").Append(ItemGroupAdditionalImages).Append("\n");
            sb.Append("  ItemGroupHref: ").Append(ItemGroupHref).Append("\n");
            sb.Append("  ItemGroupId: ").Append(ItemGroupId).Append("\n");
            sb.Append("  ItemGroupImage: ").Append(ItemGroupImage).Append("\n");
            sb.Append("  ItemGroupTitle: ").Append(ItemGroupTitle).Append("\n");
            sb.Append("  ItemGroupType: ").Append(ItemGroupType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the seller's return policy.
    /// </summary>
    [DataContract]
    public class ItemReturnTerms
    {
        /// <summary>
        /// Indicates if the seller has enabled the Extended Holiday Returns feature on the item. Extended Holiday Returns are only applicable during the US holiday season, and gives buyers extra time to return an item. This 'extra time' will typically extend beyond what is set through the returnPeriod value.
        /// </summary>
        /// <value>Indicates if the seller has enabled the Extended Holiday Returns feature on the item. Extended Holiday Returns are only applicable during the US holiday season, and gives buyers extra time to return an item. This 'extra time' will typically extend beyond what is set through the returnPeriod value.</value>
        [DataMember(Name = "extendedHolidayReturnsOffered", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "extendedHolidayReturnsOffered")]
        public bool? ExtendedHolidayReturnsOffered { get; set; }
        /// <summary>
        /// An enumeration value that indicates how a buyer is refunded when an item is returned. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/RefundMethodEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>An enumeration value that indicates how a buyer is refunded when an item is returned. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/RefundMethodEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "refundMethod", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "refundMethod")]
        public string RefundMethod { get; set; }
        /// <summary>
        /// This string field indicates the restocking fee percentage that the seller has set on the item. Sellers have the option of setting no restocking fee for an item, or they can set the percentage to 10, 15, or 20 percent. So, if the cost of the item was $100, and the restocking percentage was 20 percent, the buyer would be charged $20 to return that item, so instead of receiving a $100 refund, they would receive $80 due to the restocking fee.
        /// </summary>
        /// <value>This string field indicates the restocking fee percentage that the seller has set on the item. Sellers have the option of setting no restocking fee for an item, or they can set the percentage to 10, 15, or 20 percent. So, if the cost of the item was $100, and the restocking percentage was 20 percent, the buyer would be charged $20 to return that item, so instead of receiving a $100 refund, they would receive $80 due to the restocking fee.</value>
        [DataMember(Name = "restockingFeePercentage", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "restockingFeePercentage")]
        public string RestockingFeePercentage { get; set; }
        /// <summary>
        /// Text written by the seller describing what the buyer needs to do in order to return the item.
        /// </summary>
        /// <value>Text written by the seller describing what the buyer needs to do in order to return the item.</value>
        [DataMember(Name = "returnInstructions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "returnInstructions")]
        public string ReturnInstructions { get; set; }
        /// <summary>
        /// An enumeration value that indicates the alternative methods for a full refund when an item is returned. This field is returned if the seller offers the buyer an item replacement or exchange instead of a monetary refund. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/ReturnMethodEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>An enumeration value that indicates the alternative methods for a full refund when an item is returned. This field is returned if the seller offers the buyer an item replacement or exchange instead of a monetary refund. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/ReturnMethodEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "returnMethod", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "returnMethod")]
        public string ReturnMethod { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "returnPeriod", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "returnPeriod")]
        public TimeDuration ReturnPeriod { get; set; }
        /// <summary>
        /// Indicates whether the seller accepts returns for the item.
        /// </summary>
        /// <value>Indicates whether the seller accepts returns for the item.</value>
        [DataMember(Name = "returnsAccepted", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "returnsAccepted")]
        public bool? ReturnsAccepted { get; set; }
        /// <summary>
        /// This enumeration value indicates whether the buyer or seller is responsible for return shipping costs when an item is returned. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/ReturnShippingCostPayerEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>This enumeration value indicates whether the buyer or seller is responsible for return shipping costs when an item is returned. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/ReturnShippingCostPayerEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "returnShippingCostPayer", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "returnShippingCostPayer")]
        public string ReturnShippingCostPayer { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ExtendedHolidayReturnsOffered: ").Append(ExtendedHolidayReturnsOffered).Append("\n");
            sb.Append("  RefundMethod: ").Append(RefundMethod).Append("\n");
            sb.Append("  RestockingFeePercentage: ").Append(RestockingFeePercentage).Append("\n");
            sb.Append("  ReturnInstructions: ").Append(ReturnInstructions).Append("\n");
            sb.Append("  ReturnMethod: ").Append(ReturnMethod).Append("\n");
            sb.Append("  ReturnPeriod: ").Append(ReturnPeriod).Append("\n");
            sb.Append("  ReturnsAccepted: ").Append(ReturnsAccepted).Append("\n");
            sb.Append("  ReturnShippingCostPayer: ").Append(ReturnShippingCostPayer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the item details.
    /// </summary>
    [DataContract]
    public class Items
    {
        /// <summary>
        /// An array of containers for a description and the item IDs of all the items that have this exact description. Often the item variations within an item group all have the same description. Instead of repeating this description in the item details of each item, an description that is shared by at one other item is returned in this container. If the description is unique, it is returned in the items.description field.
        /// </summary>
        /// <value>An array of containers for a description and the item IDs of all the items that have this exact description. Often the item variations within an item group all have the same description. Instead of repeating this description in the item details of each item, an description that is shared by at one other item is returned in this container. If the description is unique, it is returned in the items.description field.</value>
        [DataMember(Name = "commonDescriptions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "commonDescriptions")]
        public CommonDescriptions[] CommonDescriptions { get; set; }
        /// <summary>
        /// An array of containers for all the item variations details, excluding the description.
        /// </summary>
        /// <value>An array of containers for all the item variations details, excluding the description.</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "items")]
        public Item[] _Items { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  CommonDescriptions: ").Append(CommonDescriptions).Append("\n");
            sb.Append("  _Items: ").Append(_Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// Type that defines the fields for the seller's address.
    /// </summary>
    [DataContract]
    public class LegalAddress
    {
        /// <summary>
        /// The first line of the street address.
        /// </summary>
        /// <value>The first line of the street address.</value>
        [DataMember(Name = "addressLine1", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "addressLine1")]
        public string AddressLine1 { get; set; }
        /// <summary>
        /// The second line of the street address. This field is not always used, but can be used for 'Suite Number' or 'Apt Number'.
        /// </summary>
        /// <value>The second line of the street address. This field is not always used, but can be used for 'Suite Number' or 'Apt Number'.</value>
        [DataMember(Name = "addressLine2", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "addressLine2")]
        public string AddressLine2 { get; set; }
        /// <summary>
        /// The city of the address.
        /// </summary>
        /// <value>The city of the address.</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "city")]
        public string City { get; set; }
        /// <summary>
        /// The two-letter ISO 3166 standard of the country of the address. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/CountryCodeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The two-letter ISO 3166 standard of the country of the address. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/CountryCodeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }
        /// <summary>
        /// The name of the country of the address.
        /// </summary>
        /// <value>The name of the country of the address.</value>
        [DataMember(Name = "countryName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "countryName")]
        public string CountryName { get; set; }
        /// <summary>
        /// The name of the county of the address.
        /// </summary>
        /// <value>The name of the county of the address.</value>
        [DataMember(Name = "county", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "county")]
        public string County { get; set; }
        /// <summary>
        /// The postal code of the address.
        /// </summary>
        /// <value>The postal code of the address.</value>
        [DataMember(Name = "postalCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "postalCode")]
        public string PostalCode { get; set; }
        /// <summary>
        /// The state or province of the address.
        /// </summary>
        /// <value>The state or province of the address.</value>
        [DataMember(Name = "stateOrProvince", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "stateOrProvince")]
        public string StateOrProvince { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  County: ").Append(County).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  StateOrProvince: ").Append(StateOrProvince).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the product information of the item.
    /// </summary>
    [DataContract]
    public class Product
    {
        /// <summary>
        /// An array of containers with the URLs for the product images that are in addition to the primary image.
        /// </summary>
        /// <value>An array of containers with the URLs for the product images that are in addition to the primary image.</value>
        [DataMember(Name = "additionalImages", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "additionalImages")]
        public Image[] AdditionalImages { get; set; }
        /// <summary>
        /// An array of product identifiers associated with the item. This container is returned if the seller has associated the eBay Product Identifier (ePID) with the item and in the request fieldgroups is set to PRODUCT.
        /// </summary>
        /// <value>An array of product identifiers associated with the item. This container is returned if the seller has associated the eBay Product Identifier (ePID) with the item and in the request fieldgroups is set to PRODUCT.</value>
        [DataMember(Name = "additionalProductIdentities", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "additionalProductIdentities")]
        public AdditionalProductIdentity[] AdditionalProductIdentities { get; set; }
        /// <summary>
        /// An array of containers for the product aspects. Each group contains the aspect group name and the aspect name/value pairs.
        /// </summary>
        /// <value>An array of containers for the product aspects. Each group contains the aspect group name and the aspect name/value pairs.</value>
        [DataMember(Name = "aspectGroups", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectGroups")]
        public AspectGroup[] AspectGroups { get; set; }
        /// <summary>
        /// The brand associated with product. To identify the product, this is always used along with MPN (manufacturer part number).
        /// </summary>
        /// <value>The brand associated with product. To identify the product, this is always used along with MPN (manufacturer part number).</value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "brand")]
        public string Brand { get; set; }
        /// <summary>
        /// The rich description of an eBay product, which might contain HTML.
        /// </summary>
        /// <value>The rich description of an eBay product, which might contain HTML.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        /// <summary>
        /// An array of all the possible GTINs values associated with the product. A GTIN is a unique Global Trade Item number of the item as defined by http://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.
        /// </summary>
        /// <value>An array of all the possible GTINs values associated with the product. A GTIN is a unique Global Trade Item number of the item as defined by http://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.</value>
        [DataMember(Name = "gtins", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "gtins")]
        public string[] Gtins { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "image")]
        public Image Image { get; set; }
        /// <summary>
        /// An array of all possible MPN values associated with the product. A MPNs is manufacturer part number of the product. To identify the product, this is always used along with brand.
        /// </summary>
        /// <value>An array of all possible MPN values associated with the product. A MPNs is manufacturer part number of the product. To identify the product, this is always used along with brand.</value>
        [DataMember(Name = "mpns", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "mpns")]
        public string[] Mpns { get; set; }
        /// <summary>
        /// The title of the product.
        /// </summary>
        /// <value>The title of the product.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AdditionalImages: ").Append(AdditionalImages).Append("\n");
            sb.Append("  AdditionalProductIdentities: ").Append(AdditionalProductIdentities).Append("\n");
            sb.Append("  AspectGroups: ").Append(AspectGroups).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Gtins: ").Append(Gtins).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Mpns: ").Append(Mpns).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the product identifier type/value pairs of product associated with an item.
    /// </summary>
    [DataContract]
    public class ProductIdentity
    {
        /// <summary>
        /// The type of product identifier, such as UPC and EAN.
        /// </summary>
        /// <value>The type of product identifier, such as UPC and EAN.</value>
        [DataMember(Name = "identifierType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "identifierType")]
        public string IdentifierType { get; set; }
        /// <summary>
        /// The product identifier value.
        /// </summary>
        /// <value>The product identifier value.</value>
        [DataMember(Name = "identifierValue", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "identifierValue")]
        public string IdentifierValue { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  IdentifierType: ").Append(IdentifierType).Append("\n");
            sb.Append("  IdentifierValue: ").Append(IdentifierValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for product ratings. Only products that are in the eBay product catalog can be reviewed and rated.
    /// </summary>
    [DataContract]
    public class RatingHistogram
    {
        /// <summary>
        /// The total number of user ratings that the product has received.
        /// </summary>
        /// <value>The total number of user ratings that the product has received.</value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "count")]
        public int? Count { get; set; }
        /// <summary>
        /// This is the average rating for the product. As part of a product review, users rate the product. Products are rated from one star (terrible) to five stars (excellent), with each star having a corresponding point value - one star gets 1 point, two stars get 2 points, and so on. If a product had one four-star rating and one five-star rating, its average rating would be 4.5, and this is the value that would appear in this field.
        /// </summary>
        /// <value>This is the average rating for the product. As part of a product review, users rate the product. Products are rated from one star (terrible) to five stars (excellent), with each star having a corresponding point value - one star gets 1 point, two stars get 2 points, and so on. If a product had one four-star rating and one five-star rating, its average rating would be 4.5, and this is the value that would appear in this field.</value>
        [DataMember(Name = "rating", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "rating")]
        public string Rating { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines information for a region.
    /// </summary>
    [DataContract]
    public class Region
    {
        /// <summary>
        /// A free-form text string that indicates the name of the region. This value can be the name of a world region (such as the &quot;Middle East&quot; or &quot;Southeast Asia&quot;), a country, or a domestic region within a country (such as &quot;Alaska/Hawaii&quot; or &quot;US Protectorates&quot;) depending on the value of regionType. This value should be WORLDWIDE if the regionType value is WORLDWIDE.
        /// </summary>
        /// <value>A free-form text string that indicates the name of the region. This value can be the name of a world region (such as the &quot;Middle East&quot; or &quot;Southeast Asia&quot;), a country, or a domestic region within a country (such as &quot;Alaska/Hawaii&quot; or &quot;US Protectorates&quot;) depending on the value of regionType. This value should be WORLDWIDE if the regionType value is WORLDWIDE.</value>
        [DataMember(Name = "regionName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "regionName")]
        public string RegionName { get; set; }
        /// <summary>
        /// An enumeration value that indicates the type of global region. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/RegionTypeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>An enumeration value that indicates the type of global region. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/RegionTypeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "regionType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "regionType")]
        public string RegionType { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  RegionName: ").Append(RegionName).Append("\n");
            sb.Append("  RegionType: ").Append(RegionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the rating of a product review.
    /// </summary>
    [DataContract]
    public class ReviewRating
    {
        /// <summary>
        /// The average rating given to a product based on customer reviews.
        /// </summary>
        /// <value>The average rating given to a product based on customer reviews.</value>
        [DataMember(Name = "averageRating", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "averageRating")]
        public string AverageRating { get; set; }
        /// <summary>
        /// An array of containers for the product rating histograms that shows the review counts and the product rating.
        /// </summary>
        /// <value>An array of containers for the product rating histograms that shows the review counts and the product rating.</value>
        [DataMember(Name = "ratingHistograms", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "ratingHistograms")]
        public RatingHistogram[] RatingHistograms { get; set; }
        /// <summary>
        /// The total number of reviews for the item.
        /// </summary>
        /// <value>The total number of reviews for the item.</value>
        [DataMember(Name = "reviewCount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "reviewCount")]
        public int? ReviewCount { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AverageRating: ").Append(AverageRating).Append("\n");
            sb.Append("  RatingHistograms: ").Append(RatingHistograms).Append("\n");
            sb.Append("  ReviewCount: ").Append(ReviewCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for basic and detailed information about the seller of the item returned by the <b> item</b> resource.
    /// </summary>
    [DataContract]
    public class Seller_0
    {
        /// <summary>
        /// The percentage of the total positive feedback.
        /// </summary>
        /// <value>The percentage of the total positive feedback.</value>
        [DataMember(Name = "feedbackPercentage", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "feedbackPercentage")]
        public string FeedbackPercentage { get; set; }
        /// <summary>
        /// The feedback score of the seller. This value is based on the ratings from eBay members that bought items from this seller.
        /// </summary>
        /// <value>The feedback score of the seller. This value is based on the ratings from eBay members that bought items from this seller.</value>
        [DataMember(Name = "feedbackScore", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "feedbackScore")]
        public int? FeedbackScore { get; set; }
        /// <summary>
        /// Indicates if the seller is a business or an individual. This is determined when the seller registers with eBay. If they register for a business account, this value will be BUSINESS. If they register for a private account, this value will be INDIVIDUAL. This designation is required by the tax laws in some countries. This field is returned only on the following sites. EBAY-AT &nbsp;&nbsp;&nbsp;EBAY-BE &nbsp;&nbsp;&nbsp;EBAY-CH &nbsp;&nbsp;&nbsp;EBAY-DE &nbsp;&nbsp;&nbsp;EBAY-ES &nbsp;&nbsp;&nbsp;EBAY-FR &nbsp;&nbsp;&nbsp;EBAY-GB &nbsp;&nbsp;&nbsp;EBAY-IE &nbsp;&nbsp;&nbsp; EBAY-IT &nbsp;&nbsp;&nbsp;EBAY-PL Valid values: BUSINESS INDIVIDUALCode so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>Indicates if the seller is a business or an individual. This is determined when the seller registers with eBay. If they register for a business account, this value will be BUSINESS. If they register for a private account, this value will be INDIVIDUAL. This designation is required by the tax laws in some countries. This field is returned only on the following sites. EBAY-AT &nbsp;&nbsp;&nbsp;EBAY-BE &nbsp;&nbsp;&nbsp;EBAY-CH &nbsp;&nbsp;&nbsp;EBAY-DE &nbsp;&nbsp;&nbsp;EBAY-ES &nbsp;&nbsp;&nbsp;EBAY-FR &nbsp;&nbsp;&nbsp;EBAY-GB &nbsp;&nbsp;&nbsp;EBAY-IE &nbsp;&nbsp;&nbsp; EBAY-IT &nbsp;&nbsp;&nbsp;EBAY-PL Valid values: BUSINESS INDIVIDUALCode so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "sellerAccountType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sellerAccountType")]
        public string SellerAccountType { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "sellerLegalInfo", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sellerLegalInfo")]
        public SellerLegalInfo SellerLegalInfo { get; set; }
        /// <summary>
        /// The user name created by the seller for use on eBay.
        /// </summary>
        /// <value>The user name created by the seller for use on eBay.</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  FeedbackPercentage: ").Append(FeedbackPercentage).Append("\n");
            sb.Append("  FeedbackScore: ").Append(FeedbackScore).Append("\n");
            sb.Append("  SellerAccountType: ").Append(SellerAccountType).Append("\n");
            sb.Append("  SellerLegalInfo: ").Append(SellerLegalInfo).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the contact information for a seller.
    /// </summary>
    [DataContract]
    public class SellerLegalInfo
    {
        /// <summary>
        /// The seller's business email address.
        /// </summary>
        /// <value>The seller's business email address.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }
        /// <summary>
        /// The seller' business fax number.
        /// </summary>
        /// <value>The seller' business fax number.</value>
        [DataMember(Name = "fax", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fax")]
        public string Fax { get; set; }
        /// <summary>
        /// This is a free-form string created by the seller. This is information often found on business cards, such as address. This is information used by some countries.
        /// </summary>
        /// <value>This is a free-form string created by the seller. This is information often found on business cards, such as address. This is information used by some countries.</value>
        [DataMember(Name = "imprint", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "imprint")]
        public string Imprint { get; set; }
        /// <summary>
        /// The seller's first name.
        /// </summary>
        /// <value>The seller's first name.</value>
        [DataMember(Name = "legalContactFirstName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "legalContactFirstName")]
        public string LegalContactFirstName { get; set; }
        /// <summary>
        /// The seller's last name.
        /// </summary>
        /// <value>The seller's last name.</value>
        [DataMember(Name = "legalContactLastName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "legalContactLastName")]
        public string LegalContactLastName { get; set; }
        /// <summary>
        /// The name of the seller's business.
        /// </summary>
        /// <value>The name of the seller's business.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        /// <summary>
        /// The seller's business phone number.
        /// </summary>
        /// <value>The seller's business phone number.</value>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "phone")]
        public string Phone { get; set; }
        /// <summary>
        /// The seller's registration number. This is information used by some countries.
        /// </summary>
        /// <value>The seller's registration number. This is information used by some countries.</value>
        [DataMember(Name = "registrationNumber", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "registrationNumber")]
        public string RegistrationNumber { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "sellerProvidedLegalAddress", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sellerProvidedLegalAddress")]
        public LegalAddress SellerProvidedLegalAddress { get; set; }
        /// <summary>
        /// This is a free-form string created by the seller. This is the seller's terms or condition, which is in addition to the seller's return policies.
        /// </summary>
        /// <value>This is a free-form string created by the seller. This is the seller's terms or condition, which is in addition to the seller's return policies.</value>
        [DataMember(Name = "termsOfService", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "termsOfService")]
        public string TermsOfService { get; set; }
        /// <summary>
        /// An array of the seller's VAT (value added tax) IDs and the issuing country. VAT is a tax added by some European countries.
        /// </summary>
        /// <value>An array of the seller's VAT (value added tax) IDs and the issuing country. VAT is a tax added by some European countries.</value>
        [DataMember(Name = "vatDetails", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "vatDetails")]
        public VatDetail[] VatDetails { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  Imprint: ").Append(Imprint).Append("\n");
            sb.Append("  LegalContactFirstName: ").Append(LegalContactFirstName).Append("\n");
            sb.Append("  LegalContactLastName: ").Append(LegalContactLastName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  RegistrationNumber: ").Append(RegistrationNumber).Append("\n");
            sb.Append("  SellerProvidedLegalAddress: ").Append(SellerProvidedLegalAddress).Append("\n");
            sb.Append("  TermsOfService: ").Append(TermsOfService).Append("\n");
            sb.Append("  VatDetails: ").Append(VatDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the details of a shipping provider.
    /// </summary>
    [DataContract]
    public class ShippingOption
    {
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "additionalShippingCostPerUnit", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "additionalShippingCostPerUnit")]
        public ConvertedAmount AdditionalShippingCostPerUnit { get; set; }
        /// <summary>
        /// The deadline date that the item must be purchased by in order to be received by the buyer within the delivery window ( maxEstimatedDeliveryDate and minEstimatedDeliveryDate fields). This field is returned only for items that are eligible for 'Same Day Handling'. For these items, the value of this field is what is displayed in the Delivery line on the View Item page. This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer.
        /// </summary>
        /// <value>The deadline date that the item must be purchased by in order to be received by the buyer within the delivery window ( maxEstimatedDeliveryDate and minEstimatedDeliveryDate fields). This field is returned only for items that are eligible for 'Same Day Handling'. For these items, the value of this field is what is displayed in the Delivery line on the View Item page. This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer.</value>
        [DataMember(Name = "cutOffDateUsedForEstimate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "cutOffDateUsedForEstimate")]
        public string CutOffDateUsedForEstimate { get; set; }
        /// <summary>
        /// The end date of the delivery window (latest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the location of where the item is be shipped in the contextualLocation values of the X-EBAY-C-ENDUSERCTX request header.
        /// </summary>
        /// <value>The end date of the delivery window (latest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the location of where the item is be shipped in the contextualLocation values of the X-EBAY-C-ENDUSERCTX request header.</value>
        [DataMember(Name = "maxEstimatedDeliveryDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "maxEstimatedDeliveryDate")]
        public string MaxEstimatedDeliveryDate { get; set; }
        /// <summary>
        /// The start date of the delivery window (earliest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the location of where the item is be shipped in the contextualLocation values of the X-EBAY-C-ENDUSERCTX request header.
        /// </summary>
        /// <value>The start date of the delivery window (earliest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the location of where the item is be shipped in the contextualLocation values of the X-EBAY-C-ENDUSERCTX request header.</value>
        [DataMember(Name = "minEstimatedDeliveryDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "minEstimatedDeliveryDate")]
        public string MinEstimatedDeliveryDate { get; set; }
        /// <summary>
        /// The number of items used when calculating the estimation information.
        /// </summary>
        /// <value>The number of items used when calculating the estimation information.</value>
        [DataMember(Name = "quantityUsedForEstimate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "quantityUsedForEstimate")]
        public int? QuantityUsedForEstimate { get; set; }
        /// <summary>
        /// A name of the shipping provider, such as FedEx, or USPS.
        /// </summary>
        /// <value>A name of the shipping provider, such as FedEx, or USPS.</value>
        [DataMember(Name = "shippingCarrierCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shippingCarrierCode")]
        public string ShippingCarrierCode { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "shippingCost", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shippingCost")]
        public ConvertedAmount ShippingCost { get; set; }
        /// <summary>
        /// Indicates the class of the shipping cost. Valid Values: Flat or Calculated. Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>Indicates the class of the shipping cost. Valid Values: Flat or Calculated. Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "shippingCostType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shippingCostType")]
        public string ShippingCostType { get; set; }
        /// <summary>
        /// The type of shipping service. For example, USPS First Class.
        /// </summary>
        /// <value>The type of shipping service. For example, USPS First Class.</value>
        [DataMember(Name = "shippingServiceCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shippingServiceCode")]
        public string ShippingServiceCode { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "shipToLocationUsedForEstimate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shipToLocationUsedForEstimate")]
        public ShipToLocation ShipToLocationUsedForEstimate { get; set; }
        /// <summary>
        /// Any trademark symbol, such as &trade; or &reg;, that needs to be shown in superscript next to the shipping service name.
        /// </summary>
        /// <value>Any trademark symbol, such as &trade; or &reg;, that needs to be shown in superscript next to the shipping service name.</value>
        [DataMember(Name = "trademarkSymbol", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "trademarkSymbol")]
        public string TrademarkSymbol { get; set; }
        /// <summary>
        /// The type of a shipping option, such as EXPEDITED, ONE_DAY, STANDARD, ECONOMY, PICKUP, etc.
        /// </summary>
        /// <value>The type of a shipping option, such as EXPEDITED, ONE_DAY, STANDARD, ECONOMY, PICKUP, etc.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AdditionalShippingCostPerUnit: ").Append(AdditionalShippingCostPerUnit).Append("\n");
            sb.Append("  CutOffDateUsedForEstimate: ").Append(CutOffDateUsedForEstimate).Append("\n");
            sb.Append("  MaxEstimatedDeliveryDate: ").Append(MaxEstimatedDeliveryDate).Append("\n");
            sb.Append("  MinEstimatedDeliveryDate: ").Append(MinEstimatedDeliveryDate).Append("\n");
            sb.Append("  QuantityUsedForEstimate: ").Append(QuantityUsedForEstimate).Append("\n");
            sb.Append("  ShippingCarrierCode: ").Append(ShippingCarrierCode).Append("\n");
            sb.Append("  ShippingCost: ").Append(ShippingCost).Append("\n");
            sb.Append("  ShippingCostType: ").Append(ShippingCostType).Append("\n");
            sb.Append("  ShippingServiceCode: ").Append(ShippingServiceCode).Append("\n");
            sb.Append("  ShipToLocationUsedForEstimate: ").Append(ShipToLocationUsedForEstimate).Append("\n");
            sb.Append("  TrademarkSymbol: ").Append(TrademarkSymbol).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the country and postal code of where an item is to be shipped.
    /// </summary>
    [DataContract]
    public class ShipToLocation
    {
        /// <summary>
        /// The two-letter ISO 3166 standard of the country for where the item is to be shipped. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/CountryCodeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The two-letter ISO 3166 standard of the country for where the item is to be shipped. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/CountryCodeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }
        /// <summary>
        /// The zip code (postal code) for where the item is to be shipped.
        /// </summary>
        /// <value>The zip code (postal code) for where the item is to be shipped.</value>
        [DataMember(Name = "postalCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "postalCode")]
        public string PostalCode { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields that include and exclude geographic regions affecting where the item can be shipped. The seller defines these regions when listing the item.
    /// </summary>
    [DataContract]
    public class ShipToLocations
    {
        /// <summary>
        /// A array of containers for regions that are specifically excluded from a region set. You can use this to exclude a specific regionName from a regionType that you specifically include.
        /// </summary>
        /// <value>A array of containers for regions that are specifically excluded from a region set. You can use this to exclude a specific regionName from a regionType that you specifically include.</value>
        [DataMember(Name = "regionExcluded", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "regionExcluded")]
        public Region[] RegionExcluded { get; set; }
        /// <summary>
        /// A array of containers for regions that are specifically included in a region set. You can use this to exclude a specific regionName from a regionType that you specifically include.
        /// </summary>
        /// <value>A array of containers for regions that are specifically included in a region set. You can use this to exclude a specific regionName from a regionType that you specifically include.</value>
        [DataMember(Name = "regionIncluded", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "regionIncluded")]
        public Region[] RegionIncluded { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  RegionExcluded: ").Append(RegionExcluded).Append("\n");
            sb.Append("  RegionIncluded: ").Append(RegionIncluded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the tax fields.
    /// </summary>
    [DataContract]
    public class Taxes
    {
        /// <summary>
        /// Indicates if tax was applied for the cost of the item.
        /// </summary>
        /// <value>Indicates if tax was applied for the cost of the item.</value>
        [DataMember(Name = "includedInPrice", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "includedInPrice")]
        public bool? IncludedInPrice { get; set; }
        /// <summary>
        /// Indicates if tax is applied for the shipping cost.
        /// </summary>
        /// <value>Indicates if tax is applied for the shipping cost.</value>
        [DataMember(Name = "shippingAndHandlingTaxed", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shippingAndHandlingTaxed")]
        public bool? ShippingAndHandlingTaxed { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "taxJurisdiction", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "taxJurisdiction")]
        public TaxJurisdiction TaxJurisdiction { get; set; }
        /// <summary>
        /// The percentage of tax.
        /// </summary>
        /// <value>The percentage of tax.</value>
        [DataMember(Name = "taxPercentage", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "taxPercentage")]
        public string TaxPercentage { get; set; }
        /// <summary>
        /// Container that returns the tax type. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/TaxType.html'>eBay API documentation</a>
        /// </summary>
        /// <value>Container that returns the tax type. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/TaxType.html'>eBay API documentation</a></value>
        [DataMember(Name = "taxType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "taxType")]
        public string TaxType { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  IncludedInPrice: ").Append(IncludedInPrice).Append("\n");
            sb.Append("  ShippingAndHandlingTaxed: ").Append(ShippingAndHandlingTaxed).Append("\n");
            sb.Append("  TaxJurisdiction: ").Append(TaxJurisdiction).Append("\n");
            sb.Append("  TaxPercentage: ").Append(TaxPercentage).Append("\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the tax jurisdiction details.
    /// </summary>
    [DataContract]
    public class TaxJurisdiction
    {
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "region")]
        public Region Region { get; set; }
        /// <summary>
        /// The identifier of the tax jurisdiction.
        /// </summary>
        /// <value>The identifier of the tax jurisdiction.</value>
        [DataMember(Name = "taxJurisdictionId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "taxJurisdictionId")]
        public string TaxJurisdictionId { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  TaxJurisdictionId: ").Append(TaxJurisdictionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the name/value pairs for item aspects.
    /// </summary>
    [DataContract]
    public class TypedNameValue
    {
        /// <summary>
        /// The text representing the name of the aspect for the name/value pair, such as Color.
        /// </summary>
        /// <value>The text representing the name of the aspect for the name/value pair, such as Color.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        /// <summary>
        /// Indicates if the value being returned is a string or an array of values. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/ValueTypeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>Indicates if the value being returned is a string or an array of values. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/ValueTypeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }
        /// <summary>
        /// The value of the aspect for the name/value pair, such as Red.
        /// </summary>
        /// <value>The value of the aspect for the name/value pair, such as Red.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type the defines the fields for the VAT (value add tax) information.
    /// </summary>
    [DataContract]
    public class VatDetail
    {
        /// <summary>
        /// The two-letter ISO 3166 standard of the country issuing the seller's VAT (value added tax) ID. VAT is a tax added by some European countries. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/CountryCodeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The two-letter ISO 3166 standard of the country issuing the seller's VAT (value added tax) ID. VAT is a tax added by some European countries. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/browse/types/CountryCodeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "issuingCountry", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "issuingCountry")]
        public string IssuingCountry { get; set; }
        /// <summary>
        /// The seller's VAT (value added tax) ID. VAT is a tax added by some European countries.
        /// </summary>
        /// <value>The seller's VAT (value added tax) ID. VAT is a tax added by some European countries.</value>
        [DataMember(Name = "vatId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "vatId")]
        public string VatId { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  IssuingCountry: ").Append(IssuingCountry).Append("\n");
            sb.Append("  VatId: ").Append(VatId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
}
namespace eBayApi.Buy.Feed
{
    public class FeedClient : Api.Client.ApiBase
    {
        public FeedClient(Api.Client.ApiClient apiClient = null) : base(apiClient) { }
        public FeedClient(string basePath) : base(basePath) { }
        /// <summary>
        ///  The Description feed file is generated each day for every top-level (L1) category. This call lets you download a daily TSV_GZIP (tab separated value gzip) Description feed file containing the description of the items the Item feed file for a specific day and category including all its child categories. To store all the item details provided by the Feed API, you would use the getItemFeed and getItemDescriptionFeed calls with the same parameters. For example: &nbsp;&nbsp;&nbsp; /item?feed_scope=NEWLY_LISTED&amp;category_id=625&amp;date=20170918 &nbsp;&nbsp;&nbsp; /item_description?feed_scope=NEWLY_LISTED&amp;category_id=625&amp;date=20170918 Combining the Description and Item feed files The Description feed file contains only the itemId, itemGroupId and description columns. The value of the description column is BASE64 encoded for security reasons. For each row, there will be values in either itemId or itemGroupId. The description column will always contain a value. itemGroupId - The value in this column is the ID of an item group (an item with variations, such as size and color) where the items in the group share the same description. Even though the itemGroupId represents more than one item, the itemGroupId and description are returned only once for the entire group. In this case, there will be values in the itemGroupId and description columns. You match the value of itemGroupId from the Description feed file with the value of primaryItemGroupId from the Item feed file for the same day and category. itemId - The value in this column is the ID of an item that is not part of an item group or (in rare cases) the item is part of an item group but does not share a description with other items in the group. In this case, there will be values in the itemId and description columns. You match the value of itemId from the Description feed file with the value of itemId from the Item feed file for the same day and category. The file will contain the descriptions for all the items or item groups from all the child categories of the category. The first line of the file is the header, which labels the columns and indicates the order of the values on each line. Each column is described in the Response fields section. URLs for this call Production URL: https://api.ebay.com/buy/feed/v1_beta/ Sandbox URL: https://api.sandbox.ebay.com/buy/feed/v1_beta/ Downloading feed files Description feed files are very large so the gzip file, which is binary, is streamed in chunks. You specify the size of the chunks in bytes using the Range request header. The Content-range response header indicates where in the full resource this partial chunk of data belongs and the total number of bytes in the file. For more information about using these headers, see Retrieving a gzip feed file. Important: The response is always a TSV_GZIP file. But for documentation purposes, the response is shown as JSON fields so that the value returned in each column can be explained. The order of the response fields, shows you the order of the columns in the feed file. Restrictions For a list of supported sites and other restrictions, see API Restrictions.
        /// </summary>
        /// <param name="xEBAYCMARKETPLACEID">The ID for the eBay marketplace where the items are hosted. For example: &nbsp;&nbsp;X-EBAY-C-MARKETPLACE-ID = EBAY-US For a list of supported sites see, API Restrictions.</param> 
        /// <param name="range">This header specifies the range in bytes of the chunks of the gzip file being returned. Format: bytes=startpos-endpos For example, the following retrieves the first 10 MBs of the feed file. &nbsp;&nbsp;Range bytes=0-10485760 For more information about using this headers, see Retrieving a gzip feed file. Maximum: 100 MB</param> 
        /// <param name="feedScope">Specifies the type of file to return. Valid Values: NEWLY_LISTED - Returns the file containing all items that were listed on the day specified by the date parameter in the category specified by the category_id parameter. The items will be Good 'Til Cancelled and non-Good 'Til Cancelled items. If the item is a non-Good 'Til Cancelled item, the item's end date will be returned in the itemEndDate column. /item_description?feed_scope=NEWLY_LISTED&amp;category_id=15032&amp;date=20170925 ALL_ACTIVE (bootstrap) - Returns the file containing all the 'Good 'Til Cancelled' items in the category specified by the category_id parameter. /item_description?feed_scope=ALL_ACTIVE&amp;category_id=15032&amp;date=20170925 Note: This file type is generated only on request. After the file is generated, you use this method and feed_scope to download the file.</param> 
        /// <param name="categoryId">An eBay top-level category ID of the items to be returned in the feed file. The list of eBay category IDs changes over time and category IDs are not the same across all the eBay marketplaces. To get a list of the top-level categories for a marketplace, you can use the Taxonomy API getCategoryTree call. This call retrieves the complete category tree for the marketplace. The top-level categories are identified by the categoryTreeNodeLevel field. For example: &nbsp;&nbsp;&quot;categoryTreeNodeLevel&quot;: 1 For details see Get Categories for Buy APIs. Restriction: Must be a top-level category</param> 
        /// <param name="date">The date of the feed file you want. The Description feed files are generated every day and there are always 7 daily feed files available. There is a 48 hour latency when generating the files, however it can take up to 72 hours for some of the larger files. This means on July 10, the latest feed file you can download is July 8. In other words, if you wanted the file generated on July 10th, you would need to wait until July 12th. Note: The generated files are stored using MST (US Mountain Standard Time), which is -7 hours UTC time. Format: yyyyMMdd Requirement: Must be within 3-10 days in the past</param> 
        /// <returns>Models.ItemDescriptionResponse</returns>
        public Models.ItemDescriptionResponse GetItemDescriptionFeed(string range, string xEBAYCMARKETPLACEID, string categoryId, string date, string feedScope)
        {
            // verify the required parameter 'xEBAYCMARKETPLACEID' is set
            if (xEBAYCMARKETPLACEID == null) throw new Api.Client.ApiException(400, "Missing required parameter 'xEBAYCMARKETPLACEID' when calling GetItemDescriptionFeed");
            // verify the required parameter 'range' is set
            if (range == null) throw new Api.Client.ApiException(400, "Missing required parameter 'range' when calling GetItemDescriptionFeed");
            // verify the required parameter 'feedScope' is set
            if (feedScope == null) throw new Api.Client.ApiException(400, "Missing required parameter 'feedScope' when calling GetItemDescriptionFeed");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'categoryId' when calling GetItemDescriptionFeed");
            // verify the required parameter 'date' is set
            if (date == null) throw new Api.Client.ApiException(400, "Missing required parameter 'date' when calling GetItemDescriptionFeed");

            var path = "/item_description";
            path = path.Replace("{format}", "json");


            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (feedScope != null) queryParams.Add("feed_scope", ApiClient.ParameterToString(feedScope)); // query parameter
            if (categoryId != null) queryParams.Add("category_id", ApiClient.ParameterToString(categoryId)); // query parameter
            if (date != null) queryParams.Add("date", ApiClient.ParameterToString(date)); // query parameter
            if (xEBAYCMARKETPLACEID != null) headerParams.Add("X-EBAY-C-MARKETPLACE-ID", ApiClient.ParameterToString(xEBAYCMARKETPLACEID)); // header parameter
            if (range != null) headerParams.Add("Range", ApiClient.ParameterToString(range)); // header parameter



            // authentication setting, if any
            var authSettings = new String[] { "Client Credentials" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetItemDescriptionFeed: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetItemDescriptionFeed: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.ItemDescriptionResponse)ApiClient.Deserialize(response.Content, typeof(Models.ItemDescriptionResponse), response.Headers);
        }
        /// <summary>
        ///  The Item feed file is generated each day. This call lets you download a daily TSV_GZIP (tab separated value gzip) Item feed file of all the items that were listed on a specific day in a specific category. For each item, the primary item details are returned, except for the item description. The description of each item is excluded because these can be huge and items in an item group (an item with variations, such as size and color) can share the same description. The item descriptions are returned in a separate Descriptions gzip feed file by the getItemDescriptionFeed call. To store all the item details provided by the Feed API, you would use the getItemFeed and getItemDescriptionFeed calls with the same parameters. For example: &nbsp;&nbsp;&nbsp; /item?feed_scope=NEWLY_LISTED&amp;category_id=625&amp;date=20170918 &nbsp;&nbsp;&nbsp; /item_description?feed_scope=NEWLY_LISTED&amp;category_id=625&amp;date=20170918 Items returned in the feed file All items in the file are: In new condition Fixed price (Buy It Now); no auctions From eBay trusted sellers Note: When curating the items returned, be sure to code as if these filters are not applied as they can be changed or removed in the future. The feed file contains all the items from all the child categories of the specified category. The first line of the file is the header, which labels the columns and indicates the order of the values on each line. Each header is described in the Response fields section. URLs for this call Production URL: https://api.ebay.com/buy/feed/v1_beta/ Sandbox URL: https://api.sandbox.ebay.com/buy/feed/v1_beta/ Downloading feed files Item feed files are binary gzip files. If the file is larger than 100 MB, the download must be streamed in chunks. You specify the size of the chunks in bytes using the Range request header. The Content-range response header indicates where in the full resource this partial chunk of data belongs and the total number of bytes in the file. For more information about using these headers, see Retrieving a gzip feed file. Important: The response is always a TSV_GZIP file. But for documentation purposes, the response is shown as JSON fields so that the value returned in each column can be explained. The order of the response fields, shows you the order of the columns in the feed file. Restrictions For a list of supported sites and other restrictions, see API Restrictions.
        /// </summary>
        /// <param name="xEBAYCMARKETPLACEID">The ID for the eBay marketplace where the items are hosted. For example: &nbsp;&nbsp;X-EBAY-C-MARKETPLACE-ID = EBAY-US For a list of supported sites see, API Restrictions.</param> 
        /// <param name="range">This header specifies the range in bytes of the chunks of the gzip file being returned. Format: bytes=startpos-endpos For example, the following retrieves the first 10 MBs of the feed file. &nbsp;&nbsp;Range bytes=0-10485760 For more information about using this headers, see Retrieving a gzip feed file. Maximum: 100 MB</param> 
        /// <param name="feedScope">Specifies the type of file to return. Valid Values: NEWLY_LISTED - Returns the file containing all items that were listed on the day specified by the date parameter in the category specified by the category_id parameter. The items will be Good 'Til Cancelled and non-Good 'Til Cancelled items. If the item is a non-Good 'Til Cancelled item, the item's end date will be returned in the itemEndDate column. /item?feed_scope=NEWLY_LISTED&amp;category_id=15032&amp;date=20170925 ALL_ACTIVE (bootstrap) - Returns the file containing all the 'Good 'Til Cancelled' items in the category specified by the category_id parameter. /item?feed_scope=ALL_ACTIVE&amp;category_id=15032&amp;date=20170925 Note: This file type is generated only on request. After the file is generated, you use this method and feed_scope to download the file.</param> 
        /// <param name="categoryId">An eBay top-level category ID of the items to be returned in the feed file. The list of eBay category IDs changes over time and category IDs are not the same across all the eBay marketplaces. To get a list of the top-level categories for a marketplaces, you can use the Taxonomy API getCategoryTree call. This call retrieves the complete category tree for the marketplace. The top-level categories are identified by the categoryTreeNodeLevel field. For example: &nbsp;&nbsp;&quot;categoryTreeNodeLevel&quot;: 1 For details see Get Categories for Buy APIs. Restriction: Must be a top-level category</param> 
        /// <param name="date">The date of the feed file you want. The Item feed files are generated every day and there are always 7 daily feed files available. Important: The daily generated files are available each day after 9AM MST (US Mountain Standard Time), which is -7 hours UTC time. There is a 48 hour latency when generating the files, however it can take up to 72 hours for some of the larger files. This means you can download the file for July 10th on July 12 after 9AM MST. Format: yyyyMMdd Requirement: Must be within 3-10 days in the past</param> 
        /// <returns>Models.ItemResponse</returns>
        public Models.ItemResponse GetItemFeed(string range, string xEBAYCMARKETPLACEID, string categoryId, string date, string feedScope)
        {
            // verify the required parameter 'xEBAYCMARKETPLACEID' is set
            if (xEBAYCMARKETPLACEID == null) throw new Api.Client.ApiException(400, "Missing required parameter 'xEBAYCMARKETPLACEID' when calling GetItemFeed");
            // verify the required parameter 'range' is set
            if (range == null) throw new Api.Client.ApiException(400, "Missing required parameter 'range' when calling GetItemFeed");
            // verify the required parameter 'feedScope' is set
            if (feedScope == null) throw new Api.Client.ApiException(400, "Missing required parameter 'feedScope' when calling GetItemFeed");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'categoryId' when calling GetItemFeed");
            // verify the required parameter 'date' is set
            if (date == null) throw new Api.Client.ApiException(400, "Missing required parameter 'date' when calling GetItemFeed");

            var path = "/item";
            path = path.Replace("{format}", "json");


            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (feedScope != null) queryParams.Add("feed_scope", ApiClient.ParameterToString(feedScope)); // query parameter
            if (categoryId != null) queryParams.Add("category_id", ApiClient.ParameterToString(categoryId)); // query parameter
            if (date != null) queryParams.Add("date", ApiClient.ParameterToString(date)); // query parameter
            if (xEBAYCMARKETPLACEID != null) headerParams.Add("X-EBAY-C-MARKETPLACE-ID", ApiClient.ParameterToString(xEBAYCMARKETPLACEID)); // header parameter
            if (range != null) headerParams.Add("Range", ApiClient.ParameterToString(range)); // header parameter



            // authentication setting, if any
            var authSettings = new String[] { "Client Credentials" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetItemFeed: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetItemFeed: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.ItemResponse)ApiClient.Deserialize(response.Content, typeof(Models.ItemResponse), response.Headers);
        }
        /// <summary>
        ///  Each day an Item feed file is generated for every top-level (L1) category. This file contains all the newly listed items for that day that are in the category including all its child categories. The service reads this Item feed file and if an item in the feed file has a primaryItemGroupId value, which indicates the item is part of an item group, the service uses that value to return the item group (parent item) information for that item in the Item Group feed file for that day and category. This information includes a list of the aspect (variation) names for this item group. For example, if the item was a shirt some of the variation names could be Size, Color, etc., which are returned in the variesByLocalizedAspects column. (An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.) This call lets you download the Item Group TSV_GZIP (tab separated value gzip) feed file containing the Item Group information for items in the Item feed file that were associated with an item group. The first line of the file is the header, which labels the columns and indicates the order of the values on each line. Each header is described in the Response fields section. Combining the Item Group and Item feed files The Item Group feed file contains details about the item group (parent item), including the item group ID itemGroupId. You match the value of itemGroupId from the Item Group feed file with the value of primaryItemGroupId from the Item feed file for the same day and category. Downloading feed files URLs for this call Production URL: https://api.ebay.com/buy/feed/v1_beta/ Sandbox URL: https://api.sandbox.ebay.com/buy/feed/v1_beta/ Item Group feed files are binary gzip files. If the file is larger than 100 MB, the download must be streamed in chunks. You specify the size of the chunks in bytes using the Range request header. The content-range response header indicates where in the full resource this partial chunk of data belongs and the total number of bytes in the file. For more information about using these headers, see Retrieving a gzip feed file. Important: The response is always only a TSV_GZIP file. But for documentation purposes, the response is shown as JSON fields so that the value returned in each column can be explained. The order of the response fields, shows you the order of the columns in the feed file. Restrictions For a list of supported sites and other restrictions, see API Restrictions.
        /// </summary>
        /// <param name="xEBAYCMARKETPLACEID">The ID for the eBay marketplace where the items are hosted. For example: &nbsp;&nbsp;X-EBAY-C-MARKETPLACE-ID = EBAY-US For a list of supported sites see, API Restrictions.</param> 
        /// <param name="range">This header specifies the range in bytes of the chunks of the gzip file being returned. Format: bytes=startpos-endpos For example, the following retrieves the first 10 MBs of the feed file. &nbsp;&nbsp;Range bytes=0-10485760 For more information about using this headers, see Retrieving a gzip feed file. Maximum: 100 MB</param> 
        /// <param name="feedScope">Specifies the type of file to return. Valid Values: NEWLY_LISTED - Returns the file containing the item group information for items in the NEWLY_LISTED Item feed file that were associated with an item group. The items in this type of Item feed file are items that were listed on the day specified by the date parameter in the category specified by the category_id parameter. The items will be Good 'Til Cancelled and non-Good 'Til Cancelled items. If the item is a non-Good 'Til Cancelled item, the item's end date will be returned in the itemEndDate column. /item_group?feed_scope=NEWLY_LISTED&amp;category_id=15032&amp;date=20170925 ALL_ACTIVE (bootstrap) - Returns the file containing the item group information for items in the ALL_ACTIVE Item feed file that were associated with an item group. The items in this type of Item feed file are all the 'Good 'Til Cancelled' items in the category specified by the category_id parameter. /item_group?feed_scope=ALL_ACTIVE&amp;category_id=15032&amp;date=20170925 Note: This file type is generated only on request. After the file is generated, you use this method and feed_scope to download the file.</param> 
        /// <param name="categoryId">An eBay top-level category ID of the items to be returned in the feed file. The list of eBay category IDs changes over time and category IDs are not the same across all the eBay marketplaces. To get a list of the top-level categories for a marketplaces, you can use the Taxonomy API getCategoryTree call. This call retrieves the complete category tree for the marketplace. The top-level categories are identified by the categoryTreeNodeLevel field. For example: &nbsp;&nbsp;&quot;categoryTreeNodeLevel&quot;: 1 For details see Get Categories for Buy APIs. Restriction: Must be a top-level category</param> 
        /// <param name="date">The date of the feed file you want. The Item Group feed files are generated every day and there are always 7 daily feed files available. There is a 48 hour latency when generating the files. This means on July 10, the latest feed file you can download is July 8. In other words, if you wanted the file generated on July 10th, you would need to wait until July 12th. Note: The generated files are stored using MST (US Mountain Standard Time), which is -7 hours UTC time. Format: yyyyMMdd Requirement: Must be within 3-10 days in the past</param> 
        /// <returns>Models.ItemGroupResponse</returns>
        public Models.ItemGroupResponse GetItemGroupFeed(string xEBAYCMARKETPLACEID, string categoryId, string date, string feedScope, string range = null)
        {
            // verify the required parameter 'xEBAYCMARKETPLACEID' is set
            if (xEBAYCMARKETPLACEID == null) throw new Api.Client.ApiException(400, "Missing required parameter 'xEBAYCMARKETPLACEID' when calling GetItemGroupFeed");
            // verify the required parameter 'feedScope' is set
            if (feedScope == null) throw new Api.Client.ApiException(400, "Missing required parameter 'feedScope' when calling GetItemGroupFeed");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'categoryId' when calling GetItemGroupFeed");
            // verify the required parameter 'date' is set
            if (date == null) throw new Api.Client.ApiException(400, "Missing required parameter 'date' when calling GetItemGroupFeed");

            var path = "/item_group";
            path = path.Replace("{format}", "json");


            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (feedScope != null) queryParams.Add("feed_scope", ApiClient.ParameterToString(feedScope)); // query parameter
            if (categoryId != null) queryParams.Add("category_id", ApiClient.ParameterToString(categoryId)); // query parameter
            if (date != null) queryParams.Add("date", ApiClient.ParameterToString(date)); // query parameter
            if (xEBAYCMARKETPLACEID != null) headerParams.Add("X-EBAY-C-MARKETPLACE-ID", ApiClient.ParameterToString(xEBAYCMARKETPLACEID)); // header parameter
            if (range != null) headerParams.Add("Range", ApiClient.ParameterToString(range)); // header parameter



            // authentication setting, if any
            var authSettings = new String[] { "Client Credentials" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetItemGroupFeed: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetItemGroupFeed: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.ItemGroupResponse)ApiClient.Deserialize(response.Content, typeof(Models.ItemGroupResponse), response.Headers);
        }
        /// <summary>
        ///  The Hourly Snapshot feed file is generated each hour every day for all categories. This call lets you download an Hourly Snapshot TSV_GZIP (tab separated value gzip) feed file containing the details of all the items that have changed within the specified day and hour for a specific category. This means to generate the 8AM file of items that have changed from 8AM and 8:59AM, the service starts at 9AM. You can retrieve the 8AM snapshot file at 10AM. You can use the response from this call to update the item details of items stored in your database. By comparing the value of itemSnapshotDate for the same item you will be able to tell which information is the latest. Note: Currently, hourly updates for descriptions are not supported. URLs for this call Production URL: https://api.ebay.com/buy/feed/v1_beta/ Sandbox URL: https://api.sandbox.ebay.com/buy/feed/v1_beta/ Downloading feed files Hourly snapshot feed files are binary gzip files. If the file is larger than 100 MB, the download must be streamed in chunks. You specify the size of the chunks in bytes using the Range request header. The Content-range response header indicates where in the full resource this partial chunk of data belongs and the total number of bytes in the file. For more information about using these headers, see Retrieving a gzip feed file. Important: The response is always a TSV_GZIP file. But for documentation purposes, the response is shown as JSON fields so that the value returned in each column can be explained. The order of the response fields, shows you the order of the columns in the feed file. Restrictions For a list of supported sites and other restrictions, see API Restrictions.
        /// </summary>
        /// <param name="xEBAYCMARKETPLACEID">The ID for the eBay marketplace where the items are hosted. For example: &nbsp;&nbsp;X-EBAY-C-MARKETPLACE-ID = EBAY-US For a list of supported sites see, API Restrictions.</param> 
        /// <param name="range">This header specifies the range in bytes of the chunks of the gzip file being returned. Format: bytes=startpos-endpos For example, the following retrieves the first 10 MBs of the feed file. &nbsp;&nbsp;Range bytes=0-10485760 For more information about using this headers, see Retrieving a gzip feed file. Maximum: 100 MB</param> 
        /// <param name="categoryId">An eBay top-level category ID of the items to be returned in the feed file. The list of eBay category IDs changes over time and category IDs are not the same across all the eBay marketplaces. To get a list of the top-level categories for a marketplace, you can use the Taxonomy API getCategoryTree call. This call retrieves the complete category tree for the marketplace. The top-level categories are identified by the categoryTreeNodeLevel field. For example: &nbsp;&nbsp;&quot;categoryTreeNodeLevel&quot;: 1 For details see Get Categories for Buy APIs. Restriction: Must be a top-level category</param> 
        /// <param name="snapshotDate">The hour of the incremental feed file you want, for a particular day. There are always 7 days of Hourly Snapshot feed files available. If you specify that you want the 9AM file for July 15, 2017 (2017-07-15T09:00:00.000Z), the data in the feed file will be items that changed after 9AM on July 15, 2017. Restrictions: Files are generated on the hour, so minutes and seconds are always zeros. &nbsp;&nbsp;&nbsp;(2017-07-12T09:00:00.000Z) Format: UTC format (yyyy-MM-ddThh:00:00.000Z)</param> 
        /// <returns>Models.ItemSnapshotResponse</returns>
        public Models.ItemSnapshotResponse GetItemSnapshotFeed(string range, string xEBAYCMARKETPLACEID, string categoryId, string snapshotDate)
        {
            // verify the required parameter 'xEBAYCMARKETPLACEID' is set
            if (xEBAYCMARKETPLACEID == null) throw new Api.Client.ApiException(400, "Missing required parameter 'xEBAYCMARKETPLACEID' when calling GetItemSnapshotFeed");
            // verify the required parameter 'range' is set
            if (range == null) throw new Api.Client.ApiException(400, "Missing required parameter 'range' when calling GetItemSnapshotFeed");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'categoryId' when calling GetItemSnapshotFeed");
            // verify the required parameter 'snapshotDate' is set
            if (snapshotDate == null) throw new Api.Client.ApiException(400, "Missing required parameter 'snapshotDate' when calling GetItemSnapshotFeed");

            var path = "/item_snapshot";
            path = path.Replace("{format}", "json");


            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (categoryId != null) queryParams.Add("category_id", ApiClient.ParameterToString(categoryId)); // query parameter
            if (snapshotDate != null) queryParams.Add("snapshot_date", ApiClient.ParameterToString(snapshotDate)); // query parameter
            if (xEBAYCMARKETPLACEID != null) headerParams.Add("X-EBAY-C-MARKETPLACE-ID", ApiClient.ParameterToString(xEBAYCMARKETPLACEID)); // header parameter
            if (range != null) headerParams.Add("Range", ApiClient.ParameterToString(range)); // header parameter



            // authentication setting, if any
            var authSettings = new String[] { "Client Credentials" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetItemSnapshotFeed: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetItemSnapshotFeed: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.ItemSnapshotResponse)ApiClient.Deserialize(response.Content, typeof(Models.ItemSnapshotResponse), response.Headers);
        }
    }
}
namespace eBayApi.Buy.Feed.Models
{
    /// <summary>
    /// The type that defines the container for the items returned by the <b> getItemSnapshotResponse</b>.
    /// </summary>
    [DataContract]
    public class ItemSnapshotResponse
    {
        /// <summary>
        /// The type that defines the array for the items returned by the getItemSnapshotFeed call.
        /// </summary>
        /// <value>The type that defines the array for the items returned by the getItemSnapshotFeed call.</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "items")]
        public ItemSnapshot[] Items { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the array for the items returned by the <b> getItemFeed</b> call. 
    /// </summary>
    [DataContract]
    public class ItemResponse
    {
        /// <summary>
        /// The container for the array of items returned by the getItemFeed call. The data in the file is tab separated and the first row is the header, which labels the columns and indicates the order of the values on each line. The header labels match the fields that are described in the Response fields section.
        /// </summary>
        /// <value>The container for the array of items returned by the getItemFeed call. The data in the file is tab separated and the first row is the header, which labels the columns and indicates the order of the values on each line. The header labels match the fields that are described in the Response fields section.</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "items")]
        public Item[] Items { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the data returned by the <b> getItemSnapshotFeed</b> call. <p class="tablenote"><b>Note: </b> The  <b> imageAlteringProhibited</b> column is not returned.</p>
    /// </summary>
    [DataContract]
    public class ItemSnapshot
    {
        /// <summary>
        /// The unique identifier of the eBay item.
        /// </summary>
        /// <value>The unique identifier of the eBay item.</value>
        [DataMember(Name = "itemId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemId")]
        public string ItemId { get; set; }
        /// <summary>
        /// An enumeration value representing the item's availability (possibility of being purchased). Values: AVAILABLE TEMPORARILY_UNAVAILABLE UNAVAILABLE Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/AvailabilityEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>An enumeration value representing the item's availability (possibility of being purchased). Values: AVAILABLE TEMPORARILY_UNAVAILABLE UNAVAILABLE Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/AvailabilityEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "availability", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "availability")]
        public string Availability { get; set; }
        /// <summary>
        /// The seller created title of the item.
        /// </summary>
        /// <value>The seller created title of the item.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }
        /// <summary>
        /// The URL to the primary image of the item. This is the URL of the largest image available based on what the seller submitted.
        /// </summary>
        /// <value>The URL to the primary image of the item. This is the URL of the largest image available based on what the seller submitted.</value>
        [DataMember(Name = "imageUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "imageUrl")]
        public string ImageUrl { get; set; }
        /// <summary>
        /// The label of the category of the item. For example: Toys &amp; Hobbies|Action Figures|Comic Book Heroes .
        /// </summary>
        /// <value>The label of the category of the item. For example: Toys &amp; Hobbies|Action Figures|Comic Book Heroes .</value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }
        /// <summary>
        /// The ID of the category of the item. For example: The ID for Toys &amp; Hobbies|Action Figures|Comic Book Heroes is 158671.
        /// </summary>
        /// <value>The ID of the category of the item. For example: The ID for Toys &amp; Hobbies|Action Figures|Comic Book Heroes is 158671.</value>
        [DataMember(Name = "categoryId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryId")]
        public string CategoryId { get; set; }
        /// <summary>
        /// A comma separated list of the purchase options available for the item, such as FIXED_PRICE, AUCTION. Code so that your app gracefully handles any future changes to this list. Note: This column can contain multiple values.
        /// </summary>
        /// <value>A comma separated list of the purchase options available for the item, such as FIXED_PRICE, AUCTION. Code so that your app gracefully handles any future changes to this list. Note: This column can contain multiple values.</value>
        [DataMember(Name = "buyingOptions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "buyingOptions")]
        public string BuyingOptions { get; set; }
        /// <summary>
        /// The seller's eBay user name.
        /// </summary>
        /// <value>The seller's eBay user name.</value>
        [DataMember(Name = "sellerUsername", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sellerUsername")]
        public string SellerUsername { get; set; }
        /// <summary>
        /// The percentage of the seller's total positive feedback.
        /// </summary>
        /// <value>The percentage of the seller's total positive feedback.</value>
        [DataMember(Name = "sellerFeedbackPercentage", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sellerFeedbackPercentage")]
        public string SellerFeedbackPercentage { get; set; }
        /// <summary>
        /// The feedback score of the seller. This value is based on the ratings from eBay members that bought items from this seller.
        /// </summary>
        /// <value>The feedback score of the seller. This value is based on the ratings from eBay members that bought items from this seller.</value>
        [DataMember(Name = "sellerFeedbackScore", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sellerFeedbackScore")]
        public string SellerFeedbackScore { get; set; }
        /// <summary>
        /// The unique Global Trade Item Number of the item as defined by http://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.
        /// </summary>
        /// <value>The unique Global Trade Item Number of the item as defined by http://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.</value>
        [DataMember(Name = "gtin", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "gtin")]
        public string Gtin { get; set; }
        /// <summary>
        /// The name brand of the item, such as Nike, Apple, etc.
        /// </summary>
        /// <value>The name brand of the item, such as Nike, Apple, etc.</value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "brand")]
        public string Brand { get; set; }
        /// <summary>
        /// The manufacturer part number, which is a number that is used in combination with brand to identify a product.
        /// </summary>
        /// <value>The manufacturer part number, which is a number that is used in combination with brand to identify a product.</value>
        [DataMember(Name = "mpn", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "mpn")]
        public string Mpn { get; set; }
        /// <summary>
        /// The eBay product identifier of a product from the eBay product catalog. You can use this value in the Browse API search call to retrieve items for this product and in the Marketing API calls to retrieve 'also viewed' and 'also bought' products to encourage up-selling and cross-selling.
        /// </summary>
        /// <value>The eBay product identifier of a product from the eBay product catalog. You can use this value in the Browse API search call to retrieve items for this product and in the Marketing API calls to retrieve 'also viewed' and 'also bought' products to encourage up-selling and cross-selling.</value>
        [DataMember(Name = "epid", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "epid")]
        public string Epid { get; set; }
        /// <summary>
        /// The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see ConditionEnum. Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see ConditionEnum. Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "conditionId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "conditionId")]
        public string ConditionId { get; set; }
        /// <summary>
        /// The text describing the condition of the item, such as New or Used. For a list of condition names, see ConditionEnum. Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>The text describing the condition of the item, such as New or Used. For a list of condition names, see ConditionEnum. Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "condition", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "condition")]
        public string Condition { get; set; }
        /// <summary>
        /// The price of the item. Note: This price can be a discounted price.
        /// </summary>
        /// <value>The price of the item. Note: This price can be a discounted price.</value>
        [DataMember(Name = "priceValue", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "priceValue")]
        public string PriceValue { get; set; }
        /// <summary>
        /// The currency used for the price of the item. Generally, this is the currency used by the country of the eBay site offering the item. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/CurrencyCodeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The currency used for the price of the item. Generally, this is the currency used by the country of the eBay site offering the item. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/CurrencyCodeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "priceCurrency", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "priceCurrency")]
        public string PriceCurrency { get; set; }
        /// <summary>
        /// The unique identifier for the item group that contains this item. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.
        /// </summary>
        /// <value>The unique identifier for the item group that contains this item. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.</value>
        [DataMember(Name = "primaryItemGroupId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "primaryItemGroupId")]
        public string PrimaryItemGroupId { get; set; }
        /// <summary>
        /// The item group type. Supported value: SELLER_DEFINED_VARIATIONS, indicates that the item group was created by the seller. Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>The item group type. Supported value: SELLER_DEFINED_VARIATIONS, indicates that the item group was created by the seller. Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "primaryItemGroupType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "primaryItemGroupType")]
        public string PrimaryItemGroupType { get; set; }
        /// <summary>
        /// A timestamp indicating when the item's sale period will end based on its start date and duration. For Good 'Til Cancelled' items, no value is returned in this column. Format: UTC (yyyy-MM-ddThh:mm:ss.sssZ).
        /// </summary>
        /// <value>A timestamp indicating when the item's sale period will end based on its start date and duration. For Good 'Til Cancelled' items, no value is returned in this column. Format: UTC (yyyy-MM-ddThh:mm:ss.sssZ).</value>
        [DataMember(Name = "itemEndDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemEndDate")]
        public string ItemEndDate { get; set; }
        /// <summary>
        /// An identifier generated/incremented when a seller revises the item. There are two types of item revisions; seller changes, such as changing the title and eBay system changes, such as changing the quantity when an item is purchased. This ID is changed only when the seller makes a change to the item.
        /// </summary>
        /// <value>An identifier generated/incremented when a seller revises the item. There are two types of item revisions; seller changes, such as changing the title and eBay system changes, such as changing the quantity when an item is purchased. This ID is changed only when the seller makes a change to the item.</value>
        [DataMember(Name = "sellerItemRevision", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sellerItemRevision")]
        public string SellerItemRevision { get; set; }
        /// <summary>
        /// The country where the item is physically located.
        /// </summary>
        /// <value>The country where the item is physically located.</value>
        [DataMember(Name = "itemLocationCountry", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemLocationCountry")]
        public string ItemLocationCountry { get; set; }
        /// <summary>
        /// A semicolon separated list of the name/value pairs for the aspects of the item, which are BASE64 encoded. The aspect label is separated by a pipe (|), the aspect name and value are separated by a colon (:) and the name/value pairs are separated by a semicolon (;). Example without Label &nbsp;&nbsp; Encoded Format: &nbsp;&nbsp;&nbsp;encodedName:encodedValue;encodedName:encodedValue;encodedName:encodedValue &nbsp;&nbsp; Encoded Example (encoded text shown in orange): &nbsp;&nbsp;&nbsp;U2l6ZQ==:WEw=;Q29sb3I=:UmVk;U2xlZXZlcw==:TG9uZw== &nbsp;&nbsp; Decoded: &nbsp;&nbsp;&nbsp;Size:XL;Color:Red;Sleeves:Long Example with Label &nbsp;&nbsp; Encoded Format: &nbsp;&nbsp;&nbsp;encodedLabel|encodedName:encodedValue;encodedName:encodedValue;encodedLabel| &nbsp;&nbsp; Encoded Example (encoded text shown in orange): &nbsp;&nbsp;&nbsp;UHJvZHVjdCBJZGVudGlmaWVycw==|R1RJTg==:MDE5MDE5ODA2NjYzMw==;QlJBTkQ=:QXBwbGU=;UHJvZHVjdCBLZXkgRmVhdHVyZXM=|TW9kZWw=:aVBob25lIDc= &nbsp;&nbsp; Decoded: &nbsp;&nbsp;&nbsp;Product Identifiers|GTIN:0190198066633;BRAND:Apple;Product Key Features|Model:iPhone 7 Note: The separators ( | : ; ) are not encoded. You must decode each label, name, and value separately. You cannot decode the entire string. For more information, see Encoded Aspects in the Buying Integration Guide.
        /// </summary>
        /// <value>A semicolon separated list of the name/value pairs for the aspects of the item, which are BASE64 encoded. The aspect label is separated by a pipe (|), the aspect name and value are separated by a colon (:) and the name/value pairs are separated by a semicolon (;). Example without Label &nbsp;&nbsp; Encoded Format: &nbsp;&nbsp;&nbsp;encodedName:encodedValue;encodedName:encodedValue;encodedName:encodedValue &nbsp;&nbsp; Encoded Example (encoded text shown in orange): &nbsp;&nbsp;&nbsp;U2l6ZQ==:WEw=;Q29sb3I=:UmVk;U2xlZXZlcw==:TG9uZw== &nbsp;&nbsp; Decoded: &nbsp;&nbsp;&nbsp;Size:XL;Color:Red;Sleeves:Long Example with Label &nbsp;&nbsp; Encoded Format: &nbsp;&nbsp;&nbsp;encodedLabel|encodedName:encodedValue;encodedName:encodedValue;encodedLabel| &nbsp;&nbsp; Encoded Example (encoded text shown in orange): &nbsp;&nbsp;&nbsp;UHJvZHVjdCBJZGVudGlmaWVycw==|R1RJTg==:MDE5MDE5ODA2NjYzMw==;QlJBTkQ=:QXBwbGU=;UHJvZHVjdCBLZXkgRmVhdHVyZXM=|TW9kZWw=:aVBob25lIDc= &nbsp;&nbsp; Decoded: &nbsp;&nbsp;&nbsp;Product Identifiers|GTIN:0190198066633;BRAND:Apple;Product Key Features|Model:iPhone 7 Note: The separators ( | : ; ) are not encoded. You must decode each label, name, and value separately. You cannot decode the entire string. For more information, see Encoded Aspects in the Buying Integration Guide.</value>
        [DataMember(Name = "localizedAspects", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "localizedAspects")]
        public string LocalizedAspects { get; set; }
        /// <summary>
        /// The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.
        /// </summary>
        /// <value>The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.</value>
        [DataMember(Name = "estimatedAvailableQuantity", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "estimatedAvailableQuantity")]
        public int? EstimatedAvailableQuantity { get; set; }
        /// <summary>
        /// This column has a value only when the seller sets their Display Item Quantity preference to Display &quot;More than 10 available&quot; in your listing (if applicable). The value of this column will be MORE_THAN. This indicates that the seller has more than the 'Display Item Quantity', which is 10, in stock for this item. The following are the Display Item Quantity preferences the seller can set. Display &quot;More than 10 available&quot; in your listing (if applicable) If the seller enables this preference, this column will have a value as long as there are more than 10 of this item in inventory. If the quantity is equal to 10 or drops below 10, this column will be null and the estimated quantity of the item is returned in the estimatedAvailableQuantity column. Display the exact quantity in your items If the seller enables this preference, the availabilityThresholdType and availabilityThreshold columns will be null and the estimated quantity of the item is returned in the estimatedAvailableQuantity column. Note: Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. Code so that your app gracefully handles any future changes to these preferences. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/AvailabilityThresholdEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>This column has a value only when the seller sets their Display Item Quantity preference to Display &quot;More than 10 available&quot; in your listing (if applicable). The value of this column will be MORE_THAN. This indicates that the seller has more than the 'Display Item Quantity', which is 10, in stock for this item. The following are the Display Item Quantity preferences the seller can set. Display &quot;More than 10 available&quot; in your listing (if applicable) If the seller enables this preference, this column will have a value as long as there are more than 10 of this item in inventory. If the quantity is equal to 10 or drops below 10, this column will be null and the estimated quantity of the item is returned in the estimatedAvailableQuantity column. Display the exact quantity in your items If the seller enables this preference, the availabilityThresholdType and availabilityThreshold columns will be null and the estimated quantity of the item is returned in the estimatedAvailableQuantity column. Note: Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. Code so that your app gracefully handles any future changes to these preferences. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/AvailabilityThresholdEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "availabilityThresholdType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "availabilityThresholdType")]
        public string AvailabilityThresholdType { get; set; }
        /// <summary>
        /// This column has a value only when the seller sets their 'display item quantity' preference to Display &quot;More than 10 available&quot; in your listing (if applicable). The value of this column will be &quot;10&quot;, which is the threshold value. Code so that your app gracefully handles any future changes to this value.
        /// </summary>
        /// <value>This column has a value only when the seller sets their 'display item quantity' preference to Display &quot;More than 10 available&quot; in your listing (if applicable). The value of this column will be &quot;10&quot;, which is the threshold value. Code so that your app gracefully handles any future changes to this value.</value>
        [DataMember(Name = "availabilityThreshold", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "availabilityThreshold")]
        public int? AvailabilityThreshold { get; set; }
        /// <summary>
        /// This timestamp denotes the date and time the changes for that item were picked up and added to the snapshot feed file. For example, let's say you have a snapshot feed file and also ran the getItem call. When you compare the same item information from the two sources, you see that the price in the getItem call response is different from the price in the snapshot feed file. By knowing the date and time you submitted the getItem call, you can use the itemSnapshotDate data to determine which price is the most current for this item.
        /// </summary>
        /// <value>This timestamp denotes the date and time the changes for that item were picked up and added to the snapshot feed file. For example, let's say you have a snapshot feed file and also ran the getItem call. When you compare the same item information from the two sources, you see that the price in the getItem call response is different from the price in the snapshot feed file. By knowing the date and time you submitted the getItem call, you can use the itemSnapshotDate data to determine which price is the most current for this item.</value>
        [DataMember(Name = "itemSnapshotDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemSnapshotDate")]
        public string ItemSnapshotDate { get; set; }
        /// <summary>
        /// Indicates whether the seller accepts returns for the item.
        /// </summary>
        /// <value>Indicates whether the seller accepts returns for the item.</value>
        [DataMember(Name = "returnsAccepted", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "returnsAccepted")]
        public bool? ReturnsAccepted { get; set; }
        /// <summary>
        /// An enumeration value that indicates how a buyer is refunded when an item is returned. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/RefundMethodEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>An enumeration value that indicates how a buyer is refunded when an item is returned. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/RefundMethodEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "refundMethod", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "refundMethod")]
        public string RefundMethod { get; set; }
        /// <summary>
        /// An enumeration value that indicates the alternative methods for a full refund when an item is returned. This column will have data if the seller offers the buyer an item replacement or exchange instead of a monetary refund. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/ReturnMethodEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>An enumeration value that indicates the alternative methods for a full refund when an item is returned. This column will have data if the seller offers the buyer an item replacement or exchange instead of a monetary refund. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/ReturnMethodEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "returnMethod", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "returnMethod")]
        public string ReturnMethod { get; set; }
        /// <summary>
        /// The party responsible for the return shipping costs when an item is returned. Valid Values: BUYER or SELLER Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/ReturnShippingCostPayerEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The party responsible for the return shipping costs when an item is returned. Valid Values: BUYER or SELLER Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/ReturnShippingCostPayerEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "returnShippingCostPayer", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "returnShippingCostPayer")]
        public string ReturnShippingCostPayer { get; set; }
        /// <summary>
        /// The amount of time the buyer has to return the item after the purchase date. This can be the number of years, months, or days depending on returnPeriodUnit. For example, if this value is '30', and the returnPeriodUnit value is 'DAY', the return period is 30 days.
        /// </summary>
        /// <value>The amount of time the buyer has to return the item after the purchase date. This can be the number of years, months, or days depending on returnPeriodUnit. For example, if this value is '30', and the returnPeriodUnit value is 'DAY', the return period is 30 days.</value>
        [DataMember(Name = "returnPeriodValue", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "returnPeriodValue")]
        public int? ReturnPeriodValue { get; set; }
        /// <summary>
        /// An enumeration value that indicates the period of time being used to measure the duration, such as business days or months, or years. See the TimeDurationUnitEnum type for a list of possible time-measuring units. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/TimeDurationUnitEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>An enumeration value that indicates the period of time being used to measure the duration, such as business days or months, or years. See the TimeDurationUnitEnum type for a list of possible time-measuring units. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/TimeDurationUnitEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "returnPeriodUnit", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "returnPeriodUnit")]
        public string ReturnPeriodUnit { get; set; }
        /// <summary>
        /// The original selling price of the item. This lets you surface a strikethrough price for the item.
        /// </summary>
        /// <value>The original selling price of the item. This lets you surface a strikethrough price for the item.</value>
        [DataMember(Name = "originalPriceValue", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "originalPriceValue")]
        public string OriginalPriceValue { get; set; }
        /// <summary>
        /// The currency of the originalPriceValue of the item and the discountAmount. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/CurrencyCodeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The currency of the originalPriceValue of the item and the discountAmount. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/CurrencyCodeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "originalPriceCurrency", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "originalPriceCurrency")]
        public string OriginalPriceCurrency { get; set; }
        /// <summary>
        /// The calculated amount of the discount (originalPriceValue - priceValue). For example, if originalPriceValue is 70 and priceValue is 56, this value would be 14. Note: The currency shown in originalPriceCurrency is used for both discountAmount and originalPriceCurrency.
        /// </summary>
        /// <value>The calculated amount of the discount (originalPriceValue - priceValue). For example, if originalPriceValue is 70 and priceValue is 56, this value would be 14. Note: The currency shown in originalPriceCurrency is used for both discountAmount and originalPriceCurrency.</value>
        [DataMember(Name = "discountAmount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "discountAmount")]
        public string DiscountAmount { get; set; }
        /// <summary>
        /// The calculated discount percentage. For example, if originalPriceValue is 70 and discountAmount is 14, this value will be 20.
        /// </summary>
        /// <value>The calculated discount percentage. For example, if originalPriceValue is 70 and discountAmount is 14, this value will be 20.</value>
        [DataMember(Name = "discountPercentage", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "discountPercentage")]
        public string DiscountPercentage { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  BuyingOptions: ").Append(BuyingOptions).Append("\n");
            sb.Append("  SellerUsername: ").Append(SellerUsername).Append("\n");
            sb.Append("  SellerFeedbackPercentage: ").Append(SellerFeedbackPercentage).Append("\n");
            sb.Append("  SellerFeedbackScore: ").Append(SellerFeedbackScore).Append("\n");
            sb.Append("  Gtin: ").Append(Gtin).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Mpn: ").Append(Mpn).Append("\n");
            sb.Append("  Epid: ").Append(Epid).Append("\n");
            sb.Append("  ConditionId: ").Append(ConditionId).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  PriceValue: ").Append(PriceValue).Append("\n");
            sb.Append("  PriceCurrency: ").Append(PriceCurrency).Append("\n");
            sb.Append("  PrimaryItemGroupId: ").Append(PrimaryItemGroupId).Append("\n");
            sb.Append("  PrimaryItemGroupType: ").Append(PrimaryItemGroupType).Append("\n");
            sb.Append("  ItemEndDate: ").Append(ItemEndDate).Append("\n");
            sb.Append("  SellerItemRevision: ").Append(SellerItemRevision).Append("\n");
            sb.Append("  ItemLocationCountry: ").Append(ItemLocationCountry).Append("\n");
            sb.Append("  LocalizedAspects: ").Append(LocalizedAspects).Append("\n");
            sb.Append("  EstimatedAvailableQuantity: ").Append(EstimatedAvailableQuantity).Append("\n");
            sb.Append("  AvailabilityThresholdType: ").Append(AvailabilityThresholdType).Append("\n");
            sb.Append("  AvailabilityThreshold: ").Append(AvailabilityThreshold).Append("\n");
            sb.Append("  ItemSnapshotDate: ").Append(ItemSnapshotDate).Append("\n");
            sb.Append("  ReturnsAccepted: ").Append(ReturnsAccepted).Append("\n");
            sb.Append("  RefundMethod: ").Append(RefundMethod).Append("\n");
            sb.Append("  ReturnMethod: ").Append(ReturnMethod).Append("\n");
            sb.Append("  ReturnShippingCostPayer: ").Append(ReturnShippingCostPayer).Append("\n");
            sb.Append("  ReturnPeriodValue: ").Append(ReturnPeriodValue).Append("\n");
            sb.Append("  ReturnPeriodUnit: ").Append(ReturnPeriodUnit).Append("\n");
            sb.Append("  OriginalPriceValue: ").Append(OriginalPriceValue).Append("\n");
            sb.Append("  OriginalPriceCurrency: ").Append(OriginalPriceCurrency).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  DiscountPercentage: ").Append(DiscountPercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the array for the fields returned by the <b> getItemGroupFeed</b> call.
    /// </summary>
    [DataContract]
    public class ItemGroupResponse
    {
        /// <summary>
        /// The container for the array of items returned by the getItemGroupFeed call. The data in the file is tab separated and the first row is the header, which labels the columns and indicates the order of the values for each item. The header labels match the fields that are described in the Response fields section.
        /// </summary>
        /// <value>The container for the array of items returned by the getItemGroupFeed call. The data in the file is tab separated and the first row is the header, which labels the columns and indicates the order of the values for each item. The header labels match the fields that are described in the Response fields section.</value>
        [DataMember(Name = "itemGroups", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemGroups")]
        public ItemGroup[] ItemGroups { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ItemGroups: ").Append(ItemGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines fields for the data returned by the <b> getItemDescriptionFeed</b> call. The first row is the header, which labels the columns and indicates the order of the values for each item. The header labels match the fields that are described in the <a href="/api-docs/buy/feed/resources/item_group/methods/getItemGroupFeed#h3-response-fields">Response fields</a> section. 
    /// </summary>
    [DataContract]
    public class ItemDescription
    {
        /// <summary>
        /// The unique identifier of the eBay item that is not part of an item group or (in rare cases) the item is part of an item group but does not share a description with other items in the group. In this case, there will be values in the itemId and description columns. You match the value of itemId from the Description feed file with the value of itemId from the Item feed file for the same day and category.
        /// </summary>
        /// <value>The unique identifier of the eBay item that is not part of an item group or (in rare cases) the item is part of an item group but does not share a description with other items in the group. In this case, there will be values in the itemId and description columns. You match the value of itemId from the Description feed file with the value of itemId from the Item feed file for the same day and category.</value>
        [DataMember(Name = "itemId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemId")]
        public string ItemId { get; set; }
        /// <summary>
        /// The unique identifier for the item group (items with variations, such as a shirt in multiple sizes) where the items in the group share the same description. Even though the itemGroupId represents more than one item, the itemGroupId and description are returned only once for the entire group. In this case, there will be values in the itemGroupId and description columns. You match the value of itemGroupId from the Description feed file with the value of primaryItemGroupId from the Item feed file for the same day and category.
        /// </summary>
        /// <value>The unique identifier for the item group (items with variations, such as a shirt in multiple sizes) where the items in the group share the same description. Even though the itemGroupId represents more than one item, the itemGroupId and description are returned only once for the entire group. In this case, there will be values in the itemGroupId and description columns. You match the value of itemGroupId from the Description feed file with the value of primaryItemGroupId from the Item feed file for the same day and category.</value>
        [DataMember(Name = "itemGroupId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemGroupId")]
        public string ItemGroupId { get; set; }
        /// <summary>
        /// The seller created description of the item, which is BASE64 encoded. Descriptions can contain HTML code, links, etc. and are often very large.
        /// </summary>
        /// <value>The seller created description of the item, which is BASE64 encoded. Descriptions can contain HTML code, links, etc. and are often very large.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ItemGroupId: ").Append(ItemGroupId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the data returned by the <b> getItemGroupFeed</b> call.
    /// </summary>
    [DataContract]
    public class ItemGroup
    {
        /// <summary>
        /// A boolean that indicates whether the images can be altered. If the value is true, you cannot modify the image. Note: Due to image licensing agreements and other legal concerns, modification (including resizing) of some images is strictly prohibited. These images are for display as-is only.
        /// </summary>
        /// <value>A boolean that indicates whether the images can be altered. If the value is true, you cannot modify the image. Note: Due to image licensing agreements and other legal concerns, modification (including resizing) of some images is strictly prohibited. These images are for display as-is only.</value>
        [DataMember(Name = "imageAlteringProhibited", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "imageAlteringProhibited")]
        public bool? ImageAlteringProhibited { get; set; }
        /// <summary>
        /// The unique identifier for the item group. This ID is returned in the primaryItemGroupId column of the Item Feed file.
        /// </summary>
        /// <value>The unique identifier for the item group. This ID is returned in the primaryItemGroupId column of the Item Feed file.</value>
        [DataMember(Name = "itemGroupId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemGroupId")]
        public string ItemGroupId { get; set; }
        /// <summary>
        /// The item group type. For example: SELLER_DEFINED_VARIATIONS, indicates that the item group was created by the seller. Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>The item group type. For example: SELLER_DEFINED_VARIATIONS, indicates that the item group was created by the seller. Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "itemGroupType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemGroupType")]
        public string ItemGroupType { get; set; }
        /// <summary>
        /// The seller created title of the item group.
        /// </summary>
        /// <value>The seller created title of the item group.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }
        /// <summary>
        /// A pipe separated (|) list of the aspect (variation) names for this item group. The aspect name is BASE64 encoded. Note: This column can contain multiple values. &nbsp;&nbsp; Encoded Format: &nbsp;&nbsp;&nbsp;aspectName|aspectName &nbsp;&nbsp; Encoded Example (encoded text shown in orange): &nbsp;&nbsp;&nbsp;Q29sb3I=|U2l6ZQ== &nbsp;&nbsp; Decoded: &nbsp;&nbsp;&nbsp;Color|Size
        /// </summary>
        /// <value>A pipe separated (|) list of the aspect (variation) names for this item group. The aspect name is BASE64 encoded. Note: This column can contain multiple values. &nbsp;&nbsp; Encoded Format: &nbsp;&nbsp;&nbsp;aspectName|aspectName &nbsp;&nbsp; Encoded Example (encoded text shown in orange): &nbsp;&nbsp;&nbsp;Q29sb3I=|U2l6ZQ== &nbsp;&nbsp; Decoded: &nbsp;&nbsp;&nbsp;Color|Size</value>
        [DataMember(Name = "variesByLocalizedAspects", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "variesByLocalizedAspects")]
        public string VariesByLocalizedAspects { get; set; }
        /// <summary>
        /// The URL to the primary image of the item. The other images of the item group are returned in the additionalImageUrls column.
        /// </summary>
        /// <value>The URL to the primary image of the item. The other images of the item group are returned in the additionalImageUrls column.</value>
        [DataMember(Name = "imageUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "imageUrl")]
        public string ImageUrl { get; set; }
        /// <summary>
        /// A pipe separated (|) list of URLs for the additional images for the item group. These images are in addition to the primary image, which is returned in the imageUrl column. Note: This column can contain multiple values.
        /// </summary>
        /// <value>A pipe separated (|) list of URLs for the additional images for the item group. These images are in addition to the primary image, which is returned in the imageUrl column. Note: This column can contain multiple values.</value>
        [DataMember(Name = "additionalImageUrls", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "additionalImageUrls")]
        public string AdditionalImageUrls { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ImageAlteringProhibited: ").Append(ImageAlteringProhibited).Append("\n");
            sb.Append("  ItemGroupId: ").Append(ItemGroupId).Append("\n");
            sb.Append("  ItemGroupType: ").Append(ItemGroupType).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  VariesByLocalizedAspects: ").Append(VariesByLocalizedAspects).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  AdditionalImageUrls: ").Append(AdditionalImageUrls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the data returned by the <b> getItemFeed</b> call.
    /// </summary>
    [DataContract]
    public class Item
    {
        /// <summary>
        /// The unique identifier of the eBay item.
        /// </summary>
        /// <value>The unique identifier of the eBay item.</value>
        [DataMember(Name = "itemId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemId")]
        public string ItemId { get; set; }
        /// <summary>
        /// The seller created title of the item.
        /// </summary>
        /// <value>The seller created title of the item.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }
        /// <summary>
        /// The URL to the primary image of the item. This is the URL of the largest image available based on what the seller submitted.
        /// </summary>
        /// <value>The URL to the primary image of the item. This is the URL of the largest image available based on what the seller submitted.</value>
        [DataMember(Name = "imageUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "imageUrl")]
        public string ImageUrl { get; set; }
        /// <summary>
        /// The label of the category. For example: Toys &amp; Hobbies|Action Figures|Comic Book Heroes
        /// </summary>
        /// <value>The label of the category. For example: Toys &amp; Hobbies|Action Figures|Comic Book Heroes</value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }
        /// <summary>
        /// The ID of the category of the item. For example: The ID for Toys &amp; Hobbies|Action Figures|Comic Book Heroes is 158671.
        /// </summary>
        /// <value>The ID of the category of the item. For example: The ID for Toys &amp; Hobbies|Action Figures|Comic Book Heroes is 158671.</value>
        [DataMember(Name = "categoryId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryId")]
        public string CategoryId { get; set; }
        /// <summary>
        /// A comma separated list of the purchase options available for the item, such as FIXED_PRICE, AUCTION. FIXED_PRICE - Returned for fixed-price items (non-auction) AUCTION - Returned for auction items without Buy It Now feature FIXED_PRICE and AUCTION - Returned for auction items enabled with the Buy It Now feature Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>A comma separated list of the purchase options available for the item, such as FIXED_PRICE, AUCTION. FIXED_PRICE - Returned for fixed-price items (non-auction) AUCTION - Returned for auction items without Buy It Now feature FIXED_PRICE and AUCTION - Returned for auction items enabled with the Buy It Now feature Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "buyingOptions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "buyingOptions")]
        public string BuyingOptions { get; set; }
        /// <summary>
        /// The seller's eBay user name.
        /// </summary>
        /// <value>The seller's eBay user name.</value>
        [DataMember(Name = "sellerUsername", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sellerUsername")]
        public string SellerUsername { get; set; }
        /// <summary>
        /// The percentage of the seller's total positive feedback.
        /// </summary>
        /// <value>The percentage of the seller's total positive feedback.</value>
        [DataMember(Name = "sellerFeedbackPercentage", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sellerFeedbackPercentage")]
        public string SellerFeedbackPercentage { get; set; }
        /// <summary>
        /// The feedback score of the seller. This value is based on the ratings from eBay members that bought items from this seller.
        /// </summary>
        /// <value>The feedback score of the seller. This value is based on the ratings from eBay members that bought items from this seller.</value>
        [DataMember(Name = "sellerFeedbackScore", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sellerFeedbackScore")]
        public string SellerFeedbackScore { get; set; }
        /// <summary>
        /// The unique Global Trade Item Number of the item as defined by http://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.
        /// </summary>
        /// <value>The unique Global Trade Item Number of the item as defined by http://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.</value>
        [DataMember(Name = "gtin", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "gtin")]
        public string Gtin { get; set; }
        /// <summary>
        /// The name brand of the item, such as Nike, Apple, etc.
        /// </summary>
        /// <value>The name brand of the item, such as Nike, Apple, etc.</value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "brand")]
        public string Brand { get; set; }
        /// <summary>
        /// The manufacturer part number, which is a number that is used in combination with brand to identify a product.
        /// </summary>
        /// <value>The manufacturer part number, which is a number that is used in combination with brand to identify a product.</value>
        [DataMember(Name = "mpn", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "mpn")]
        public string Mpn { get; set; }
        /// <summary>
        /// The eBay product identifier of a product from the eBay product catalog. You can use this value in the Browse API search call to retrieve items for this product and in the Marketing API calls to retrieve 'also viewed' and 'also bought' products to encourage up-selling and cross-selling.
        /// </summary>
        /// <value>The eBay product identifier of a product from the eBay product catalog. You can use this value in the Browse API search call to retrieve items for this product and in the Marketing API calls to retrieve 'also viewed' and 'also bought' products to encourage up-selling and cross-selling.</value>
        [DataMember(Name = "epid", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "epid")]
        public string Epid { get; set; }
        /// <summary>
        /// The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see ConditionEnum. Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see ConditionEnum. Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "conditionId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "conditionId")]
        public string ConditionId { get; set; }
        /// <summary>
        /// The text describing the condition of the item. For a list of condition names, see ConditionEnum. Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>The text describing the condition of the item. For a list of condition names, see ConditionEnum. Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "condition", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "condition")]
        public string Condition { get; set; }
        /// <summary>
        /// The price of the item. This price can be a discounted price. If it is discounted, information about the discount is returned in the originalPriceValue, originalPriceCurrency, discountAmount, and discountPercentage columns.
        /// </summary>
        /// <value>The price of the item. This price can be a discounted price. If it is discounted, information about the discount is returned in the originalPriceValue, originalPriceCurrency, discountAmount, and discountPercentage columns.</value>
        [DataMember(Name = "priceValue", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "priceValue")]
        public string PriceValue { get; set; }
        /// <summary>
        /// The currency used for the price of the item. Generally, this is the currency used by the country of the eBay site offering the item. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/CurrencyCodeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The currency used for the price of the item. Generally, this is the currency used by the country of the eBay site offering the item. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/CurrencyCodeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "priceCurrency", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "priceCurrency")]
        public string PriceCurrency { get; set; }
        /// <summary>
        /// The unique identifier for the item group that contains this item. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.
        /// </summary>
        /// <value>The unique identifier for the item group that contains this item. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.</value>
        [DataMember(Name = "primaryItemGroupId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "primaryItemGroupId")]
        public string PrimaryItemGroupId { get; set; }
        /// <summary>
        /// The item group type. Supported value: SELLER_DEFINED_VARIATIONS, indicates that the item group was created by the seller. Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>The item group type. Supported value: SELLER_DEFINED_VARIATIONS, indicates that the item group was created by the seller. Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "primaryItemGroupType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "primaryItemGroupType")]
        public string PrimaryItemGroupType { get; set; }
        /// <summary>
        /// A timestamp indicating when the item's sale period will end based on its start date and duration. For Good 'Til Cancelled' items, no value is returned in this column. Format: UTC (yyyy-MM-ddThh:mm:ss.sssZ).
        /// </summary>
        /// <value>A timestamp indicating when the item's sale period will end based on its start date and duration. For Good 'Til Cancelled' items, no value is returned in this column. Format: UTC (yyyy-MM-ddThh:mm:ss.sssZ).</value>
        [DataMember(Name = "itemEndDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemEndDate")]
        public string ItemEndDate { get; set; }
        /// <summary>
        /// An identifier generated/incremented when a seller revises the item. There are two types of item revisions; seller changes, such as changing the title and eBay system changes, such as changing the quantity when an item is purchased. This ID is changed only when the seller makes a change to the item.
        /// </summary>
        /// <value>An identifier generated/incremented when a seller revises the item. There are two types of item revisions; seller changes, such as changing the title and eBay system changes, such as changing the quantity when an item is purchased. This ID is changed only when the seller makes a change to the item.</value>
        [DataMember(Name = "sellerItemRevision", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sellerItemRevision")]
        public string SellerItemRevision { get; set; }
        /// <summary>
        /// The country where the item is physically located.
        /// </summary>
        /// <value>The country where the item is physically located.</value>
        [DataMember(Name = "itemLocationCountry", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemLocationCountry")]
        public string ItemLocationCountry { get; set; }
        /// <summary>
        /// A semicolon separated list of the name/value pairs for the aspects of the item, which are BASE64 encoded. The aspect label is separated by a pipe (|), the aspect name and value are separated by a colon (:) and the name/value pairs are separated by a semicolon (;). Example without Label &nbsp;&nbsp; Encoded Format: &nbsp;&nbsp;&nbsp;encodedName:encodedValue;encodedName:encodedValue;encodedName:encodedValue &nbsp;&nbsp; Encoded Example (encoded text shown in orange): &nbsp;&nbsp;&nbsp;U2l6ZQ==:WEw=;Q29sb3I=:UmVk;U2xlZXZlcw==:TG9uZw== &nbsp;&nbsp; Decoded: &nbsp;&nbsp;&nbsp;Size:XL;Color:Red;Sleeves:Long Example with Label &nbsp;&nbsp; Encoded Format: &nbsp;&nbsp;&nbsp;encodedLabel|encodedName:encodedValue;encodedName:encodedValue;encodedLabel| &nbsp;&nbsp; Encoded Example (encoded text shown in orange): &nbsp;&nbsp;&nbsp;UHJvZHVjdCBJZGVudGlmaWVycw==|R1RJTg==:MDE5MDE5ODA2NjYzMw==;QlJBTkQ=:QXBwbGU=;UHJvZHVjdCBLZXkgRmVhdHVyZXM=|TW9kZWw=:aVBob25lIDc= &nbsp;&nbsp; Decoded: &nbsp;&nbsp;&nbsp;Product Identifiers|GTIN:0190198066633;BRAND:Apple;Product Key Features|Model:iPhone 7 Note: The separators ( | : ; ) are not encoded. You must decode each label, name, and value separately. You cannot decode the entire string. For more information, see Encoded Aspects in the Buying Integration Guide.
        /// </summary>
        /// <value>A semicolon separated list of the name/value pairs for the aspects of the item, which are BASE64 encoded. The aspect label is separated by a pipe (|), the aspect name and value are separated by a colon (:) and the name/value pairs are separated by a semicolon (;). Example without Label &nbsp;&nbsp; Encoded Format: &nbsp;&nbsp;&nbsp;encodedName:encodedValue;encodedName:encodedValue;encodedName:encodedValue &nbsp;&nbsp; Encoded Example (encoded text shown in orange): &nbsp;&nbsp;&nbsp;U2l6ZQ==:WEw=;Q29sb3I=:UmVk;U2xlZXZlcw==:TG9uZw== &nbsp;&nbsp; Decoded: &nbsp;&nbsp;&nbsp;Size:XL;Color:Red;Sleeves:Long Example with Label &nbsp;&nbsp; Encoded Format: &nbsp;&nbsp;&nbsp;encodedLabel|encodedName:encodedValue;encodedName:encodedValue;encodedLabel| &nbsp;&nbsp; Encoded Example (encoded text shown in orange): &nbsp;&nbsp;&nbsp;UHJvZHVjdCBJZGVudGlmaWVycw==|R1RJTg==:MDE5MDE5ODA2NjYzMw==;QlJBTkQ=:QXBwbGU=;UHJvZHVjdCBLZXkgRmVhdHVyZXM=|TW9kZWw=:aVBob25lIDc= &nbsp;&nbsp; Decoded: &nbsp;&nbsp;&nbsp;Product Identifiers|GTIN:0190198066633;BRAND:Apple;Product Key Features|Model:iPhone 7 Note: The separators ( | : ; ) are not encoded. You must decode each label, name, and value separately. You cannot decode the entire string. For more information, see Encoded Aspects in the Buying Integration Guide.</value>
        [DataMember(Name = "localizedAspects", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "localizedAspects")]
        public string LocalizedAspects { get; set; }
        /// <summary>
        /// An enumeration value representing the item's availability (possibility of being purchased). Values: AVAILABLE TEMPORARILY_UNAVAILABLE UNAVAILABLE Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/AvailabilityEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>An enumeration value representing the item's availability (possibility of being purchased). Values: AVAILABLE TEMPORARILY_UNAVAILABLE UNAVAILABLE Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/AvailabilityEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "availability", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "availability")]
        public string Availability { get; set; }
        /// <summary>
        /// An enumeration value representing the eBay status of the seller. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/SellerTrustLevelEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>An enumeration value representing the eBay status of the seller. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/SellerTrustLevelEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "sellerTrustLevel", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sellerTrustLevel")]
        public string SellerTrustLevel { get; set; }
        /// <summary>
        /// A boolean that indicates whether the images can be altered. If the value is true, you cannot modify the image. Note: Due to image licensing agreements and other legal concerns, modification (including resizing) of some images is strictly prohibited. These images are for display as-is only.
        /// </summary>
        /// <value>A boolean that indicates whether the images can be altered. If the value is true, you cannot modify the image. Note: Due to image licensing agreements and other legal concerns, modification (including resizing) of some images is strictly prohibited. These images are for display as-is only.</value>
        [DataMember(Name = "imageAlteringProhibited", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "imageAlteringProhibited")]
        public bool? ImageAlteringProhibited { get; set; }
        /// <summary>
        /// The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.
        /// </summary>
        /// <value>The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.</value>
        [DataMember(Name = "estimatedAvailableQuantity", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "estimatedAvailableQuantity")]
        public int? EstimatedAvailableQuantity { get; set; }
        /// <summary>
        /// This column has a value only when the seller sets their Display Item Quantity preference to Display &quot;More than 10 available&quot; in your listing (if applicable). The value of this column will be MORE_THAN. This indicates that the seller has more than the 'Display Item Quantity', which is 10, in stock for this item. The following are the Display Item Quantity preferences the seller can set. Display &quot;More than 10 available&quot; in your listing (if applicable) If the seller enables this preference, this column will have a value as long as there are more than 10 of this item in inventory. If the quantity is equal to 10 or drops below 10, this column will be null and the estimated quantity of the item is returned in the estimatedAvailableQuantity column. Display the exact quantity in your items If the seller enables this preference, the availabilityThresholdType and availabilityThreshold columns will be null and the estimated quantity of the item is returned in the estimatedAvailableQuantity column. Note: Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. Code so that your app gracefully handles any future changes to these preferences. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/AvailabilityThresholdEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>This column has a value only when the seller sets their Display Item Quantity preference to Display &quot;More than 10 available&quot; in your listing (if applicable). The value of this column will be MORE_THAN. This indicates that the seller has more than the 'Display Item Quantity', which is 10, in stock for this item. The following are the Display Item Quantity preferences the seller can set. Display &quot;More than 10 available&quot; in your listing (if applicable) If the seller enables this preference, this column will have a value as long as there are more than 10 of this item in inventory. If the quantity is equal to 10 or drops below 10, this column will be null and the estimated quantity of the item is returned in the estimatedAvailableQuantity column. Display the exact quantity in your items If the seller enables this preference, the availabilityThresholdType and availabilityThreshold columns will be null and the estimated quantity of the item is returned in the estimatedAvailableQuantity column. Note: Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. Code so that your app gracefully handles any future changes to these preferences. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/AvailabilityThresholdEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "availabilityThresholdType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "availabilityThresholdType")]
        public string AvailabilityThresholdType { get; set; }
        /// <summary>
        /// This column has a value only when the seller sets their 'display item quantity' preference to Display &quot;More than 10 available&quot; in your listing (if applicable). The value of this column will be &quot;10&quot;, which is the threshold value. Code so that your app gracefully handles any future changes to this value.
        /// </summary>
        /// <value>This column has a value only when the seller sets their 'display item quantity' preference to Display &quot;More than 10 available&quot; in your listing (if applicable). The value of this column will be &quot;10&quot;, which is the threshold value. Code so that your app gracefully handles any future changes to this value.</value>
        [DataMember(Name = "availabilityThreshold", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "availabilityThreshold")]
        public int? AvailabilityThreshold { get; set; }
        /// <summary>
        /// Indicates the credit card service that will be used to process the transaction. If this column contains PAYPAL, you can use the Buy Order API to checkout and purchase the item. If this column is empty, you must use another method for checkout.
        /// </summary>
        /// <value>Indicates the credit card service that will be used to process the transaction. If this column contains PAYPAL, you can use the Buy Order API to checkout and purchase the item. If this column is empty, you must use another method for checkout.</value>
        [DataMember(Name = "acceptedPaymentMethods", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "acceptedPaymentMethods")]
        public string AcceptedPaymentMethods { get; set; }
        /// <summary>
        /// Indicates whether the seller accepts returns for the item.
        /// </summary>
        /// <value>Indicates whether the seller accepts returns for the item.</value>
        [DataMember(Name = "returnsAccepted", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "returnsAccepted")]
        public bool? ReturnsAccepted { get; set; }
        /// <summary>
        /// An enumeration value that indicates how a buyer is refunded when an item is returned. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/RefundMethodEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>An enumeration value that indicates how a buyer is refunded when an item is returned. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/RefundMethodEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "refundMethod", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "refundMethod")]
        public string RefundMethod { get; set; }
        /// <summary>
        /// An enumeration value that indicates the alternative methods for a full refund when an item is returned. This column will have data if the seller offers the buyer an item replacement or exchange instead of a monetary refund. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/ReturnMethodEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>An enumeration value that indicates the alternative methods for a full refund when an item is returned. This column will have data if the seller offers the buyer an item replacement or exchange instead of a monetary refund. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/ReturnMethodEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "returnMethod", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "returnMethod")]
        public string ReturnMethod { get; set; }
        /// <summary>
        /// The party responsible for the return shipping costs when an item is returned. Valid Values: BUYER or SELLER Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/ReturnShippingCostPayerEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The party responsible for the return shipping costs when an item is returned. Valid Values: BUYER or SELLER Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/ReturnShippingCostPayerEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "returnShippingCostPayer", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "returnShippingCostPayer")]
        public string ReturnShippingCostPayer { get; set; }
        /// <summary>
        /// The amount of time the buyer has to return the item after the purchase date. This can be the number of years, months, or days depending on returnPeriodUnit. For example, if this value is '30', and the returnPeriodUnit value is 'DAY', the return period is 30 days.
        /// </summary>
        /// <value>The amount of time the buyer has to return the item after the purchase date. This can be the number of years, months, or days depending on returnPeriodUnit. For example, if this value is '30', and the returnPeriodUnit value is 'DAY', the return period is 30 days.</value>
        [DataMember(Name = "returnPeriodValue", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "returnPeriodValue")]
        public int? ReturnPeriodValue { get; set; }
        /// <summary>
        /// An enumeration value that indicates the period of time being used to measure the duration, such as business days or months, or years. See the TimeDurationUnitEnum type for a list of possible time-measuring units. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/TimeDurationUnitEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>An enumeration value that indicates the period of time being used to measure the duration, such as business days or months, or years. See the TimeDurationUnitEnum type for a list of possible time-measuring units. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/TimeDurationUnitEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "returnPeriodUnit", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "returnPeriodUnit")]
        public string ReturnPeriodUnit { get; set; }
        /// <summary>
        /// The restocking fee percentage that the seller has set on the item. Sellers have the option of setting no restocking fee for an item, or they can set the percentage to 10, 15, or 20 percent. For example, if the cost of the item was $100, and the restocking percentage was 20 percent, the buyer would be charged $20 to return that item. This means that instead of receiving a $100 refund, they would received $80 due to the restocking fee. Values Returned: NoRestockingFee, Percent_10, Percent_15, and Percent_20
        /// </summary>
        /// <value>The restocking fee percentage that the seller has set on the item. Sellers have the option of setting no restocking fee for an item, or they can set the percentage to 10, 15, or 20 percent. For example, if the cost of the item was $100, and the restocking percentage was 20 percent, the buyer would be charged $20 to return that item. This means that instead of receiving a $100 refund, they would received $80 due to the restocking fee. Values Returned: NoRestockingFee, Percent_10, Percent_15, and Percent_20</value>
        [DataMember(Name = "restockingFeePercentage", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "restockingFeePercentage")]
        public string RestockingFeePercentage { get; set; }
        /// <summary>
        /// A comma separated list of delivery options for the item, such as SHIP_TO_HOME and SELLER_ARRANGED_LOCAL_PICKUP. This column lets you filter out items that cannot be shipped to the buyer. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/DeliveryOptionsEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>A comma separated list of delivery options for the item, such as SHIP_TO_HOME and SELLER_ARRANGED_LOCAL_PICKUP. This column lets you filter out items that cannot be shipped to the buyer. Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/DeliveryOptionsEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "deliveryOptions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "deliveryOptions")]
        public string DeliveryOptions { get; set; }
        /// <summary>
        /// A pipe (|) separated alphabetical list of the geographic countries and regions where the seller will ship the item. If a region is specified, you will need to subtract any countries and regions returned in the shipToExcludedRegions column to fully understand where the seller will ship. The COUNTRY: list is separated from the REGION: list with a semicolon (;). Format Example: COUNTRY:US|BM|GL|MX|PM;REGION:AFRICA|ASIA|CENTRAL_AMERICA_AND_CARIBBEAN|EUROPE|MIDDLE_EAST|OCEANIA|SOUTH_AMERICA|SOUTHEAST_ASIA; Country Values: The two-letter ISO 3166 standard code of the country. Region Values: AFRICA, AMERICAS, ANTARCTIC, ARCTIC, ASIA, AUSTRALIA, CENTRAL_AMERICA_AND_CARIBBEAN, EUROPE, EURO_UNION, GREATER_CHINA, MIDDLE_EAST, NORTH_AMERICA, OCEANIA, REST_OF_ASIA, SOUTHEAST_ASIA, SOUTH_AMERICA, WORLDWIDE Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>A pipe (|) separated alphabetical list of the geographic countries and regions where the seller will ship the item. If a region is specified, you will need to subtract any countries and regions returned in the shipToExcludedRegions column to fully understand where the seller will ship. The COUNTRY: list is separated from the REGION: list with a semicolon (;). Format Example: COUNTRY:US|BM|GL|MX|PM;REGION:AFRICA|ASIA|CENTRAL_AMERICA_AND_CARIBBEAN|EUROPE|MIDDLE_EAST|OCEANIA|SOUTH_AMERICA|SOUTHEAST_ASIA; Country Values: The two-letter ISO 3166 standard code of the country. Region Values: AFRICA, AMERICAS, ANTARCTIC, ARCTIC, ASIA, AUSTRALIA, CENTRAL_AMERICA_AND_CARIBBEAN, EUROPE, EURO_UNION, GREATER_CHINA, MIDDLE_EAST, NORTH_AMERICA, OCEANIA, REST_OF_ASIA, SOUTHEAST_ASIA, SOUTH_AMERICA, WORLDWIDE Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "shipToIncludedRegions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shipToIncludedRegions")]
        public string ShipToIncludedRegions { get; set; }
        /// <summary>
        /// A pipe (|) separated alphabetical list of the geographic countries and regions where the item cannot be shipped. These countries and regions refine (restrict) the shipToIncludedRegions list. The COUNTRY: list is separated from the REGION: list with a semicolon (;). Format Example: COUNTRY:US|BM|GL|MX|PM;REGION:AFRICA|ASIA|CENTRAL_AMERICA_AND_CARIBBEAN|EUROPE|MIDDLE_EAST|OCEANIA|SOUTH_AMERICA|SOUTHEAST_ASIA; Country Values: The two-letter ISO 3166 standard code of the country. Region Values: AFRICA, AMERICAS, ANTARCTIC, ARCTIC, ASIA, AUSTRALIA, CENTRAL_AMERICA_AND_CARIBBEAN, EUROPE, EURO_UNION, GREATER_CHINA, MIDDLE_EAST, NORTH_AMERICA, OCEANIA, REST_OF_ASIA, SOUTHEAST_ASIA, SOUTH_AMERICA, WORLDWIDE Code so that your app gracefully handles any future changes to this list.
        /// </summary>
        /// <value>A pipe (|) separated alphabetical list of the geographic countries and regions where the item cannot be shipped. These countries and regions refine (restrict) the shipToIncludedRegions list. The COUNTRY: list is separated from the REGION: list with a semicolon (;). Format Example: COUNTRY:US|BM|GL|MX|PM;REGION:AFRICA|ASIA|CENTRAL_AMERICA_AND_CARIBBEAN|EUROPE|MIDDLE_EAST|OCEANIA|SOUTH_AMERICA|SOUTHEAST_ASIA; Country Values: The two-letter ISO 3166 standard code of the country. Region Values: AFRICA, AMERICAS, ANTARCTIC, ARCTIC, ASIA, AUSTRALIA, CENTRAL_AMERICA_AND_CARIBBEAN, EUROPE, EURO_UNION, GREATER_CHINA, MIDDLE_EAST, NORTH_AMERICA, OCEANIA, REST_OF_ASIA, SOUTHEAST_ASIA, SOUTH_AMERICA, WORLDWIDE Code so that your app gracefully handles any future changes to this list.</value>
        [DataMember(Name = "shipToExcludedRegions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shipToExcludedRegions")]
        public string ShipToExcludedRegions { get; set; }
        /// <summary>
        /// The ePID (eBay Product ID of a product from the eBay product catalog) for the item, which has been programmatically determined by eBay. If the seller provided an ePID for the item, the seller's value is returned in the epid column.
        /// </summary>
        /// <value>The ePID (eBay Product ID of a product from the eBay product catalog) for the item, which has been programmatically determined by eBay. If the seller provided an ePID for the item, the seller's value is returned in the epid column.</value>
        [DataMember(Name = "inferredEpid", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "inferredEpid")]
        public string InferredEpid { get; set; }
        /// <summary>
        /// The GTIN (Global Trade Item Number) of the product as defined by http://www.gtin.info, which as been programmatically determined by eBay. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value. If the seller provided a GTIN for the item, the seller's value is returned in the gtin column.
        /// </summary>
        /// <value>The GTIN (Global Trade Item Number) of the product as defined by http://www.gtin.info, which as been programmatically determined by eBay. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value. If the seller provided a GTIN for the item, the seller's value is returned in the gtin column.</value>
        [DataMember(Name = "inferredGtin", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "inferredGtin")]
        public string InferredGtin { get; set; }
        /// <summary>
        /// The name brand for the item, such as Nike or Apple, which has been programmatically determined by eBay. To identify the product, this is always used along with MPN. If the seller provided a brand for the item, the seller's value is returned in the brand column.
        /// </summary>
        /// <value>The name brand for the item, such as Nike or Apple, which has been programmatically determined by eBay. To identify the product, this is always used along with MPN. If the seller provided a brand for the item, the seller's value is returned in the brand column.</value>
        [DataMember(Name = "inferredBrand", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "inferredBrand")]
        public string InferredBrand { get; set; }
        /// <summary>
        /// The MPN (Manufacturer's Part Number) for the item, which has been programmatically determined by eBay. To identify the product, this is always used along with brand. If the seller provided a MPN for the item, the seller's value is returned in the mpn column.
        /// </summary>
        /// <value>The MPN (Manufacturer's Part Number) for the item, which has been programmatically determined by eBay. To identify the product, this is always used along with brand. If the seller provided a MPN for the item, the seller's value is returned in the mpn column.</value>
        [DataMember(Name = "inferredMpn", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "inferredMpn")]
        public string InferredMpn { get; set; }
        /// <summary>
        /// A semicolon separated list of the name/value pairs for the aspects of the item, which are BASE64 encoded. These aspects have been programmatically determined by eBay. If the seller provided aspects for the item, the seller's values are returned in the localizedAspects column. The aspect label is separated by a pipe (|), the aspect name and value are separated by a colon (:) and the name/value pairs are separated by a semicolon (;). Example without Label &nbsp;&nbsp; Encoded Format: &nbsp;&nbsp;&nbsp;encodedName:encodedValue;encodedName:encodedValue;encodedName:encodedValue &nbsp;&nbsp; Encoded Example (encoded text shown in orange): &nbsp;&nbsp;&nbsp;U2l6ZQ==:WEw=;Q29sb3I=:UmVk;U2xlZXZlcw==:TG9uZw== &nbsp;&nbsp; Decoded: &nbsp;&nbsp;&nbsp;Size:XL;Color:Red;Sleeves:Long Example with Label &nbsp;&nbsp; Encoded Format: &nbsp;&nbsp;&nbsp;encodedLabel|encodedName:encodedValue;encodedName:encodedValue;encodedLabel| &nbsp;&nbsp; Encoded Example (encoded text shown in orange): &nbsp;&nbsp;&nbsp;UHJvZHVjdCBJZGVudGlmaWVycw==|R1RJTg==:MDE5MDE5ODA2NjYzMw==;QlJBTkQ=:QXBwbGU=;UHJvZHVjdCBLZXkgRmVhdHVyZXM=|TW9kZWw=:aVBob25lIDc= &nbsp;&nbsp; Decoded: &nbsp;&nbsp;&nbsp;Product Identifiers|GTIN:0190198066633;BRAND:Apple;Product Key Features|Model:iPhone 7 Note: The separators ( | : ; ) are not encoded. You must decode each label, name, and value separately. You cannot decode the entire string. For more information, see Encoded Aspects in the Buying Integration Guide.
        /// </summary>
        /// <value>A semicolon separated list of the name/value pairs for the aspects of the item, which are BASE64 encoded. These aspects have been programmatically determined by eBay. If the seller provided aspects for the item, the seller's values are returned in the localizedAspects column. The aspect label is separated by a pipe (|), the aspect name and value are separated by a colon (:) and the name/value pairs are separated by a semicolon (;). Example without Label &nbsp;&nbsp; Encoded Format: &nbsp;&nbsp;&nbsp;encodedName:encodedValue;encodedName:encodedValue;encodedName:encodedValue &nbsp;&nbsp; Encoded Example (encoded text shown in orange): &nbsp;&nbsp;&nbsp;U2l6ZQ==:WEw=;Q29sb3I=:UmVk;U2xlZXZlcw==:TG9uZw== &nbsp;&nbsp; Decoded: &nbsp;&nbsp;&nbsp;Size:XL;Color:Red;Sleeves:Long Example with Label &nbsp;&nbsp; Encoded Format: &nbsp;&nbsp;&nbsp;encodedLabel|encodedName:encodedValue;encodedName:encodedValue;encodedLabel| &nbsp;&nbsp; Encoded Example (encoded text shown in orange): &nbsp;&nbsp;&nbsp;UHJvZHVjdCBJZGVudGlmaWVycw==|R1RJTg==:MDE5MDE5ODA2NjYzMw==;QlJBTkQ=:QXBwbGU=;UHJvZHVjdCBLZXkgRmVhdHVyZXM=|TW9kZWw=:aVBob25lIDc= &nbsp;&nbsp; Decoded: &nbsp;&nbsp;&nbsp;Product Identifiers|GTIN:0190198066633;BRAND:Apple;Product Key Features|Model:iPhone 7 Note: The separators ( | : ; ) are not encoded. You must decode each label, name, and value separately. You cannot decode the entire string. For more information, see Encoded Aspects in the Buying Integration Guide.</value>
        [DataMember(Name = "inferredLocalizedAspects", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "inferredLocalizedAspects")]
        public string InferredLocalizedAspects { get; set; }
        /// <summary>
        /// A pipe separated (|) list of URLs for the additional images of the item. These images are in addition to the primary image, which is returned in the imageUrl column. Note: This column can contain multiple values.
        /// </summary>
        /// <value>A pipe separated (|) list of URLs for the additional images of the item. These images are in addition to the primary image, which is returned in the imageUrl column. Note: This column can contain multiple values.</value>
        [DataMember(Name = "additionalImageUrls", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "additionalImageUrls")]
        public string AdditionalImageUrls { get; set; }
        /// <summary>
        /// The original selling price of the item. This lets you surface a strikethrough price for the item.
        /// </summary>
        /// <value>The original selling price of the item. This lets you surface a strikethrough price for the item.</value>
        [DataMember(Name = "originalPriceValue", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "originalPriceValue")]
        public string OriginalPriceValue { get; set; }
        /// <summary>
        /// The currency of the originalPriceValue of the item and the discountAmount. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/CurrencyCodeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The currency of the originalPriceValue of the item and the discountAmount. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/feed/types/CurrencyCodeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "originalPriceCurrency", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "originalPriceCurrency")]
        public string OriginalPriceCurrency { get; set; }
        /// <summary>
        /// The calculated amount of the discount (originalPriceValue - priceValue). For example, if originalPriceValue is 70 and priceValue is 56, this value would be 14. Note: The currency shown in originalPriceCurrency is used for both discountAmount and originalPriceCurrency.
        /// </summary>
        /// <value>The calculated amount of the discount (originalPriceValue - priceValue). For example, if originalPriceValue is 70 and priceValue is 56, this value would be 14. Note: The currency shown in originalPriceCurrency is used for both discountAmount and originalPriceCurrency.</value>
        [DataMember(Name = "discountAmount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "discountAmount")]
        public string DiscountAmount { get; set; }
        /// <summary>
        /// The calculated discount percentage. For example, if originalPriceValue is 70 and discountAmount is 14, this value will be 20.
        /// </summary>
        /// <value>The calculated discount percentage. For example, if originalPriceValue is 70 and discountAmount is 14, this value will be 20.</value>
        [DataMember(Name = "discountPercentage", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "discountPercentage")]
        public string DiscountPercentage { get; set; }
        /// <summary>
        /// Indicates the European energy efficiency rating (EEK) of the item. This field is returned only if the seller specified the energy efficiency rating. The rating is a set of energy efficiency classes from A to G, where 'A' is the most energy efficient and 'G' is the least efficient. This rating helps buyers choose between various models. To retrieve the manufacturer's specifications for this item, when they are available, use the getItem call in the Browse API. The information is returned in the productFicheWebUrl field.
        /// </summary>
        /// <value>Indicates the European energy efficiency rating (EEK) of the item. This field is returned only if the seller specified the energy efficiency rating. The rating is a set of energy efficiency classes from A to G, where 'A' is the most energy efficient and 'G' is the least efficient. This rating helps buyers choose between various models. To retrieve the manufacturer's specifications for this item, when they are available, use the getItem call in the Browse API. The information is returned in the productFicheWebUrl field.</value>
        [DataMember(Name = "energyEfficiencyClass", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "energyEfficiencyClass")]
        public string EnergyEfficiencyClass { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  BuyingOptions: ").Append(BuyingOptions).Append("\n");
            sb.Append("  SellerUsername: ").Append(SellerUsername).Append("\n");
            sb.Append("  SellerFeedbackPercentage: ").Append(SellerFeedbackPercentage).Append("\n");
            sb.Append("  SellerFeedbackScore: ").Append(SellerFeedbackScore).Append("\n");
            sb.Append("  Gtin: ").Append(Gtin).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Mpn: ").Append(Mpn).Append("\n");
            sb.Append("  Epid: ").Append(Epid).Append("\n");
            sb.Append("  ConditionId: ").Append(ConditionId).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  PriceValue: ").Append(PriceValue).Append("\n");
            sb.Append("  PriceCurrency: ").Append(PriceCurrency).Append("\n");
            sb.Append("  PrimaryItemGroupId: ").Append(PrimaryItemGroupId).Append("\n");
            sb.Append("  PrimaryItemGroupType: ").Append(PrimaryItemGroupType).Append("\n");
            sb.Append("  ItemEndDate: ").Append(ItemEndDate).Append("\n");
            sb.Append("  SellerItemRevision: ").Append(SellerItemRevision).Append("\n");
            sb.Append("  ItemLocationCountry: ").Append(ItemLocationCountry).Append("\n");
            sb.Append("  LocalizedAspects: ").Append(LocalizedAspects).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("  SellerTrustLevel: ").Append(SellerTrustLevel).Append("\n");
            sb.Append("  ImageAlteringProhibited: ").Append(ImageAlteringProhibited).Append("\n");
            sb.Append("  EstimatedAvailableQuantity: ").Append(EstimatedAvailableQuantity).Append("\n");
            sb.Append("  AvailabilityThresholdType: ").Append(AvailabilityThresholdType).Append("\n");
            sb.Append("  AvailabilityThreshold: ").Append(AvailabilityThreshold).Append("\n");
            sb.Append("  AcceptedPaymentMethods: ").Append(AcceptedPaymentMethods).Append("\n");
            sb.Append("  ReturnsAccepted: ").Append(ReturnsAccepted).Append("\n");
            sb.Append("  RefundMethod: ").Append(RefundMethod).Append("\n");
            sb.Append("  ReturnMethod: ").Append(ReturnMethod).Append("\n");
            sb.Append("  ReturnShippingCostPayer: ").Append(ReturnShippingCostPayer).Append("\n");
            sb.Append("  ReturnPeriodValue: ").Append(ReturnPeriodValue).Append("\n");
            sb.Append("  ReturnPeriodUnit: ").Append(ReturnPeriodUnit).Append("\n");
            sb.Append("  RestockingFeePercentage: ").Append(RestockingFeePercentage).Append("\n");
            sb.Append("  DeliveryOptions: ").Append(DeliveryOptions).Append("\n");
            sb.Append("  ShipToIncludedRegions: ").Append(ShipToIncludedRegions).Append("\n");
            sb.Append("  ShipToExcludedRegions: ").Append(ShipToExcludedRegions).Append("\n");
            sb.Append("  InferredEpid: ").Append(InferredEpid).Append("\n");
            sb.Append("  InferredGtin: ").Append(InferredGtin).Append("\n");
            sb.Append("  InferredBrand: ").Append(InferredBrand).Append("\n");
            sb.Append("  InferredMpn: ").Append(InferredMpn).Append("\n");
            sb.Append("  InferredLocalizedAspects: ").Append(InferredLocalizedAspects).Append("\n");
            sb.Append("  AdditionalImageUrls: ").Append(AdditionalImageUrls).Append("\n");
            sb.Append("  OriginalPriceValue: ").Append(OriginalPriceValue).Append("\n");
            sb.Append("  OriginalPriceCurrency: ").Append(OriginalPriceCurrency).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  DiscountPercentage: ").Append(DiscountPercentage).Append("\n");
            sb.Append("  EnergyEfficiencyClass: ").Append(EnergyEfficiencyClass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the array for the fields returned by the <b> getItemDescriptionFeed</b> call. 
    /// </summary>
    [DataContract]
    public class ItemDescriptionResponse
    {
        /// <summary>
        /// The container for the array of items returned by the getItemDescriptionFeed call. The data in the file is tab separated and the first row is the header, which labels the columns and indicates the order of the values for each item. The header labels match the fields that are described in the Response fields section.
        /// </summary>
        /// <value>The container for the array of items returned by the getItemDescriptionFeed call. The data in the file is tab separated and the first row is the header, which labels the columns and indicates the order of the values for each item. The header labels match the fields that are described in the Response fields section.</value>
        [DataMember(Name = "itemDescriptions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemDescriptions")]
        public ItemDescription[] ItemDescriptions { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ItemDescriptions: ").Append(ItemDescriptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
}
namespace eBayApi.Buy.Marketing
{
    public class MarketingClient : Api.Client.ApiBase
    {
        public MarketingClient(Api.Client.ApiClient apiClient = null) : base(apiClient) { }
        public MarketingClient(string basePath) : base(basePath) { }
        /// <summary>
        ///  This call returns products that were also bought when shoppers bought the product specified in the request. Showing 'also bought' products inspires up-selling and cross-selling. You specify the product by one of the following. epid (eBay Product Id) gtin (Global Trade Item Number) brand (brand name such as Nike) plus mpn (Manufacturer's Part Number) Restrictions For a list of supported sites and other restrictions, see API Restrictions. Maximum: A maximum of 12 products are returned. The call will return up to 12 products, but it can be less than 12. If the number of products found is less than 12, the call will return all of the products matching the criteria.
        /// </summary>
        /// <param name="brand">The brand of the product. Restriction: This must be used along with mpn. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param> 
        /// <param name="epid">The eBay product identifier of a product. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param> 
        /// <param name="gtin">The unique Global Trade Item Number of the item as defined by http://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number value. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param> 
        /// <param name="mpn">The manufacturer part number of the product. Restriction: This must be used along with brand. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param> 
        /// <returns>Models.BestSellingProductResponse</returns>
        public Models.BestSellingProductResponse GetAlsoBoughtByProduct(string brand = null, string epid = null, string gtin = null, string mpn = null)
        {


            var path = "/merchandised_product/get_also_bought_products";
            path = path.Replace("{format}", "json");


            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (brand != null) queryParams.Add("brand", ApiClient.ParameterToString(brand)); // query parameter
            if (epid != null) queryParams.Add("epid", ApiClient.ParameterToString(epid)); // query parameter
            if (gtin != null) queryParams.Add("gtin", ApiClient.ParameterToString(gtin)); // query parameter
            if (mpn != null) queryParams.Add("mpn", ApiClient.ParameterToString(mpn)); // query parameter




            // authentication setting, if any
            var authSettings = new String[] { "Client Credentials" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetAlsoBoughtByProduct: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetAlsoBoughtByProduct: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.BestSellingProductResponse)ApiClient.Deserialize(response.Content, typeof(Models.BestSellingProductResponse), response.Headers);
        }
        /// <summary>
        ///  This call returns products that were also viewed when shoppers viewed the product specified in the request. Showing 'also viewed' products encourages up-selling and cross-selling. You specify the product by one of the following. epid (eBay Product Id) gtin (Global Trade Item Number) brand (brand name such as Nike) plus mpn (Manufacturer's Part Number) Restrictions For a list of supported sites and other restrictions, see API Restrictions. Maximum: A maximum of 12 products are returned. The call will return up to 12 products, but it can be less than 12. If the number of products found is less than 12, the call will return all of the products matching the criteria.
        /// </summary>
        /// <param name="brand">The brand of the product. Restriction: This must be used along with mpn. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param> 
        /// <param name="epid">The eBay product identifier of a product. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param> 
        /// <param name="gtin">The unique Global Trade Item Number of the item as defined by http://www.gtin.info. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number value. Required: You must specify one epid, or one gtin, or one brand plus mpn pair.</param> 
        /// <param name="mpn">The manufacturer part number of the product. Restriction: This must be used along with brand.</param> 
        /// <returns>Models.BestSellingProductResponse</returns>
        public Models.BestSellingProductResponse GetAlsoViewedByProduct(string brand = null, string epid = null, string gtin = null, string mpn = null)
        {


            var path = "/merchandised_product/get_also_viewed_products";
            path = path.Replace("{format}", "json");


            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (brand != null) queryParams.Add("brand", ApiClient.ParameterToString(brand)); // query parameter
            if (epid != null) queryParams.Add("epid", ApiClient.ParameterToString(epid)); // query parameter
            if (gtin != null) queryParams.Add("gtin", ApiClient.ParameterToString(gtin)); // query parameter
            if (mpn != null) queryParams.Add("mpn", ApiClient.ParameterToString(mpn)); // query parameter




            // authentication setting, if any
            var authSettings = new String[] { "Client Credentials" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetAlsoViewedByProduct: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetAlsoViewedByProduct: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.BestSellingProductResponse)ApiClient.Deserialize(response.Content, typeof(Models.BestSellingProductResponse), response.Headers);
        }
        /// <summary>
        ///  This call returns an array of products based on the category and metric specified. This includes details of the product, such as the eBay product Id (EPID), title, and user reviews and ratings for the product. You can use the epid returned by this call in the Browse API search call to retrieve items for this product. Restrictions For a list of supported sites and other restrictions, see API Restrictions.
        /// </summary>
        /// <param name="aspectFilter">The aspect name/value pairs used to further refine product results. For example: &nbsp;&nbsp;&nbsp;/buy/marketing/v1_beta/merchandised_product?category_id=31388&amp;metric_name=BEST_SELLING&amp;aspect_filter=Brand:Canon You can use the Browse API search call with the fieldgroups=ASPECT_REFINEMENTS field to return the aspects of a product. For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/marketing/types/MarketingAspectFilter.html</param> 
        /// <param name="categoryId">This query parameter limits the products returned to a specific eBay category. The list of eBay category Ids is not published and category Ids are not all the same across all the eBay maketplace. You can use the following techniques to find a category by site. Use the Category Changes page. Use the Taxonomy API. For details see Categories for Buy API Calls. Use the Browse API and submit the following call to get the dominantCategoryId for an item. /buy/browse/v1/item_summary/search?q=keyword&amp;fieldgroups=ASPECT_REFINEMENTS Maximum: 1 Required: 1</param> 
        /// <param name="limit">This value specifies the maximum number of products to return in a result set. Note: Maximum value means the call will return up to that many products per set, but it can be less than this value. If the number of products found is less than this value, the call will return all of the products matching the criteria. Default: 8 Maximum: 100</param> 
        /// <param name="metricName">This value filters the result set by the specified metric. Only products in this metric are returned. Currently, the only metric supported is BEST_SELLING. Default: BEST_SELLING Maximum: 1 Required: 1</param> 
        /// <returns>Models.BestSellingProductResponse</returns>
        public Models.BestSellingProductResponse GetMerchandisedProducts(string categoryId, string metricName, string aspectFilter = null, string limit = null)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'categoryId' when calling GetMerchandisedProducts");
            // verify the required parameter 'metricName' is set
            if (metricName == null) throw new Api.Client.ApiException(400, "Missing required parameter 'metricName' when calling GetMerchandisedProducts");

            var path = "/merchandised_product";
            path = path.Replace("{format}", "json");


            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (aspectFilter != null) queryParams.Add("aspect_filter", ApiClient.ParameterToString(aspectFilter)); // query parameter
            if (categoryId != null) queryParams.Add("category_id", ApiClient.ParameterToString(categoryId)); // query parameter
            if (limit != null) queryParams.Add("limit", ApiClient.ParameterToString(limit)); // query parameter
            if (metricName != null) queryParams.Add("metric_name", ApiClient.ParameterToString(metricName)); // query parameter




            // authentication setting, if any
            var authSettings = new String[] { "Client Credentials" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetMerchandisedProducts: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetMerchandisedProducts: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.BestSellingProductResponse)ApiClient.Deserialize(response.Content, typeof(Models.BestSellingProductResponse), response.Headers);
        }
    }
}
namespace eBayApi.Buy.Marketing.Models
{
    /// <summary>
    /// The type that defines the fields that can be returned in an error.
    /// </summary>
    [DataContract]
    public class Error
    {
        /// <summary>
        /// This string value indicates the error category. There are three categories of errors: request errors, application errors, and system errors.
        /// </summary>
        /// <value>This string value indicates the error category. There are three categories of errors: request errors, application errors, and system errors.</value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }
        /// <summary>
        /// The name of the primary system where the error occurred. This is relevant for application errors.
        /// </summary>
        /// <value>The name of the primary system where the error occurred. This is relevant for application errors.</value>
        [DataMember(Name = "domain", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "domain")]
        public string Domain { get; set; }
        /// <summary>
        /// A unique code that identifies the particular error or warning that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms.
        /// </summary>
        /// <value>A unique code that identifies the particular error or warning that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms.</value>
        [DataMember(Name = "errorId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "errorId")]
        public int? ErrorId { get; set; }
        /// <summary>
        /// An array of reference Ids that identify the specific request elements most closely associated to the error or warning, if any.
        /// </summary>
        /// <value>An array of reference Ids that identify the specific request elements most closely associated to the error or warning, if any.</value>
        [DataMember(Name = "inputRefIds", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "inputRefIds")]
        public string[] InputRefIds { get; set; }
        /// <summary>
        /// A detailed description of the condition that caused the error or warning, and information on what to do to correct the problem.
        /// </summary>
        /// <value>A detailed description of the condition that caused the error or warning, and information on what to do to correct the problem.</value>
        [DataMember(Name = "longMessage", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "longMessage")]
        public string LongMessage { get; set; }
        /// <summary>
        /// A description of the condition that caused the error or warning.
        /// </summary>
        /// <value>A description of the condition that caused the error or warning.</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }
        /// <summary>
        /// An array of reference Ids that identify the specific response elements most closely associated to the error or warning, if any.
        /// </summary>
        /// <value>An array of reference Ids that identify the specific response elements most closely associated to the error or warning, if any.</value>
        [DataMember(Name = "outputRefIds", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "outputRefIds")]
        public string[] OutputRefIds { get; set; }
        /// <summary>
        /// An array of warning and error messages that return one or more variables contextual information about the error or warning. This is often the field or value that triggered the error or warning.
        /// </summary>
        /// <value>An array of warning and error messages that return one or more variables contextual information about the error or warning. This is often the field or value that triggered the error or warning.</value>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "parameters")]
        public ErrorParameter[] Parameters { get; set; }
        /// <summary>
        /// The name of the subdomain in which the error or warning occurred.
        /// </summary>
        /// <value>The name of the subdomain in which the error or warning occurred.</value>
        [DataMember(Name = "subdomain", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "subdomain")]
        public string Subdomain { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  ErrorId: ").Append(ErrorId).Append("\n");
            sb.Append("  InputRefIds: ").Append(InputRefIds).Append("\n");
            sb.Append("  LongMessage: ").Append(LongMessage).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  OutputRefIds: ").Append(OutputRefIds).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Subdomain: ").Append(Subdomain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// An array of name/value pairs that provide more details regarding error condition.
    /// </summary>
    [DataContract]
    public class ErrorParameter
    {
        /// <summary>
        /// This is the name of input field that caused an issue with the call request.
        /// </summary>
        /// <value>This is the name of input field that caused an issue with the call request.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        /// <summary>
        /// This is the actual value that was passed in for the element specified in the name field.
        /// </summary>
        /// <value>This is the actual value that was passed in for the element specified in the name field.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type defines the monetary value of an amount and the currency used.
    /// </summary>
    [DataContract]
    public class Amount
    {
        /// <summary>
        /// A three-letter ISO 4217 code that indicates the currency of the amount in the value field. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/marketing/types/CurrencyCodeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>A three-letter ISO 4217 code that indicates the currency of the amount in the value field. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/marketing/types/CurrencyCodeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "currency")]
        public string Currency { get; set; }
        /// <summary>
        /// The monetary amount, in the currency specified by the currency field.
        /// </summary>
        /// <value>The monetary amount, in the currency specified by the currency field.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the best selling product information.
    /// </summary>
    [DataContract]
    public class BestSellingProductResponse
    {
        /// <summary>
        /// An array of containers for the products.
        /// </summary>
        /// <value>An array of containers for the products.</value>
        [DataMember(Name = "merchandisedProducts", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "merchandisedProducts")]
        public MerchandisedProduct[] MerchandisedProducts { get; set; }
        /// <summary>
        /// The container with all the warnings for the input request.
        /// </summary>
        /// <value>The container with all the warnings for the input request.</value>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "warnings")]
        public Error[] Warnings { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  MerchandisedProducts: ").Append(MerchandisedProducts).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// Type the defines the details of an image, such as size and URL. Currently only <b> imageUrl</b> is getting populated. The <b> height</b> and <b> width</b> were added for future use.
    /// </summary>
    [DataContract]
    public class Image
    {
        /// <summary>
        /// Reserved for future use.
        /// </summary>
        /// <value>Reserved for future use.</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "height")]
        public int? Height { get; set; }
        /// <summary>
        /// The URL of the image.
        /// </summary>
        /// <value>The URL of the image.</value>
        [DataMember(Name = "imageUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "imageUrl")]
        public string ImageUrl { get; set; }
        /// <summary>
        /// Reserved for future use.
        /// </summary>
        /// <value>Reserved for future use.</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "width")]
        public int? Width { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for details about the product, such as condition and estimated start price.
    /// </summary>
    [DataContract]
    public class MarketPriceDetail
    {
        /// <summary>
        /// The name for the condition of the product. For example: NEW
        /// </summary>
        /// <value>The name for the condition of the product. For example: NEW</value>
        [DataMember(Name = "conditionGroup", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "conditionGroup")]
        public string ConditionGroup { get; set; }
        /// <summary>
        /// An array of condition identifiers for the product.
        /// </summary>
        /// <value>An array of condition identifiers for the product.</value>
        [DataMember(Name = "conditionIds", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "conditionIds")]
        public string[] ConditionIds { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "estimatedStartPrice", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "estimatedStartPrice")]
        public Amount EstimatedStartPrice { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ConditionGroup: ").Append(ConditionGroup).Append("\n");
            sb.Append("  ConditionIds: ").Append(ConditionIds).Append("\n");
            sb.Append("  EstimatedStartPrice: ").Append(EstimatedStartPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for product information, including price, condition, ratings, etc.
    /// </summary>
    [DataContract]
    public class MerchandisedProduct
    {
        /// <summary>
        /// The average rating for the product based on eBay user ratings.
        /// </summary>
        /// <value>The average rating for the product based on eBay user ratings.</value>
        [DataMember(Name = "averageRating", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "averageRating")]
        public string AverageRating { get; set; }
        /// <summary>
        /// The eBay product identifier of a product from the eBay product catalog. You can use this value in the Browse API search call to retrieve items for this product.
        /// </summary>
        /// <value>The eBay product identifier of a product from the eBay product catalog. You can use this value in the Browse API search call to retrieve items for this product.</value>
        [DataMember(Name = "epid", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "epid")]
        public string Epid { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "image")]
        public Image Image { get; set; }
        /// <summary>
        /// An array of containers for the product market price details, such as condition and market price.
        /// </summary>
        /// <value>An array of containers for the product market price details, such as condition and market price.</value>
        [DataMember(Name = "marketPriceDetails", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "marketPriceDetails")]
        public MarketPriceDetail[] MarketPriceDetails { get; set; }
        /// <summary>
        /// An array of containers for ratings of the product aspects, such as &quot;Is it a good value&quot;.
        /// </summary>
        /// <value>An array of containers for ratings of the product aspects, such as &quot;Is it a good value&quot;.</value>
        [DataMember(Name = "ratingAspects", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "ratingAspects")]
        public RatingAspect[] RatingAspects { get; set; }
        /// <summary>
        /// The total number of eBay users that rated the product.
        /// </summary>
        /// <value>The total number of eBay users that rated the product.</value>
        [DataMember(Name = "ratingCount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "ratingCount")]
        public int? RatingCount { get; set; }
        /// <summary>
        /// The total number of eBay users that wrote a review for the product.
        /// </summary>
        /// <value>The total number of eBay users that wrote a review for the product.</value>
        [DataMember(Name = "reviewCount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "reviewCount")]
        public int? ReviewCount { get; set; }
        /// <summary>
        /// The title of the product.
        /// </summary>
        /// <value>The title of the product.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AverageRating: ").Append(AverageRating).Append("\n");
            sb.Append("  Epid: ").Append(Epid).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  MarketPriceDetails: ").Append(MarketPriceDetails).Append("\n");
            sb.Append("  RatingAspects: ").Append(RatingAspects).Append("\n");
            sb.Append("  RatingCount: ").Append(RatingCount).Append("\n");
            sb.Append("  ReviewCount: ").Append(ReviewCount).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the fields for the product aspect ratings.
    /// </summary>
    [DataContract]
    public class RatingAspect
    {
        /// <summary>
        /// The number of eBay users that rated the product on this aspect.
        /// </summary>
        /// <value>The number of eBay users that rated the product on this aspect.</value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "count")]
        public int? Count { get; set; }
        /// <summary>
        /// The name of the rating aspect. Camping tent examples: Is it lightweight? or Is it easy to set up?
        /// </summary>
        /// <value>The name of the rating aspect. Camping tent examples: Is it lightweight? or Is it easy to set up?</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        /// <summary>
        /// The answer or value of the rating aspect. Camping tent examples: Lightweight or Easy to set up
        /// </summary>
        /// <value>The answer or value of the rating aspect. Camping tent examples: Lightweight or Easy to set up</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        /// <summary>
        /// The container for the details of the aspect rating. The details show the aspect rating value, usually TRUE or FALSE and the user count and percentage.
        /// </summary>
        /// <value>The container for the details of the aspect rating. The details show the aspect rating value, usually TRUE or FALSE and the user count and percentage.</value>
        [DataMember(Name = "ratingAspectDistributions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "ratingAspectDistributions")]
        public RatingAspectDistribution[] RatingAspectDistributions { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RatingAspectDistributions: ").Append(RatingAspectDistributions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// The type that defines the field for the aspect rating details, such as the aspect rating value, usually TRUE or FALSE and the user count and percentage.
    /// </summary>
    [DataContract]
    public class RatingAspectDistribution
    {
        /// <summary>
        /// The number of eBay users that choose this rating aspect value.
        /// </summary>
        /// <value>The number of eBay users that choose this rating aspect value.</value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "count")]
        public int? Count { get; set; }
        /// <summary>
        /// The percentage of the aspect rating value. ratingAspectDistributions.percentage = ratingAspectDistributions.count / ratingAspects.count
        /// </summary>
        /// <value>The percentage of the aspect rating value. ratingAspectDistributions.percentage = ratingAspectDistributions.count / ratingAspects.count</value>
        [DataMember(Name = "percentage", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "percentage")]
        public string Percentage { get; set; }
        /// <summary>
        /// The rating aspect. For example: TRUE or FALSE
        /// </summary>
        /// <value>The rating aspect. For example: TRUE or FALSE</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
}
namespace eBayApi.Commerce.Catalog
{
    public class CatalogClient : Api.Client.ApiBase
    {
        public CatalogClient(Api.Client.ApiClient apiClient = null) : base(apiClient) { }
        public CatalogClient(string basePath) : base(basePath) { }
        /// <summary>
        ///  When sellers are unable to identify an eBay catalog product on which to base their item listing, this call enables you to request that eBay update an existing product record or create a new product record that will successfully match the seller's inventory item.Note: This call is currently supported only in the eBay Sandbox environment (https://api.sandbox.ebay.com).
        /// </summary>
        /// <param name="xEBAYCMARKETPLACEID">Use this header to identify the authenticated user's business context. This header is currently limited to EBAY_US, EBAY_AU, EBAY_CA, and EBAY_GB values. If not included with your request, the marketplace value defaults to EBAY_US. Note that it does not indicate a language preference or end-user location.</param> 
        /// <param name="acceptLanguage">Use this header to specify the natural language in which the authenticated user desires the response.</param> 
        /// <param name="body">Contains the full details of a specified catalog change request, including the type of request, the reason for a product update request, and the details of the new or updated product being suggested.</param> 
        /// <returns>void</returns>
        public void CreateChangeRequest(string xEBAYCMARKETPLACEID, string acceptLanguage = null, Models.CreateChangeRequestPayload body = null)
        {
            // verify the required parameter 'xEBAYCMARKETPLACEID' is set
            if (xEBAYCMARKETPLACEID == null) throw new Api.Client.ApiException(400, "Missing required parameter 'xEBAYCMARKETPLACEID' when calling CreateChangeRequest");

            var path = "/change_request";
            path = path.Replace("{format}", "json");


            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(body); // http body (model) parameter

            if (xEBAYCMARKETPLACEID != null) headerParams.Add("X-EBAY-C-MARKETPLACE-ID", ApiClient.ParameterToString(xEBAYCMARKETPLACEID)); // header parameter
            if (acceptLanguage != null) headerParams.Add("Accept-Language", ApiClient.ParameterToString(acceptLanguage)); // header parameter



            // authentication setting, if any
            var authSettings = new String[] { "Authorization Code" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling CreateChangeRequest: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling CreateChangeRequest: " + response.ErrorMessage, response.ErrorMessage);

            return;
        }
        /// <summary>
        ///  Use this call to retrieve the contents of a catalog change request based on its unique identifier, change_request_id. The change_request_id value was originally generated by the createChangeRequest call, and is returned by the getChangeRequests call in the changeRequests.changeRequestId field.Note: This call is currently supported only in the eBay Sandbox environment (https://api.sandbox.ebay.com).
        /// </summary>
        /// <param name="xEBAYCMARKETPLACEID">Use this header to identify the authenticated user's business context. This header is currently limited to EBAY_US, EBAY_AU, EBAY_CA, and EBAY_GB values. If not included with your request, the marketplace value defaults to EBAY_US. Note that it does not indicate a language preference or end-user location.</param> 
        /// <param name="acceptLanguage">Use this header to specify the natural language in which the authenticated user desires the response.</param> 
        /// <param name="changeRequestId">The unique identifier of the change request being requested. This value was originally generated by the createChangeRequest call, and is returned by the getChangeRequests call in the changeRequests.changeRequestId field.</param> 
        /// <returns>Models.ChangeRequest</returns>
        public Models.ChangeRequest GetChangeRequest(string xEBAYCMARKETPLACEID, string changeRequestId, string acceptLanguage = null)
        {
            // verify the required parameter 'xEBAYCMARKETPLACEID' is set
            if (xEBAYCMARKETPLACEID == null) throw new Api.Client.ApiException(400, "Missing required parameter 'xEBAYCMARKETPLACEID' when calling GetChangeRequest");
            // verify the required parameter 'changeRequestId' is set
            if (changeRequestId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'changeRequestId' when calling GetChangeRequest");

            var path = "/change_request/{change_request_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "change_request_id" + "}", ApiClient.ParameterToString(changeRequestId));

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;



            if (xEBAYCMARKETPLACEID != null) headerParams.Add("X-EBAY-C-MARKETPLACE-ID", ApiClient.ParameterToString(xEBAYCMARKETPLACEID)); // header parameter
            if (acceptLanguage != null) headerParams.Add("Accept-Language", ApiClient.ParameterToString(acceptLanguage)); // header parameter



            // authentication setting, if any
            var authSettings = new String[] { "Authorization Code" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetChangeRequest: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetChangeRequest: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.ChangeRequest)ApiClient.Deserialize(response.Content, typeof(Models.ChangeRequest), response.Headers);
        }
        /// <summary>
        ///  Use this call to search for and retrieve one or more catalog change requests that were submitted by the authenticated user based on their creation date, processing status, reference type or reference ID.Note: This call is currently supported only in the eBay Sandbox environment (https://api.sandbox.ebay.com).
        /// </summary>
        /// <param name="xEBAYCMARKETPLACEID">Use this header to identify the authenticated user's business context. This header is currently limited to EBAY_US, EBAY_AU, EBAY_CA, and EBAY_GB values. If not included with your request, the marketplace value defaults to EBAY_US. Note that it does not indicate a language preference or end-user location.</param> 
        /// <param name="acceptLanguage">Use this header to specify the natural language in which the authenticated user desires the response.</param> 
        /// <param name="filter">One or more comma-separated criteria for narrowing down the collection of change requests returned by this call. These criteria correspond to specific fields in the response payload. Multiple filter criteria combine to further restrict the results. The available criteria are as follows: creationDate The time period during which qualifying change requests were created (the changeRequests.creationDate field). In the URI, this is expressed as a starting timestamp, with or without an ending timestamp (in brackets). The timestamps are in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. For example: creationDate:[2016-02-21T08:25:43.511Z..] identifies orders created on or after the given timestamp. creationDate:[2016-02-21T08:25:43.511Z..2016-04-21T08:25:43.511Z] identifies orders created between the given timestamps, inclusive. changeRequestStatus The degree to which qualifying change requests have been resolved (the changeRequests.changeRequestStatus field). For example: changeRequestStatus:{SUBMITTED} specifies change requests that have been submitted and are being processed. changeRequestStatus:{UNDER_REVIEW|APPROVED_WITH_MODIFICATIONS} specifies change requests that are being reviewed by eBay, and change requests that have been approved, but eBay has made some modifications such as correcting typographic errors. changeRequestStatus:{REJECTED} specifies change requests that have been rejected by eBay because of a violation. referenceId The identifier of an object of the type specified by the value of the referenceType parameter (the changeRequests.referenceId field). For example, if the value of referenceType is INVENTORY_ITEM, this field should contain the seller's SKU for an inventory item. If you include this without the referenceType parameter, the filter will apply to objects of any reference type with this reference ID, if specified in the change request. For example: referenceId:322120392512 referenceType The type of object that a requested catalog change is intended to support, if specified in the change request (the changeRequests.referenceType field). For example: referenceType:{INVENTORY_ITEM} indicates that the requested change will support the completion of an inventory item, which you can then use to create an offer. referenceType:{LISTING} indicates that the requested change will support the modification of an active product listing. referenceType:{LISTING_DRAFT} indicates that the requested change will support the completion of an offer, which you can then publish as a product listing. For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/catalog/types/FilterField.html</param> 
        /// <param name="limit">The number of change requests to return. This is the result set, a subset of the full collection of change requests that match the filter criteria of this call. Maximum: 200 Default: 50</param> 
        /// <param name="offset">The first change request to return based on its position in the returned collection of change requests. Use this parameter in conjunction with the limit parameter to control the pagination of the output. For example, if offset is set to 10 and limit is set to 10, the call retrieves change requests 11 thru 20 from the resulting collection of change requests. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0. Default: 0 (zero)</param> 
        /// <returns>Models.GetChangeRequestsResponse</returns>
        public Models.GetChangeRequestsResponse GetChangeRequests(string xEBAYCMARKETPLACEID, string acceptLanguage = null, string filter = null, string limit = null, string offset = null)
        {
            // verify the required parameter 'xEBAYCMARKETPLACEID' is set
            if (xEBAYCMARKETPLACEID == null) throw new Api.Client.ApiException(400, "Missing required parameter 'xEBAYCMARKETPLACEID' when calling GetChangeRequests");

            var path = "/change_request";
            path = path.Replace("{format}", "json");


            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (filter != null) queryParams.Add("filter", ApiClient.ParameterToString(filter)); // query parameter
            if (limit != null) queryParams.Add("limit", ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) queryParams.Add("offset", ApiClient.ParameterToString(offset)); // query parameter
            if (xEBAYCMARKETPLACEID != null) headerParams.Add("X-EBAY-C-MARKETPLACE-ID", ApiClient.ParameterToString(xEBAYCMARKETPLACEID)); // header parameter
            if (acceptLanguage != null) headerParams.Add("Accept-Language", ApiClient.ParameterToString(acceptLanguage)); // header parameter



            // authentication setting, if any
            var authSettings = new String[] { "Authorization Code" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetChangeRequests: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetChangeRequests: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.GetChangeRequestsResponse)ApiClient.Deserialize(response.Content, typeof(Models.GetChangeRequestsResponse), response.Headers);
        }
        /// <summary>
        ///  This call retrieves details of the catalog product identified by the eBay product identifier (ePID) specified in the request. These details include the product's title and description, aspects and their values, associated images, applicable category IDs, and any recognized identifiers that apply to the product. For a new listing, you can use the search call to identify candidate products on which to base the listing, then use the getProduct call to present the full details of those candidate products to the seller to makea a final selection.
        /// </summary>
        /// <param name="epid">The ePID of the product being requested. This value can be discovered by issuing the search call and examining the value of the productSummaries.epid field for the desired returned product summary.</param> 
        /// <returns>Models.Product</returns>
        public Models.Product GetProduct(string epid)
        {
            // verify the required parameter 'epid' is set
            if (epid == null) throw new Api.Client.ApiException(400, "Missing required parameter 'epid' when calling GetProduct");

            var path = "/product/{epid}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "epid" + "}", ApiClient.ParameterToString(epid));

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;







            // authentication setting, if any
            var authSettings = new String[] { "Authorization Code" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetProduct: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetProduct: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.Product)ApiClient.Deserialize(response.Content, typeof(Models.Product), response.Headers);
        }
        /// <summary>
        ///  This call retrieves an array of all supported aspects, aspect constraints, and aspect values for the specified catalog product and its associated or suggested categories, as well as the values currently associated with that product. The array is a union (with duplicates removed) of all returned aspects.Note: This call is currently supported only in the eBay Sandbox environment (https://api.sandbox.ebay.com). After using the search and getProduct calls to find a catalog product that matches a seller's inventory item, you may discover a matching product, but determine that one or more product details are missing or inaccurate. You can propose updates to the product's aspects and aspect values for the catalog by taking the following steps: Use the Taxonomy API's category_tree calls to discover the appropriate category or categories for the seller's inventory item. See Finding categories for a listing or promotion. Use getProductMetadata to determine the aspects of your selected categories and the values of those aspects that should be added to the aspects and values already associated with your product. Use the createChangeRequest call to to submit a change request to update the product in the eBay catalog for your seller's marketplace.Note: The X-EBAY-C-MARKETPLACE-ID request header is required to identify the user's business context. The eBay Product Identifier (ePID) for a catalog product is also required and is specified through the epid query parameter.
        /// </summary>
        /// <param name="acceptLanguage">This request header sets the natural language that will be provided in the field values of the response payload. Supported values for this header can be found in the Marketplace ID and language header values table.</param> 
        /// <param name="epid">The unique eBay product identifier of the catalog product that you want to update. The supported and applied aspects, constraints, and values for this eBay catalog product are returned.</param> 
        /// <param name="otherApplicableCategoryIds">Use only if you are also including the primary_category_id parameter in the request. Provide one or more comma-separated category IDs in this parameter. Sellers can use other_applicable_category_ids to retrieve information about the specified categories' associated aspects, constraints, and values, along with the same information for the category specified in the primary_category_id parameter, for the seller to assess, select, and populate for submission with the createChangeRequest call. eBay category IDs are returned by the Taxonomy API's category_tree calls.</param> 
        /// <param name="primaryCategoryId">Use only if the seller believes this product is associated with the wrong primary category. Use this parameter to submit the unique identifier of the primary category that the seller wants to use instead. This call retrieves information about the specified category's associated aspects, constraints, and values for the seller to assess, select, and populate for submission with the Catalog API's createChangeRequest call. If you exclude this parameter from your request, this call retrieves information about the aspects, constraints, and values of the specified product's current primary category and other applicable categories. If you include this parameter in your request, this call does not return any information about the specified product's current primary or other applicable categories, but only about the specified category. To retrieve information about any other categories, you must specify them with the other_applicable_category_ids parameter.eBay category IDs are returned by the Taxonomy API's category_tree calls.</param> 
        /// <param name="xEBAYCMARKETPLACEID">Use this header to specify the eBay marketplace identifier. Supported values for this header can be found in the MarketplaceIdEnum type definition.</param> 
        /// <returns>Models.ProductMetadata</returns>
        public Models.ProductMetadata GetProductMetadata(string xEBAYCMARKETPLACEID, string epid, string acceptLanguage = null, string otherApplicableCategoryIds = null, string primaryCategoryId = null)
        {
            // verify the required parameter 'epid' is set
            if (epid == null) throw new Api.Client.ApiException(400, "Missing required parameter 'epid' when calling GetProductMetadata");
            // verify the required parameter 'xEBAYCMARKETPLACEID' is set
            if (xEBAYCMARKETPLACEID == null) throw new Api.Client.ApiException(400, "Missing required parameter 'xEBAYCMARKETPLACEID' when calling GetProductMetadata");

            var path = "/get_product_metadata";
            path = path.Replace("{format}", "json");


            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (epid != null) queryParams.Add("epid", ApiClient.ParameterToString(epid)); // query parameter
            if (otherApplicableCategoryIds != null) queryParams.Add("other_applicable_category_ids", ApiClient.ParameterToString(otherApplicableCategoryIds)); // query parameter
            if (primaryCategoryId != null) queryParams.Add("primary_category_id", ApiClient.ParameterToString(primaryCategoryId)); // query parameter
            if (acceptLanguage != null) headerParams.Add("Accept-Language", ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (xEBAYCMARKETPLACEID != null) headerParams.Add("X-EBAY-C-MARKETPLACE-ID", ApiClient.ParameterToString(xEBAYCMARKETPLACEID)); // header parameter



            // authentication setting, if any
            var authSettings = new String[] { "Client Credentials" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetProductMetadata: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetProductMetadata: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.ProductMetadata)ApiClient.Deserialize(response.Content, typeof(Models.ProductMetadata), response.Headers);
        }
        /// <summary>
        ///  This call retrieves an array of all supported aspects, aspect constraints, and aspect values for the specified eBay categories. The array is a union (with duplicates removed) of all returned aspects.Note: This call is currently supported only in the eBay Sandbox environment (https://api.sandbox.ebay.com). After using the search and getProduct calls to find a catalog product that matches a seller's inventory item, you may determine that a matching product does not exist in the eBay catalog. You can propose a new product for the catalog by taking the following steps: Use the Taxonomy API's category_tree calls to discover the appropriate category or categories for the seller's inventory item. See Finding categories for a listing or promotion. Use getProductMetadataForCategories to determine the aspects of your selected categories that should be associated with your new product. Use the createChangeRequest call to to submit a change request to add the new product to the eBay catalog for your seller's marketplace.Note: The X-EBAY-C-MARKETPLACE-ID request header is required to identify the user's business context. At least one eBay category ID is required and is specified through the primary_category_id query parameter.
        /// </summary>
        /// <param name="acceptLanguage">This request header sets the natural language that will be provided in the field values of the response payload. Supported values for this header can be found in the Marketplace ID and language header values table.</param> 
        /// <param name="otherApplicableCategoryIds">A string of comma-separated category IDs. if sellers want to specify more than the primary category under which to offer a product, they can use this parameter to retrieve the aspects associated with all of the additional specified categories. eBay category IDs are returned by the Taxonomy API's category_tree calls.</param> 
        /// <param name="primaryCategoryId">The unique identifier of the primary eBay category for which you will retrieve product aspects. eBay category IDs are returned by the Taxonomy API's category_tree calls.</param> 
        /// <param name="xEBAYCMARKETPLACEID">Use this header to specify the eBay marketplace identifier. Supported values for this header can be found under Supported marketplaces on the Catalog API Overview page.</param> 
        /// <returns>Models.ProductMetadataForCategories</returns>
        public Models.ProductMetadataForCategories GetProductMetadataForCategories(string xEBAYCMARKETPLACEID, string primaryCategoryId, string acceptLanguage = null, string otherApplicableCategoryIds = null)
        {
            // verify the required parameter 'primaryCategoryId' is set
            if (primaryCategoryId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'primaryCategoryId' when calling GetProductMetadataForCategories");
            // verify the required parameter 'xEBAYCMARKETPLACEID' is set
            if (xEBAYCMARKETPLACEID == null) throw new Api.Client.ApiException(400, "Missing required parameter 'xEBAYCMARKETPLACEID' when calling GetProductMetadataForCategories");

            var path = "/get_product_metadata_for_categories";
            path = path.Replace("{format}", "json");


            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (otherApplicableCategoryIds != null) queryParams.Add("other_applicable_category_ids", ApiClient.ParameterToString(otherApplicableCategoryIds)); // query parameter
            if (primaryCategoryId != null) queryParams.Add("primary_category_id", ApiClient.ParameterToString(primaryCategoryId)); // query parameter
            if (acceptLanguage != null) headerParams.Add("Accept-Language", ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (xEBAYCMARKETPLACEID != null) headerParams.Add("X-EBAY-C-MARKETPLACE-ID", ApiClient.ParameterToString(xEBAYCMARKETPLACEID)); // header parameter



            // authentication setting, if any
            var authSettings = new String[] { "Client Credentials" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetProductMetadataForCategories: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetProductMetadataForCategories: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.ProductMetadataForCategories)ApiClient.Deserialize(response.Content, typeof(Models.ProductMetadataForCategories), response.Headers);
        }
        /// <summary>
        ///  This call searches for and retrieves summaries of one or more products in the eBay catalog that match the search criteria provided by a seller. The seller can use the summaries to select the product in the eBay catalog that corresponds to the item that the seller wants to offer for sale. When a corresponding product is found and adopted by the seller, eBay will use the product information to populate the item listing. The criteria supported by search include keywords, product categories, and category aspects. To see the full details of a selected product, use the getProduct call. In addition to product summaries, this call can also be used to identify refinements, which help you to better pinpoint the product you're looking for. A refinement consists of one or more aspect values and a count of the number of times that each value has been used in previous eBay listings. An aspect is a property (e.g. color or size) of an eBay category, used by sellers to provide details about the items they're listing. The refinement container is returned when you include the fieldGroups query parameter in the request with a value of ASPECT_REFINEMENTS or FULL. Example A seller wants to find a product that is &quot;gray&quot; in color, but doesn't know what term the manufacturer uses for that color. It might be Silver, Brushed Nickel, Pewter, or even Grey. The returned refinement container identifies all aspects that have been used in past listings for products that match your search criteria, along with all of the values those aspects have taken, and the number of times each value was used. You can use this data to present the seller with a histogram of the values of each aspect. The seller can see which color values have been used in the past, and how frequently they have been used, and selects the most likely value or values for their product. You issue the search call again with those values in the aspect_filter parameter to narrow down the collection of products returned by the call. Although all query parameters are optional, this call must include at least the q parameter, or the category_ids, gtin, or mpn parameter with a valid value. If you provide more than one of these parameters, they will be combined with a logical AND to further refine the returned collection of matching products. Note: This call requires that certain special characters in the query parameters be percent-encoded: &nbsp;&nbsp;&nbsp;&nbsp;(space) = %20 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, = %2C &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: = %3A &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ = %5B &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;] = %5D &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ = %7B &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| = %7C &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} = %7D This requirement applies to all query parameter values. However, for readability, call examples and samples in this documentation will not use the encoding. This call returns product summaries rather than the full details of the products. To retrieve the full details of a product, use the getProduct call with an ePID.
        /// </summary>
        /// <param name="aspectFilter">An eBay category and one or more aspects of that category, with the values that can be used to narrow down the collection of products returned by this call. Aspects are product attributes that can represent different types of information for different products. Every product has aspects, but different products have different sets of aspects. You can determine appropriate values for the aspects by first submitting this call without this parameter. It will return either the productSummaries.aspects container, the refinement.aspectDistributions container, or both, depending on the value of the fieldgroups parameter in the request. The productSummaries.aspects container provides the category aspects and their values that are associated with each returned product. The refinement.aspectDistributions container provides information about the distribution of values of the set of category aspects associated with the specified categories. In both cases sellers can select from among the returned aspects to use with this parameter. Note: You can also use the Taxonomy API's getItemAspectsForCategory call to retrieve detailed information about aspects and their values that are appropriate for your selected category. The syntax for the aspect_filter parameter is as follows (on several lines for readability; categoryId is required): aspect_filter=categoryId:category_id, aspect1:{valueA|valueB|...}, aspect2:{valueC|valueD|...},... A matching product must be within the specified category, and it must have least one of the values identified for every specified aspect. Note: Aspect names and values are case sensitive. Here is an example of an aspect_filter parameter in which 9355 is the category ID, Color is an aspect of that category, and Black and White are possible values of that aspect (on several lines for readability): GET https://api.ebay.com/commerce/catalog/v1_beta/product_summary/search? aspect_filter=categoryId:9355,Color:{White|Black} Here is the aspect_filter with required URL encoding and a second aspect (on several lines for readability): GET https://api.ebay.com/commerce/catalog/v1_beta/product_summary/search? aspect_filter=categoryId:9355,Color:%7BWhite%7CBlack%7D, Storage%20Capacity:%128GB%7C256GB%7D Note: You cannot use the aspect_filter parameter in the same call with either the gtin parameter or the mpn parameter. For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/catalog/types/AspectFilter.html</param> 
        /// <param name="categoryIds">Important: Currently, only the first category_id value is accepted. One or more comma-separated category identifiers for narrowing down the collection of products returned by this call. Note: This parameter requires a valid category ID value. You can use the Taxonomy API's getCategorySuggestions call to retrieve appropriate category IDs for your product based on keywords. The syntax for this parameter is as follows: category_ids=category_id1,category_id2,... Here is an example of a call with the category_ids parameter: GET https://api.ebay.com/commerce/catalog/v1_beta/product_summary/search? category_ids=178893 Note: Although all query parameters are optional, this call must include at least the q parameter, or the category_ids, gtin, or mpn parameter with a valid value. If you provide only the category_ids parameter, you cannot specify a top-level (L1) category.</param> 
        /// <param name="fieldgroups">The type of information to return in the response. Important: This parameter may not produce valid results if you also provide more than one value for the category_ids parameter. It is recommended that you avoid using this combination. Valid Values: ASPECT_REFINEMENTS &mdash; This returns the refinement container, which includes the category aspect and aspect value distributions that apply to the returned products. For example, if you searched for Ford Mustang, some of the category aspects might be Model Year, Exterior Color, Vehicle Mileage, and so on. Note: Aspects are category specific. FULL &mdash; This returns all the refinement containers and all the matching products. This value overrides the other values, which will be ignored. MATCHING_PRODUCTS &mdash; This returns summaries for all products that match the values you provide for the q and category_ids parameters. This does not affect your use of the ASPECT_REFINEMENTS value, which you can use in the same call.Code so that your app gracefully handles any future changes to this list. Default: MATCHING_PRODUCTS</param> 
        /// <param name="gtin">A string consisting of one or more comma-separated Global Trade Item Numbers (GTINs) that identify products to search for. Currently the GTIN values can include EAN, ISBN, and UPC identifier types. Note: Although all query parameters are optional, this call must include at least the q parameter, or the category_ids, gtin, or mpn parameter with a valid value. You cannot use the gtin parameter in the same call with either the q parameter or the aspect_filter parameter.</param> 
        /// <param name="limit">The number of product summaries to return. This is the result set, a subset of the full collection of products that match the search or filter criteria of this call. Maximum: 200 Default: 50</param> 
        /// <param name="mpn">A string consisting of one or more comma-separated Manufacturer Part Numbers (MPNs) that identify products to search for. This call will return all products that have one of the specified MPNs. MPNs are defined by manufacturers for their own products, and are therefore certain to be unique only within a given brand. However, many MPNs do turn out to be globally unique. Note: Although all query parameters are optional, this call must include at least the q parameter, or the category_ids, gtin, or mpn parameter with a valid value. You cannot use the mpn parameter in the same call with either the q parameter or the aspect_filter parameter.</param> 
        /// <param name="offset">This parameter is reserved for internal or future use.</param> 
        /// <param name="q">A string consisting of one or more keywords to use to search for products in the eBay catalog. Note: This call searches the following product record fields: title, description, brand, and aspects.localizedName, which do not include product IDs. Wildcard characters (e.g. *) are not allowed. The keywords are handled as follows: If the keywords are separated by a comma (e.g. iPhone,256GB), the query returns products that have iPhone AND 256GB. If the keywords are separated by a space (e.g. &quot;iPhone&nbsp;ipad&quot; or &quot;iPhone,&nbsp;ipad&quot;), the query ignores any commas and returns products that have iPhone OR iPad.Note: Although all query parameters are optional, this call must include at least the q parameter, or the category_ids, gtin, or mpn parameter with a valid value. You cannot use the q parameter in the same call with either the gtin parameter or the mpn parameter.</param> 
        /// <returns>Models.ProductSearchResponse</returns>
        public Models.ProductSearchResponse Search(string aspectFilter = null, string categoryIds = null, string fieldgroups = null, string gtin = null, string limit = null, string mpn = null, string offset = null, string q = null)
        {


            var path = "/product_summary/search";
            path = path.Replace("{format}", "json");


            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (aspectFilter != null) queryParams.Add("aspect_filter", ApiClient.ParameterToString(aspectFilter)); // query parameter
            if (categoryIds != null) queryParams.Add("category_ids", ApiClient.ParameterToString(categoryIds)); // query parameter
            if (fieldgroups != null) queryParams.Add("fieldgroups", ApiClient.ParameterToString(fieldgroups)); // query parameter
            if (gtin != null) queryParams.Add("gtin", ApiClient.ParameterToString(gtin)); // query parameter
            if (limit != null) queryParams.Add("limit", ApiClient.ParameterToString(limit)); // query parameter
            if (mpn != null) queryParams.Add("mpn", ApiClient.ParameterToString(mpn)); // query parameter
            if (offset != null) queryParams.Add("offset", ApiClient.ParameterToString(offset)); // query parameter
            if (q != null) queryParams.Add("q", ApiClient.ParameterToString(q)); // query parameter




            // authentication setting, if any
            var authSettings = new String[] { "Authorization Code" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling Search: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling Search: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.ProductSearchResponse)ApiClient.Deserialize(response.Content, typeof(Models.ProductSearchResponse), response.Headers);
        }
    }
}
namespace eBayApi.Commerce.Catalog.Models
{
    /// <summary>
    /// This type contains the name and values of a category aspect.
    /// </summary>
    [DataContract]
    public class Aspect
    {
        /// <summary>
        /// The localized name of this category aspect.
        /// </summary>
        /// <value>The localized name of this category aspect.</value>
        [DataMember(Name = "localizedName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "localizedName")]
        public string LocalizedName { get; set; }
        /// <summary>
        /// A list of the localized values of this category aspect.
        /// </summary>
        /// <value>A list of the localized values of this category aspect.</value>
        [DataMember(Name = "localizedValues", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "localizedValues")]
        public string[] LocalizedValues { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  LocalizedName: ").Append(LocalizedName).Append("\n");
            sb.Append("  LocalizedValues: ").Append(LocalizedValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about one category aspect that is associated with a specified category.
    /// </summary>
    [DataContract]
    public class AspectDistribution
    {
        /// <summary>
        /// Contains information about one or more values of the category aspect identified by localizedAspectName.
        /// </summary>
        /// <value>Contains information about one or more values of the category aspect identified by localizedAspectName.</value>
        [DataMember(Name = "aspectValueDistributions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectValueDistributions")]
        public AspectValueDistribution[] AspectValueDistributions { get; set; }
        /// <summary>
        /// The localized name of an aspect that is associated with the category identified by dominantCategoryId.
        /// </summary>
        /// <value>The localized name of an aspect that is associated with the category identified by dominantCategoryId.</value>
        [DataMember(Name = "localizedAspectName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "localizedAspectName")]
        public string LocalizedAspectName { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AspectValueDistributions: ").Append(AspectValueDistributions).Append("\n");
            sb.Append("  LocalizedAspectName: ").Append(LocalizedAspectName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about one value of a specified aspect. This value serves as a product refinement.
    /// </summary>
    [DataContract]
    public class AspectValueDistribution
    {
        /// <summary>
        /// The localized value of the category aspect identified by refinement.aspectDistributions.localizedAspectName.
        /// </summary>
        /// <value>The localized value of the category aspect identified by refinement.aspectDistributions.localizedAspectName.</value>
        [DataMember(Name = "localizedAspectValue", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "localizedAspectValue")]
        public string LocalizedAspectValue { get; set; }
        /// <summary>
        /// The number of times the value of localizedAspectValue has been used for eBay product listings. By comparing this quantity to the matchCount for other values of the same aspect, you can present a histogram of the values to sellers, who can use that information to select which aspect value is most appropriate for their product. You can then include the user-selected value in the the search call's aspect_filter parameter to refine your search.
        /// </summary>
        /// <value>The number of times the value of localizedAspectValue has been used for eBay product listings. By comparing this quantity to the matchCount for other values of the same aspect, you can present a histogram of the values to sellers, who can use that information to select which aspect value is most appropriate for their product. You can then include the user-selected value in the the search call's aspect_filter parameter to refine your search.</value>
        [DataMember(Name = "matchCount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "matchCount")]
        public int? MatchCount { get; set; }
        /// <summary>
        /// A HATEOAS reference that further refines the search with this particular localizedAspectValue.
        /// </summary>
        /// <value>A HATEOAS reference that further refines the search with this particular localizedAspectValue.</value>
        [DataMember(Name = "refinementHref", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "refinementHref")]
        public string RefinementHref { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  LocalizedAspectValue: ").Append(LocalizedAspectValue).Append("\n");
            sb.Append("  MatchCount: ").Append(MatchCount).Append("\n");
            sb.Append("  RefinementHref: ").Append(RefinementHref).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains detailed information about each required and recommended aspect associated with an eBay category. These details include the aspect name, supported/possible values, and constraint information.
    /// </summary>
    [DataContract]
    public class CategoryAspect
    {
        /// <summary>
        /// Returned only if this field is populated. This provides information and context for the category aspect. The help text can be presented to the seller to clarify the intended purpose of this aspect, and recommendations for its use. For example, the help text for the Country/Region of Manufacture aspect is: Specifying the country/region of manufacture can help streamline customs clearance.
        /// </summary>
        /// <value>Returned only if this field is populated. This provides information and context for the category aspect. The help text can be presented to the seller to clarify the intended purpose of this aspect, and recommendations for its use. For example, the help text for the Country/Region of Manufacture aspect is: Specifying the country/region of manufacture can help streamline customs clearance.</value>
        [DataMember(Name = "aspectHelpText", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectHelpText")]
        public string AspectHelpText { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "constraint", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "constraint")]
        public ProductAspectConstraint Constraint { get; set; }
        /// <summary>
        /// The name of the category aspect.
        /// </summary>
        /// <value>The name of the category aspect.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        /// <summary>
        /// Not returned if the value of the constraint field is FREE_TEXT and there are no stored values for this aspect. Contains information about one or more supported values for the category identified by the name field), as well as constraint information for those values.
        /// </summary>
        /// <value>Not returned if the value of the constraint field is FREE_TEXT and there are no stored values for this aspect. Contains information about one or more supported values for the category identified by the name field), as well as constraint information for those values.</value>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "values")]
        public CategoryAspectValue[] Values { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AspectHelpText: ").Append(AspectHelpText).Append("\n");
            sb.Append("  Constraint: ").Append(Constraint).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains the supported values for a given category aspect name, as well as constraint information for specified category aspect values for a product.
    /// </summary>
    [DataContract]
    public class CategoryAspectValue
    {
        /// <summary>
        /// A supported value of the corresponding category aspect (shown in the aspects.name field). Every supported value for the category aspect is shown in the aspects.values container.
        /// </summary>
        /// <value>A supported value of the corresponding category aspect (shown in the aspects.name field). Every supported value for the category aspect is shown in the aspects.values container.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }
        /// <summary>
        /// Not returned if the value of the value field can always be selected for this aspect of the specified category (that is, when no constraints apply to using the value). Contains a list of the dependencies that identify when the value of the value field is available for the current aspect. Each dependency specifies the values of another aspect of the same category (a control aspect), for which the current value of the current aspect can also be selected by the seller. Example: A shirt is available in three sizes and three colors, but only the Small and Medium sizes come in Green. Thus for the Color aspect, the value Green is constrained by its dependency on Size (the control aspect). Only when the Size aspect value is Small or Medium, can the Color aspect value of Green be selected by the seller.
        /// </summary>
        /// <value>Not returned if the value of the value field can always be selected for this aspect of the specified category (that is, when no constraints apply to using the value). Contains a list of the dependencies that identify when the value of the value field is available for the current aspect. Each dependency specifies the values of another aspect of the same category (a control aspect), for which the current value of the current aspect can also be selected by the seller. Example: A shirt is available in three sizes and three colors, but only the Small and Medium sizes come in Green. Thus for the Color aspect, the value Green is constrained by its dependency on Size (the control aspect). Only when the Size aspect value is Small or Medium, can the Color aspect value of Green be selected by the seller.</value>
        [DataMember(Name = "valueConstraints", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "valueConstraints")]
        public ValueConstraint[] ValueConstraints { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueConstraints: ").Append(ValueConstraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains the full details of a specified catalog change request, including the original payload of the <b>createChangeRequest</b> call, processing status and key dates, and resolution details.
    /// </summary>
    [DataContract]
    public class ChangeRequest
    {
        /// <summary>
        /// The unique identifier of this change request. This value was originally generated by the createChangeRequest call and returned in the location code of that call's HTTP response header.
        /// </summary>
        /// <value>The unique identifier of this change request. This value was originally generated by the createChangeRequest call and returned in the location code of that call's HTTP response header.</value>
        [DataMember(Name = "changeRequestId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "changeRequestId")]
        public string ChangeRequestId { get; set; }
        /// <summary>
        /// The current processing status of this change request. If the value of this field is APPROVED_WITH_MODIFICATIONS, the change request has been approved with one or more modifications applied by eBay. Check the processResolution.corrections response object for details about the modifications. If the value of this field is REJECTED, the change request has been rejected for violating eBay standards or for conflicting with an existing product record. Check the processResolution.violations response object for details about the rejection. See the ChangeRequestStatus type for available values and details. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ChangeRequestStatus.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The current processing status of this change request. If the value of this field is APPROVED_WITH_MODIFICATIONS, the change request has been approved with one or more modifications applied by eBay. Check the processResolution.corrections response object for details about the modifications. If the value of this field is REJECTED, the change request has been rejected for violating eBay standards or for conflicting with an existing product record. Check the processResolution.violations response object for details about the rejection. See the ChangeRequestStatus type for available values and details. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ChangeRequestStatus.html'>eBay API documentation</a></value>
        [DataMember(Name = "changeRequestStatus", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "changeRequestStatus")]
        public string ChangeRequestStatus { get; set; }
        /// <summary>
        /// The type of catalog modification being requested by this change request. Available values: PRODUCT_CREATION &mdash; Change request to create a new product PRODUCT_UPDATE &mdash; Change request to update an existing product For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ChangeRequestType.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The type of catalog modification being requested by this change request. Available values: PRODUCT_CREATION &mdash; Change request to create a new product PRODUCT_UPDATE &mdash; Change request to update an existing product For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ChangeRequestType.html'>eBay API documentation</a></value>
        [DataMember(Name = "changeRequestType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "changeRequestType")]
        public string ChangeRequestType { get; set; }
        /// <summary>
        /// The creation date of this change request.
        /// </summary>
        /// <value>The creation date of this change request.</value>
        [DataMember(Name = "creationDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "creationDate")]
        public string CreationDate { get; set; }
        /// <summary>
        /// eBay's estimate of the completion date of this change request.
        /// </summary>
        /// <value>eBay's estimate of the completion date of this change request.</value>
        [DataMember(Name = "expectedCompletionDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "expectedCompletionDate")]
        public string ExpectedCompletionDate { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "processResolution", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "processResolution")]
        public ProcessResolution ProcessResolution { get; set; }
        /// <summary>
        /// A text description and explanation of the status indicated by the changeRequestStatus field.
        /// </summary>
        /// <value>A text description and explanation of the status indicated by the changeRequestStatus field.</value>
        [DataMember(Name = "processStatusMessage", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "processStatusMessage")]
        public string ProcessStatusMessage { get; set; }
        /// <summary>
        /// A text description of why this change request was submitted.
        /// </summary>
        /// <value>A text description of why this change request was submitted.</value>
        [DataMember(Name = "reasonForChangeRequest", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "reasonForChangeRequest")]
        public string ReasonForChangeRequest { get; set; }
        /// <summary>
        /// Returned if the referenceType field is returned in the response. This is the identifier of an object of the type specified by the value of referenceType. For example, if the value of referenceType is INVENTORY_ITEM, this field should contain the seller's SKU for an inventory item.
        /// </summary>
        /// <value>Returned if the referenceType field is returned in the response. This is the identifier of an object of the type specified by the value of referenceType. For example, if the value of referenceType is INVENTORY_ITEM, this field should contain the seller's SKU for an inventory item.</value>
        [DataMember(Name = "referenceId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "referenceId")]
        public string ReferenceId { get; set; }
        /// <summary>
        /// Returned if this field was included in the the createChangeRequest call. This specifies the type of eBay object that the seller wants to create or update using the requested change. It applies to objects that are incomplete due to the need for a matching catalog product. Providing a referenceType and a referenceId in a catalog change request enables eBay to automatically apply the resulting new or updated product directly to the specified object without requiring additional action on your part. Available values: INVENTORY_ITEM &mdash; The requested change will support the completion of an inventory item, which you can then use to create an offer. LISTING &mdash; The requested change will support the modification of an active product listing. LISTING_DRAFT &mdash; The requested change will support the completion of an offer, which you can then publish as a product listing. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ReferenceType.html'>eBay API documentation</a>
        /// </summary>
        /// <value>Returned if this field was included in the the createChangeRequest call. This specifies the type of eBay object that the seller wants to create or update using the requested change. It applies to objects that are incomplete due to the need for a matching catalog product. Providing a referenceType and a referenceId in a catalog change request enables eBay to automatically apply the resulting new or updated product directly to the specified object without requiring additional action on your part. Available values: INVENTORY_ITEM &mdash; The requested change will support the completion of an inventory item, which you can then use to create an offer. LISTING &mdash; The requested change will support the modification of an active product listing. LISTING_DRAFT &mdash; The requested change will support the completion of an offer, which you can then publish as a product listing. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ReferenceType.html'>eBay API documentation</a></value>
        [DataMember(Name = "referenceType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "referenceType")]
        public string ReferenceType { get; set; }
        /// <summary>
        /// Returned if the value of changeRequestStatus is APPROVED, APPROVED_WITH_MODIFICATIONS, or REJECTED. This is the date that the change request was resolved.
        /// </summary>
        /// <value>Returned if the value of changeRequestStatus is APPROVED, APPROVED_WITH_MODIFICATIONS, or REJECTED. This is the date that the change request was resolved.</value>
        [DataMember(Name = "resolutionDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "resolutionDate")]
        public string ResolutionDate { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "suggestedProduct", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "suggestedProduct")]
        public SuggestedProduct SuggestedProduct { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ChangeRequestId: ").Append(ChangeRequestId).Append("\n");
            sb.Append("  ChangeRequestStatus: ").Append(ChangeRequestStatus).Append("\n");
            sb.Append("  ChangeRequestType: ").Append(ChangeRequestType).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  ExpectedCompletionDate: ").Append(ExpectedCompletionDate).Append("\n");
            sb.Append("  ProcessResolution: ").Append(ProcessResolution).Append("\n");
            sb.Append("  ProcessStatusMessage: ").Append(ProcessStatusMessage).Append("\n");
            sb.Append("  ReasonForChangeRequest: ").Append(ReasonForChangeRequest).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  ReferenceType: ").Append(ReferenceType).Append("\n");
            sb.Append("  ResolutionDate: ").Append(ResolutionDate).Append("\n");
            sb.Append("  SuggestedProduct: ").Append(SuggestedProduct).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about an existing catalog product that presents a conflict with a seller's suggested product.
    /// </summary>
    [DataContract]
    public class ConflictingProduct
    {
        /// <summary>
        /// The eBay assigned identifier of this conflict.
        /// </summary>
        /// <value>The eBay assigned identifier of this conflict.</value>
        [DataMember(Name = "conflictCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "conflictCode")]
        public string ConflictCode { get; set; }
        /// <summary>
        /// Contains information about one or more aspects of the conflicting product, which the seller's change request either duplicates or provides similar values. The seller should either accept the conflicting product's aspects and values and adopt the product as is, or submit a change request to create or update a product that doesn't conflict with an existing product record.
        /// </summary>
        /// <value>Contains information about one or more aspects of the conflicting product, which the seller's change request either duplicates or provides similar values. The seller should either accept the conflicting product's aspects and values and adopt the product as is, or submit a change request to create or update a product that doesn't conflict with an existing product record.</value>
        [DataMember(Name = "differentiatingAspects", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "differentiatingAspects")]
        public ProductAspect[] DifferentiatingAspects { get; set; }
        /// <summary>
        /// The eBay product ID of the conflicting catalog product.
        /// </summary>
        /// <value>The eBay product ID of the conflicting catalog product.</value>
        [DataMember(Name = "epid", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "epid")]
        public string Epid { get; set; }
        /// <summary>
        /// The reason for this conflict.
        /// </summary>
        /// <value>The reason for this conflict.</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "reason")]
        public string Reason { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ConflictCode: ").Append(ConflictCode).Append("\n");
            sb.Append("  DifferentiatingAspects: ").Append(DifferentiatingAspects).Append("\n");
            sb.Append("  Epid: ").Append(Epid).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about a correction that eBay has applied to the suggested product in a change request.
    /// </summary>
    [DataContract]
    public class Correction
    {
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "aspectValues", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectValues")]
        public CorrectionAspectValues AspectValues { get; set; }
        /// <summary>
        /// The eBay-assigned identifier of the correction type for this correction.
        /// </summary>
        /// <value>The eBay-assigned identifier of the correction type for this correction.</value>
        [DataMember(Name = "correctionCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "correctionCode")]
        public string CorrectionCode { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "productAttribute", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "productAttribute")]
        public CorrectionProductAttribute ProductAttribute { get; set; }
        /// <summary>
        /// The reason why this correction is required.
        /// </summary>
        /// <value>The reason why this correction is required.</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "reason")]
        public string Reason { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AspectValues: ").Append(AspectValues).Append("\n");
            sb.Append("  CorrectionCode: ").Append(CorrectionCode).Append("\n");
            sb.Append("  ProductAttribute: ").Append(ProductAttribute).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains a value of a given eBay product aspect which must be corrected, along with the correct value.
    /// </summary>
    [DataContract]
    public class CorrectionAspectValue
    {
        /// <summary>
        /// The aspect's correct value
        /// </summary>
        /// <value>The aspect's correct value</value>
        [DataMember(Name = "newValue", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "newValue")]
        public string NewValue { get; set; }
        /// <summary>
        /// The aspect's current incorrect value.
        /// </summary>
        /// <value>The aspect's current incorrect value.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  NewValue: ").Append(NewValue).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type identifies a product aspect that requires correction in a catalog change request, along with its aspect values that must be corrected.
    /// </summary>
    [DataContract]
    public class CorrectionAspectValues
    {
        /// <summary>
        /// The localized name of this product aspect that requires correction, such as Model Number, Size, or Color.
        /// </summary>
        /// <value>The localized name of this product aspect that requires correction, such as Model Number, Size, or Color.</value>
        [DataMember(Name = "aspectName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectName")]
        public string AspectName { get; set; }
        /// <summary>
        /// A list of one or more values of this product aspect that must be corrected.
        /// </summary>
        /// <value>A list of one or more values of this product aspect that must be corrected.</value>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "values")]
        public CorrectionAspectValue[] Values { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AspectName: ").Append(AspectName).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// Contains information about a particular product attribute with an incorrect value.
    /// </summary>
    [DataContract]
    public class CorrectionProductAttribute
    {
        /// <summary>
        /// The name of the product attribute type in the change request which requires correction, such as BRAND, CATEGORY, or TITLE. See the ProductAttributeName type for available values. Note: If the value of this field is ASPECT_NAME, see corrections.aspectValues for correction information. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ProductAttributeName.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The name of the product attribute type in the change request which requires correction, such as BRAND, CATEGORY, or TITLE. See the ProductAttributeName type for available values. Note: If the value of this field is ASPECT_NAME, see corrections.aspectValues for correction information. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ProductAttributeName.html'>eBay API documentation</a></value>
        [DataMember(Name = "attributeName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "attributeName")]
        public string AttributeName { get; set; }
        /// <summary>
        /// Not returned if the value of attributeName is ASPECT_NAME (see instead corrections.aspectValues). This is the named attribute's correct value.
        /// </summary>
        /// <value>Not returned if the value of attributeName is ASPECT_NAME (see instead corrections.aspectValues). This is the named attribute's correct value.</value>
        [DataMember(Name = "newValue", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "newValue")]
        public string NewValue { get; set; }
        /// <summary>
        /// Not returned if the value of attributeName is ASPECT_NAME (see instead corrections.aspectValues). This is the named attribute's current incorrect value.
        /// </summary>
        /// <value>Not returned if the value of attributeName is ASPECT_NAME (see instead corrections.aspectValues). This is the named attribute's current incorrect value.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AttributeName: ").Append(AttributeName).Append("\n");
            sb.Append("  NewValue: ").Append(NewValue).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains the input payload of the <b>createChangeRequest</b> call, including the type of request, the reason for a product update request, and the details of the new or updated product being suggested.
    /// </summary>
    [DataContract]
    public class CreateChangeRequestPayload
    {
        /// <summary>
        /// The type of catalog modification being requested by this change request. Available values: PRODUCT_CREATION &mdash; Change request to create a new product PRODUCT_UPDATE &mdash; Change request to update an existing product For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ChangeRequestType.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The type of catalog modification being requested by this change request. Available values: PRODUCT_CREATION &mdash; Change request to create a new product PRODUCT_UPDATE &mdash; Change request to update an existing product For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ChangeRequestType.html'>eBay API documentation</a></value>
        [DataMember(Name = "changeRequestType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "changeRequestType")]
        public string ChangeRequestType { get; set; }
        /// <summary>
        /// Required if the value of changeRequestType is PRODUCT_UPDATE, and optional otherwise; this is a text description of why this change is being requested.
        /// </summary>
        /// <value>Required if the value of changeRequestType is PRODUCT_UPDATE, and optional otherwise; this is a text description of why this change is being requested.</value>
        [DataMember(Name = "reasonForChangeRequest", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "reasonForChangeRequest")]
        public string ReasonForChangeRequest { get; set; }
        /// <summary>
        /// Required if the referenceType field is included in the request. This is the identifier of an object of the type specified by the value of referenceType. For example, if the value of referenceType is INVENTORY_ITEM, this field should contain the seller's SKU for an inventory item.
        /// </summary>
        /// <value>Required if the referenceType field is included in the request. This is the identifier of an object of the type specified by the value of referenceType. For example, if the value of referenceType is INVENTORY_ITEM, this field should contain the seller's SKU for an inventory item.</value>
        [DataMember(Name = "referenceId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "referenceId")]
        public string ReferenceId { get; set; }
        /// <summary>
        /// The type of object that the requested change is intended to support. This applies to objects that are incomplete due to the need for a matching catalog product. Providing a referenceType and a referenceId in a catalog change request enables eBay to automatically apply the resulting new or updated product directly to the specified object without requiring additional action on your part. Available values: INVENTORY_ITEM &mdash; The requested change will support the completion of an inventory item, which you can then use to create an offer. LISTING &mdash; The requested change will support the modification of an active product listing. LISTING_DRAFT &mdash; The requested change will support the completion of an offer, which you can then publish as a product listing. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ReferenceType.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The type of object that the requested change is intended to support. This applies to objects that are incomplete due to the need for a matching catalog product. Providing a referenceType and a referenceId in a catalog change request enables eBay to automatically apply the resulting new or updated product directly to the specified object without requiring additional action on your part. Available values: INVENTORY_ITEM &mdash; The requested change will support the completion of an inventory item, which you can then use to create an offer. LISTING &mdash; The requested change will support the modification of an active product listing. LISTING_DRAFT &mdash; The requested change will support the completion of an offer, which you can then publish as a product listing. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ReferenceType.html'>eBay API documentation</a></value>
        [DataMember(Name = "referenceType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "referenceType")]
        public string ReferenceType { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "suggestedProduct", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "suggestedProduct")]
        public SuggestedProduct SuggestedProduct { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ChangeRequestType: ").Append(ChangeRequestType).Append("\n");
            sb.Append("  ReasonForChangeRequest: ").Append(ReasonForChangeRequest).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  ReferenceType: ").Append(ReferenceType).Append("\n");
            sb.Append("  SuggestedProduct: ").Append(SuggestedProduct).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains the output payload of the <b>getChangeRequests</b> call, which is a portion of the collection of change requests that match the search criteria. The returned set of change requests is a <i>page</i>, and the response includes information for navigating the output pages.
    /// </summary>
    [DataContract]
    public class GetChangeRequestsResponse
    {
        /// <summary>
        /// Contains the full details of one or more catalog change requests, including the original payload of the createChangeRequest call, processing status and key dates, and resolution details.
        /// </summary>
        /// <value>Contains the full details of one or more catalog change requests, including the original payload of the createChangeRequest call, processing status and key dates, and resolution details.</value>
        [DataMember(Name = "changeRequests", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "changeRequests")]
        public ChangeRequest[] ChangeRequests { get; set; }
        /// <summary>
        /// The URI of the getChangeRequests call request that produced this page of results.
        /// </summary>
        /// <value>The URI of the getChangeRequests call request that produced this page of results.</value>
        [DataMember(Name = "href", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "href")]
        public string Href { get; set; }
        /// <summary>
        /// The maximum number of change requests in this page, a subset of the full collection of change requests that match the filter criteria of this call. This field combines with the offset field to identify the change requests being returned.
        /// </summary>
        /// <value>The maximum number of change requests in this page, a subset of the full collection of change requests that match the filter criteria of this call. This field combines with the offset field to identify the change requests being returned.</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "limit")]
        public int? Limit { get; set; }
        /// <summary>
        /// The getChangeRequests call URI for the next page. For example, the following URI returns records 41 thru 50 from the collection of change requests: path/change_request?limit=10&amp;offset=40 Note: This feature employs a zero-based list, where the first order in the list has an offset of 0.
        /// </summary>
        /// <value>The getChangeRequests call URI for the next page. For example, the following URI returns records 41 thru 50 from the collection of change requests: path/change_request?limit=10&amp;offset=40 Note: This feature employs a zero-based list, where the first order in the list has an offset of 0.</value>
        [DataMember(Name = "next", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "next")]
        public string Next { get; set; }
        /// <summary>
        /// The first change request in this page based on its position in the returned collection of change requests. For example, if offset is set to 10 and limit is set to 10, this page includes change requests 11 thru 20 from the resulting collection of change requests. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0.
        /// </summary>
        /// <value>The first change request in this page based on its position in the returned collection of change requests. For example, if offset is set to 10 and limit is set to 10, this page includes change requests 11 thru 20 from the resulting collection of change requests. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0.</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "offset")]
        public int? Offset { get; set; }
        /// <summary>
        /// The getChangeRequests call URI for the previous page. For example, the following URI returns orders 21 thru 30 from the collection of orders: path/change_request?limit=10&amp;offset=20 Note: This feature employs a zero-based list, where the first order in the list has an offset of 0.
        /// </summary>
        /// <value>The getChangeRequests call URI for the previous page. For example, the following URI returns orders 21 thru 30 from the collection of orders: path/change_request?limit=10&amp;offset=20 Note: This feature employs a zero-based list, where the first order in the list has an offset of 0.</value>
        [DataMember(Name = "prev", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "prev")]
        public string Prev { get; set; }
        /// <summary>
        /// The total number of change requests in the collection. Note: If no change requests are found, this field is returned with a value of 0.
        /// </summary>
        /// <value>The total number of change requests in the collection. Note: If no change requests are found, this field is returned with a value of 0.</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "total")]
        public int? Total { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ChangeRequests: ").Append(ChangeRequests).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Prev: ").Append(Prev).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about a product image stored in eBay Picture Services (EPS).
    /// </summary>
    [DataContract]
    public class Image
    {
        /// <summary>
        /// The height of the image in pixels.
        /// </summary>
        /// <value>The height of the image in pixels.</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "height")]
        public int? Height { get; set; }
        /// <summary>
        /// The eBay Picture Services (EPS) URL of the image.
        /// </summary>
        /// <value>The eBay Picture Services (EPS) URL of the image.</value>
        [DataMember(Name = "imageUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "imageUrl")]
        public string ImageUrl { get; set; }
        /// <summary>
        /// The width of the image in pixels.
        /// </summary>
        /// <value>The width of the image in pixels.</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "width")]
        public int? Width { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type provides details of conflicting products, corrections required, or violations that were discovered in a change request.
    /// </summary>
    [DataContract]
    public class ProcessResolution
    {
        /// <summary>
        /// Contains information about one or more existing products with identifying information that matches or instersects with the suggested product. For each conflicting product, the difference is in the presence or value of one or more product aspects. If the seller accepts the aspects and their values of the conflicting product (such as a color value of scarlet instead of crimson), that product can be adopted by the seller instead of the suggested product. If the seller does not accept any of the conflicting products as is, you can submit a change request to update one of them, or to create a new product for which identifying information doesn't overlap with an existing product enough to produce a conflict.
        /// </summary>
        /// <value>Contains information about one or more existing products with identifying information that matches or instersects with the suggested product. For each conflicting product, the difference is in the presence or value of one or more product aspects. If the seller accepts the aspects and their values of the conflicting product (such as a color value of scarlet instead of crimson), that product can be adopted by the seller instead of the suggested product. If the seller does not accept any of the conflicting products as is, you can submit a change request to update one of them, or to create a new product for which identifying information doesn't overlap with an existing product enough to produce a conflict.</value>
        [DataMember(Name = "conflictingProducts", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "conflictingProducts")]
        public ConflictingProduct[] ConflictingProducts { get; set; }
        /// <summary>
        /// Contains information about one or more corrections to this change request that eBay has applied to the new or updated product. Sellers can accept these corrections by adopting the product, which is identified by the epid field.
        /// </summary>
        /// <value>Contains information about one or more corrections to this change request that eBay has applied to the new or updated product. Sellers can accept these corrections by adopting the product, which is identified by the epid field.</value>
        [DataMember(Name = "corrections", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "corrections")]
        public Correction[] Corrections { get; set; }
        /// <summary>
        /// Returned only if the value of changeRequestStatus is APPROVED or APPROVED_WITH_MODIFICATIONS; this is the eBay identifier of the resulting product.
        /// </summary>
        /// <value>Returned only if the value of changeRequestStatus is APPROVED or APPROVED_WITH_MODIFICATIONS; this is the eBay identifier of the resulting product.</value>
        [DataMember(Name = "epid", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "epid")]
        public string Epid { get; set; }
        /// <summary>
        /// The URI of the getProduct call request that retrieves this product's details. This field is returned under one of the following conditions: The value of changeRequestType is PRODUCT_UPDATE. The value of changeRequestType is PRODUCT_CREATION, and the value of changeRequestStatus is APPROVED or APPROVED_WITH_MODIFICATIONS.
        /// </summary>
        /// <value>The URI of the getProduct call request that retrieves this product's details. This field is returned under one of the following conditions: The value of changeRequestType is PRODUCT_UPDATE. The value of changeRequestType is PRODUCT_CREATION, and the value of changeRequestStatus is APPROVED or APPROVED_WITH_MODIFICATIONS.</value>
        [DataMember(Name = "productHref", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "productHref")]
        public string ProductHref { get; set; }
        /// <summary>
        /// Contains information about one or more violations in the values of the suggested product's aspects or fixed attributes.
        /// </summary>
        /// <value>Contains information about one or more violations in the values of the suggested product's aspects or fixed attributes.</value>
        [DataMember(Name = "violations", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "violations")]
        public Violation[] Violations { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ConflictingProducts: ").Append(ConflictingProducts).Append("\n");
            sb.Append("  Corrections: ").Append(Corrections).Append("\n");
            sb.Append("  Epid: ").Append(Epid).Append("\n");
            sb.Append("  ProductHref: ").Append(ProductHref).Append("\n");
            sb.Append("  Violations: ").Append(Violations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains the full details of a specified product, including information about the product's identifiers, product images, aspects, and categories.
    /// </summary>
    [DataContract]
    public class Product
    {
        /// <summary>
        /// Contains information about additional images associated with this product. For the primary image, see the image container.
        /// </summary>
        /// <value>Contains information about additional images associated with this product. For the primary image, see the image container.</value>
        [DataMember(Name = "additionalImages", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "additionalImages")]
        public Image[] AdditionalImages { get; set; }
        /// <summary>
        /// Contains an array of the category aspects and their values that are associated with this product.
        /// </summary>
        /// <value>Contains an array of the category aspects and their values that are associated with this product.</value>
        [DataMember(Name = "aspects", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspects")]
        public Aspect[] Aspects { get; set; }
        /// <summary>
        /// The manufacturer's brand name for this product.
        /// </summary>
        /// <value>The manufacturer's brand name for this product.</value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "brand")]
        public string Brand { get; set; }
        /// <summary>
        /// The rich description of this product, which might contain HTML.
        /// </summary>
        /// <value>The rich description of this product, which might contain HTML.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        /// <summary>
        /// A list of all European Article Numbers (EANs) that identify this product.
        /// </summary>
        /// <value>A list of all European Article Numbers (EANs) that identify this product.</value>
        [DataMember(Name = "ean", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "ean")]
        public string[] Ean { get; set; }
        /// <summary>
        /// The eBay product ID of this product.
        /// </summary>
        /// <value>The eBay product ID of this product.</value>
        [DataMember(Name = "epid", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "epid")]
        public string Epid { get; set; }
        /// <summary>
        /// A list of all GTINs that identify this product. Currently this can include EAN, ISBN, and UPC identifier types.
        /// </summary>
        /// <value>A list of all GTINs that identify this product. Currently this can include EAN, ISBN, and UPC identifier types.</value>
        [DataMember(Name = "gtin", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "gtin")]
        public string[] Gtin { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "image")]
        public Image Image { get; set; }
        /// <summary>
        /// A list of all International Standard Book Numbers (ISBNs) that identify this product.
        /// </summary>
        /// <value>A list of all International Standard Book Numbers (ISBNs) that identify this product.</value>
        [DataMember(Name = "isbn", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "isbn")]
        public string[] Isbn { get; set; }
        /// <summary>
        /// A list of all MPN values that the manufacturer uses to identify this product.
        /// </summary>
        /// <value>A list of all MPN values that the manufacturer uses to identify this product.</value>
        [DataMember(Name = "mpn", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "mpn")]
        public string[] Mpn { get; set; }
        /// <summary>
        /// A list of category IDs (other than the value of primaryCategoryId) for all the leaf categories to which this product might belong.
        /// </summary>
        /// <value>A list of category IDs (other than the value of primaryCategoryId) for all the leaf categories to which this product might belong.</value>
        [DataMember(Name = "otherApplicableCategoryIds", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "otherApplicableCategoryIds")]
        public string[] OtherApplicableCategoryIds { get; set; }
        /// <summary>
        /// The identifier of the leaf category that eBay recommends using to list this product, based on previous listings of similar products. Products in the eBay catalog are not automatically associated with any particular category, but using an inappropriate category can make it difficult for prospective buyers to find the product. For other possible categories that might be used, see otherApplicableCategoryIds.
        /// </summary>
        /// <value>The identifier of the leaf category that eBay recommends using to list this product, based on previous listings of similar products. Products in the eBay catalog are not automatically associated with any particular category, but using an inappropriate category can make it difficult for prospective buyers to find the product. For other possible categories that might be used, see otherApplicableCategoryIds.</value>
        [DataMember(Name = "primaryCategoryId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "primaryCategoryId")]
        public string PrimaryCategoryId { get; set; }
        /// <summary>
        /// The URL for this product's eBay product page.
        /// </summary>
        /// <value>The URL for this product's eBay product page.</value>
        [DataMember(Name = "productWebUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "productWebUrl")]
        public string ProductWebUrl { get; set; }
        /// <summary>
        /// The title of this product on eBay.
        /// </summary>
        /// <value>The title of this product on eBay.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }
        /// <summary>
        /// A list of Universal Product Codes (UPCs) that identify this product.
        /// </summary>
        /// <value>A list of Universal Product Codes (UPCs) that identify this product.</value>
        [DataMember(Name = "upc", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "upc")]
        public string[] Upc { get; set; }
        /// <summary>
        /// The current version number of this product record in the catalog.
        /// </summary>
        /// <value>The current version number of this product record in the catalog.</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AdditionalImages: ").Append(AdditionalImages).Append("\n");
            sb.Append("  Aspects: ").Append(Aspects).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Ean: ").Append(Ean).Append("\n");
            sb.Append("  Epid: ").Append(Epid).Append("\n");
            sb.Append("  Gtin: ").Append(Gtin).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Isbn: ").Append(Isbn).Append("\n");
            sb.Append("  Mpn: ").Append(Mpn).Append("\n");
            sb.Append("  OtherApplicableCategoryIds: ").Append(OtherApplicableCategoryIds).Append("\n");
            sb.Append("  PrimaryCategoryId: ").Append(PrimaryCategoryId).Append("\n");
            sb.Append("  ProductWebUrl: ").Append(ProductWebUrl).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Upc: ").Append(Upc).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains the name and values of a category aspect that is associated with a particular product. 
    /// </summary>
    [DataContract]
    public class ProductAspect
    {
        /// <summary>
        /// The name of the product aspect, such as Model Number, Size, or Color.
        /// </summary>
        /// <value>The name of the product aspect, such as Model Number, Size, or Color.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        /// <summary>
        /// Required or returned if a value is provided for the name field. This is a list of one or more localized values of this product aspect.
        /// </summary>
        /// <value>Required or returned if a value is provided for the name field. This is a list of one or more localized values of this product aspect.</value>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "values")]
        public string[] Values { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about the constraints for an aspect that's associated with a specific eBay category or eBay Catalog product. <!-- Applies to both category and product aspects -->
    /// </summary>
    [DataContract]
    public class ProductAspectConstraint
    {
        /// <summary>
        /// The data type used to represent the aspect. See the AspectDataTypeEnum type for more information about each data type. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/AspectDataTypeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The data type used to represent the aspect. See the AspectDataTypeEnum type for more information about each data type. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/AspectDataTypeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "aspectDataType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectDataType")]
        public string AspectDataType { get; set; }
        /// <summary>
        /// Returned only if the value of aspectDataType is STRING or NUMBER. The required format for date or number values (e.g. a date value may be expressed as MMYYYY or MMYY).
        /// </summary>
        /// <value>Returned only if the value of aspectDataType is STRING or NUMBER. The required format for date or number values (e.g. a date value may be expressed as MMYYYY or MMYY).</value>
        [DataMember(Name = "aspectFormat", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectFormat")]
        public string AspectFormat { get; set; }
        /// <summary>
        /// Indicates whether the seller must select from a closed list of aspect values, or can input the aspect value manually. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/AspectModeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>Indicates whether the seller must select from a closed list of aspect values, or can input the aspect value manually. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/AspectModeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "aspectMode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectMode")]
        public string AspectMode { get; set; }
        /// <summary>
        /// A value of true indicates that the aspect is mandatory for products listed in this category.
        /// </summary>
        /// <value>A value of true indicates that the aspect is mandatory for products listed in this category.</value>
        [DataMember(Name = "aspectRequired", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectRequired")]
        public bool? AspectRequired { get; set; }
        /// <summary>
        /// Indicates whether the aspect requires only one value, or can accept multiple values when listing in this category. An example of a product aspect that will often have numerous values is Features. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ItemToAspectCardinalityEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>Indicates whether the aspect requires only one value, or can accept multiple values when listing in this category. An example of a product aspect that will often have numerous values is Features. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ItemToAspectCardinalityEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "productToAspectCardinality", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "productToAspectCardinality")]
        public string ProductToAspectCardinality { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AspectDataType: ").Append(AspectDataType).Append("\n");
            sb.Append("  AspectFormat: ").Append(AspectFormat).Append("\n");
            sb.Append("  AspectMode: ").Append(AspectMode).Append("\n");
            sb.Append("  AspectRequired: ").Append(AspectRequired).Append("\n");
            sb.Append("  ProductToAspectCardinality: ").Append(ProductToAspectCardinality).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about a product aspect associated with a given catalog product.
    /// </summary>
    [DataContract]
    public class ProductAspectValue
    {
        /// <summary>
        /// A supported value of the corresponding product aspect (shown in the aspects.name field). Every supported value for the product aspect is shown under the aspects.values container. Note that one of these values can possibly be used instead of the product aspect value(s) currently defined for the eBay Catalog product and specified in the aspects.valuesAssociatedWithProduct array.
        /// </summary>
        /// <value>A supported value of the corresponding product aspect (shown in the aspects.name field). Every supported value for the product aspect is shown under the aspects.values container. Note that one of these values can possibly be used instead of the product aspect value(s) currently defined for the eBay Catalog product and specified in the aspects.valuesAssociatedWithProduct array.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }
        /// <summary>
        /// Not returned if the value of the value field can always be selected for this aspect of the specified category. Contains a list of the dependencies that identify when the value of the value field is available for the current aspect. Each dependency specifies the values of another aspect of the same category (a control aspect), for which the current value of the current aspect can also be selected by the seller. Example: A shirt is available in three sizes and three colors, but only the Small and Medium sizes come in Green. Thus for the Color aspect, the value Green is constrained by its dependency on Size (the control aspect). Only when the Size aspect value is Small or Medium, can the Color aspect value of Green be selected by the seller.
        /// </summary>
        /// <value>Not returned if the value of the value field can always be selected for this aspect of the specified category. Contains a list of the dependencies that identify when the value of the value field is available for the current aspect. Each dependency specifies the values of another aspect of the same category (a control aspect), for which the current value of the current aspect can also be selected by the seller. Example: A shirt is available in three sizes and three colors, but only the Small and Medium sizes come in Green. Thus for the Color aspect, the value Green is constrained by its dependency on Size (the control aspect). Only when the Size aspect value is Small or Medium, can the Color aspect value of Green be selected by the seller.</value>
        [DataMember(Name = "valueConstraints", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "valueConstraints")]
        public ValueConstraint[] ValueConstraints { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueConstraints: ").Append(ValueConstraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about certain available product attributes, their input requirements, and their constraints for specified categories.
    /// </summary>
    [DataContract]
    public class ProductIdentifier
    {
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "constraint", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "constraint")]
        public ProductIdentifierConstraint Constraint { get; set; }
        /// <summary>
        /// A list of one or more valid values for this product identifier.
        /// </summary>
        /// <value>A list of one or more valid values for this product identifier.</value>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "values")]
        public string[] Values { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Constraint: ").Append(Constraint).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about the input, formatting, and occurrence constraints of a product identifier.
    /// </summary>
    [DataContract]
    public class ProductIdentifierConstraint
    {
        /// <summary>
        /// Indicates whether the seller must select from a closed list of identifier values, or can input the identifier manually. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/AspectModeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>Indicates whether the seller must select from a closed list of identifier values, or can input the identifier manually. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/AspectModeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "mode")]
        public string Mode { get; set; }
        /// <summary>
        /// A value of true indicates that the identifier is mandatory for the product or categories specified.
        /// </summary>
        /// <value>A value of true indicates that the identifier is mandatory for the product or categories specified.</value>
        [DataMember(Name = "required", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "required")]
        public bool? Required { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about certain available product attributes, their input requirements, and their constraints for a specified product and any specified categories.
    /// </summary>
    [DataContract]
    public class ProductIdentifierForProductMetadata
    {
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "constraint", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "constraint")]
        public ProductIdentifierConstraint Constraint { get; set; }
        /// <summary>
        /// The identifier value currently associated with the product.
        /// </summary>
        /// <value>The identifier value currently associated with the product.</value>
        [DataMember(Name = "valueAssociatedWithProduct", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "valueAssociatedWithProduct")]
        public string ValueAssociatedWithProduct { get; set; }
        /// <summary>
        /// A list of one or more valid values for this product identifier.
        /// </summary>
        /// <value>A list of one or more valid values for this product identifier.</value>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "values")]
        public string[] Values { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Constraint: ").Append(Constraint).Append("\n");
            sb.Append("  ValueAssociatedWithProduct: ").Append(ValueAssociatedWithProduct).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type is the container type for the response payload of the <b>getProductMetadata</b> call, which returns merged aspect metadata for a catalog product.
    /// </summary>
    [DataContract]
    public class ProductMetadata
    {
        /// <summary>
        /// Contains information about one or more aspects that are supported for the specified catalog product, including those that are currently associated with the product. This is a union (with duplicates removed) of all aspects associated with the specified category or categories (if provided) and those associated with the product.
        /// </summary>
        /// <value>Contains information about one or more aspects that are supported for the specified catalog product, including those that are currently associated with the product. This is a union (with duplicates removed) of all aspects associated with the specified category or categories (if provided) and those associated with the product.</value>
        [DataMember(Name = "aspects", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspects")]
        public ProductMetadataAspect[] Aspects { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "brand")]
        public ProductIdentifierForProductMetadata Brand { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "mpn", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "mpn")]
        public ProductIdentifierForProductMetadata Mpn { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Aspects: ").Append(Aspects).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Mpn: ").Append(Mpn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains detailed information about an aspect that's supported for a given eBay Catalog product. These details include the aspect name, current value(s), supported/possible values, and constraint information.
    /// </summary>
    [DataContract]
    public class ProductMetadataAspect
    {
        /// <summary>
        /// Returned only if this field is populated. This provides information and context for the product aspect. The help text can be presented to the seller to clarify the intended purpose of the aspect, and recommendations for its use. For example, the help text for the Country/Region of Manufacture aspect is: Specifying the country/region of manufacture can help streamline customs clearance.
        /// </summary>
        /// <value>Returned only if this field is populated. This provides information and context for the product aspect. The help text can be presented to the seller to clarify the intended purpose of the aspect, and recommendations for its use. For example, the help text for the Country/Region of Manufacture aspect is: Specifying the country/region of manufacture can help streamline customs clearance.</value>
        [DataMember(Name = "aspectHelpText", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectHelpText")]
        public string AspectHelpText { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "constraint", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "constraint")]
        public ProductAspectConstraint Constraint { get; set; }
        /// <summary>
        /// A value of true indicates that this product aspect can be removed from the specified catalog product definition by omitting it from a product change request. A value of false indicates that this product aspect cannot be dropped (although it is possible that its value could be modified).
        /// </summary>
        /// <value>A value of true indicates that this product aspect can be removed from the specified catalog product definition by omitting it from a product change request. A value of false indicates that this product aspect cannot be dropped (although it is possible that its value could be modified).</value>
        [DataMember(Name = "droppable", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "droppable")]
        public bool? Droppable { get; set; }
        /// <summary>
        /// The name of the product aspect, such as Model Number, Size, or Color.
        /// </summary>
        /// <value>The name of the product aspect, such as Model Number, Size, or Color.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        /// <summary>
        /// Not returned if the value of the constraint field is FREE_TEXT and there are no stored values for this aspect. Contains information about the supported values for the product aspect identified by the name field, as well as constraint information for the product aspect values. These values can be used instead of the product aspect value(s) currently defined for the eBay Catalog product, and those specified in the valuesAssociatedWithProduct array.
        /// </summary>
        /// <value>Not returned if the value of the constraint field is FREE_TEXT and there are no stored values for this aspect. Contains information about the supported values for the product aspect identified by the name field, as well as constraint information for the product aspect values. These values can be used instead of the product aspect value(s) currently defined for the eBay Catalog product, and those specified in the valuesAssociatedWithProduct array.</value>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "values")]
        public ProductAspectValue[] Values { get; set; }
        /// <summary>
        /// The value(s) currently defined for the eBay Catalog product for the product aspect identified by the corresponding name field.
        /// </summary>
        /// <value>The value(s) currently defined for the eBay Catalog product for the product aspect identified by the corresponding name field.</value>
        [DataMember(Name = "valuesAssociatedWithProduct", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "valuesAssociatedWithProduct")]
        public string[] ValuesAssociatedWithProduct { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AspectHelpText: ").Append(AspectHelpText).Append("\n");
            sb.Append("  Constraint: ").Append(Constraint).Append("\n");
            sb.Append("  Droppable: ").Append(Droppable).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  ValuesAssociatedWithProduct: ").Append(ValuesAssociatedWithProduct).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type is the container type for the response payload of the <b>getProductMetadataForCategories</b> call, which returns required and recommended product aspects, brand names, and manufacturer part numbers for one or more eBay categories.
    /// </summary>
    [DataContract]
    public class ProductMetadataForCategories
    {
        /// <summary>
        /// Contains information about one or more required and recommended product aspects associated with the specified eBay category or categories. This is a union (with duplicates removed) of all aspects associated with the specified categories.
        /// </summary>
        /// <value>Contains information about one or more required and recommended product aspects associated with the specified eBay category or categories. This is a union (with duplicates removed) of all aspects associated with the specified categories.</value>
        [DataMember(Name = "aspects", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspects")]
        public CategoryAspect[] Aspects { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "brand")]
        public ProductIdentifier Brand { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "mpn", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "mpn")]
        public ProductIdentifier Mpn { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Aspects: ").Append(Aspects).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Mpn: ").Append(Mpn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains the specifications for the collection of products that match the search or filter criteria of a <b>search</b> call. A maximum of 200 product summaries is returned (the result set), fewer if you include the <b>limit</b> query parameter in the request. 
    /// </summary>
    [DataContract]
    public class ProductSearchResponse
    {
        /// <summary>
        /// This field is reserved for internal or future use.
        /// </summary>
        /// <value>This field is reserved for internal or future use.</value>
        [DataMember(Name = "href", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "href")]
        public string Href { get; set; }
        /// <summary>
        /// The number of product summaries returned in the response. This is the result set, a subset of the full collection of products that match the search or filter criteria of this call. If the limit query parameter was included in the request, this field will have the same value. Default: 50
        /// </summary>
        /// <value>The number of product summaries returned in the response. This is the result set, a subset of the full collection of products that match the search or filter criteria of this call. If the limit query parameter was included in the request, this field will have the same value. Default: 50</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "limit")]
        public int? Limit { get; set; }
        /// <summary>
        /// This field is reserved for internal or future use.
        /// </summary>
        /// <value>This field is reserved for internal or future use.</value>
        [DataMember(Name = "next", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "next")]
        public string Next { get; set; }
        /// <summary>
        /// This field is reserved for internal or future use.
        /// </summary>
        /// <value>This field is reserved for internal or future use.</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "offset")]
        public int? Offset { get; set; }
        /// <summary>
        /// This field is reserved for internal or future use.
        /// </summary>
        /// <value>This field is reserved for internal or future use.</value>
        [DataMember(Name = "prev", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "prev")]
        public string Prev { get; set; }
        /// <summary>
        /// Returned if the fieldGroups query parameter was omitted from the request, or if it was included with a value of MATCHING_PRODUCTS or FULL. This container provides an array of product summaries in the current result set for products that match the combination of the q, category_ids, and aspect_filter parameters that were provided in the request. Each product summary includes information about the product's identifiers, product images, aspects, the product page URL, and the getProduct URL for retrieving the product details.
        /// </summary>
        /// <value>Returned if the fieldGroups query parameter was omitted from the request, or if it was included with a value of MATCHING_PRODUCTS or FULL. This container provides an array of product summaries in the current result set for products that match the combination of the q, category_ids, and aspect_filter parameters that were provided in the request. Each product summary includes information about the product's identifiers, product images, aspects, the product page URL, and the getProduct URL for retrieving the product details.</value>
        [DataMember(Name = "productSummaries", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "productSummaries")]
        public ProductSummary[] ProductSummaries { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "refinement", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "refinement")]
        public Refinement Refinement { get; set; }
        /// <summary>
        /// This field is reserved for internal or future use.
        /// </summary>
        /// <value>This field is reserved for internal or future use.</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "total")]
        public int? Total { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Prev: ").Append(Prev).Append("\n");
            sb.Append("  ProductSummaries: ").Append(ProductSummaries).Append("\n");
            sb.Append("  Refinement: ").Append(Refinement).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains a summary of a specified product. The product summary includes information about the product's identifiers, product images, aspects, and the <b>getProduct</b> URL for retrieving the product details.
    /// </summary>
    [DataContract]
    public class ProductSummary
    {
        /// <summary>
        /// Contains information about additional images associated with this product. For the primary image, see the image container.
        /// </summary>
        /// <value>Contains information about additional images associated with this product. For the primary image, see the image container.</value>
        [DataMember(Name = "additionalImages", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "additionalImages")]
        public Image[] AdditionalImages { get; set; }
        /// <summary>
        /// Contains an array of the category aspects and their values that are associated with this product.
        /// </summary>
        /// <value>Contains an array of the category aspects and their values that are associated with this product.</value>
        [DataMember(Name = "aspects", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspects")]
        public Aspect[] Aspects { get; set; }
        /// <summary>
        /// The manufacturer's brand name for this product.
        /// </summary>
        /// <value>The manufacturer's brand name for this product.</value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "brand")]
        public string Brand { get; set; }
        /// <summary>
        /// A list of all European Article Numbers (EANs) that identify this product.
        /// </summary>
        /// <value>A list of all European Article Numbers (EANs) that identify this product.</value>
        [DataMember(Name = "ean", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "ean")]
        public string[] Ean { get; set; }
        /// <summary>
        /// The eBay product ID of this product.
        /// </summary>
        /// <value>The eBay product ID of this product.</value>
        [DataMember(Name = "epid", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "epid")]
        public string Epid { get; set; }
        /// <summary>
        /// A list of all GTINs that identify this product. This includes all of the values returned in the ean, isbn, and upc fields.
        /// </summary>
        /// <value>A list of all GTINs that identify this product. This includes all of the values returned in the ean, isbn, and upc fields.</value>
        [DataMember(Name = "gtin", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "gtin")]
        public string[] Gtin { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "image")]
        public Image Image { get; set; }
        /// <summary>
        /// A list of all International Standard Book Numbers (ISBNs) that identify this product.
        /// </summary>
        /// <value>A list of all International Standard Book Numbers (ISBNs) that identify this product.</value>
        [DataMember(Name = "isbn", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "isbn")]
        public string[] Isbn { get; set; }
        /// <summary>
        /// A list of all Manufacturer Product Number (MPN) values that the manufacturer uses to identify this product.
        /// </summary>
        /// <value>A list of all Manufacturer Product Number (MPN) values that the manufacturer uses to identify this product.</value>
        [DataMember(Name = "mpn", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "mpn")]
        public string[] Mpn { get; set; }
        /// <summary>
        /// The URI of the getProduct call request that retrieves this product's details.
        /// </summary>
        /// <value>The URI of the getProduct call request that retrieves this product's details.</value>
        [DataMember(Name = "productHref", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "productHref")]
        public string ProductHref { get; set; }
        /// <summary>
        /// The URL for this product's eBay product page.
        /// </summary>
        /// <value>The URL for this product's eBay product page.</value>
        [DataMember(Name = "productWebUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "productWebUrl")]
        public string ProductWebUrl { get; set; }
        /// <summary>
        /// The title of this product on eBay.
        /// </summary>
        /// <value>The title of this product on eBay.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }
        /// <summary>
        /// A list of Universal Product Codes (UPCs) that identify this product.
        /// </summary>
        /// <value>A list of Universal Product Codes (UPCs) that identify this product.</value>
        [DataMember(Name = "upc", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "upc")]
        public string[] Upc { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AdditionalImages: ").Append(AdditionalImages).Append("\n");
            sb.Append("  Aspects: ").Append(Aspects).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Ean: ").Append(Ean).Append("\n");
            sb.Append("  Epid: ").Append(Epid).Append("\n");
            sb.Append("  Gtin: ").Append(Gtin).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Isbn: ").Append(Isbn).Append("\n");
            sb.Append("  Mpn: ").Append(Mpn).Append("\n");
            sb.Append("  ProductHref: ").Append(ProductHref).Append("\n");
            sb.Append("  ProductWebUrl: ").Append(ProductWebUrl).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Upc: ").Append(Upc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type identifies a product category and the aspects associated with that category. Each aspect distribution container returns the distribution of values that have been used for the aspect.
    /// </summary>
    [DataContract]
    public class Refinement
    {
        /// <summary>
        /// Contains information about one or more aspects that are associated with the category identified by dominantCategoryId.
        /// </summary>
        /// <value>Contains information about one or more aspects that are associated with the category identified by dominantCategoryId.</value>
        [DataMember(Name = "aspectDistributions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectDistributions")]
        public AspectDistribution[] AspectDistributions { get; set; }
        /// <summary>
        /// The ID of the category that eBay determines is most likely to cover the products matching the search criteria.
        /// </summary>
        /// <value>The ID of the category that eBay determines is most likely to cover the products matching the search criteria.</value>
        [DataMember(Name = "dominantCategoryId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "dominantCategoryId")]
        public string DominantCategoryId { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AspectDistributions: ").Append(AspectDistributions).Append("\n");
            sb.Append("  DominantCategoryId: ").Append(DominantCategoryId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains the full details of a suggested product, including information about the product's identifiers, description, product images, categories, and aspects.
    /// </summary>
    [DataContract]
    public class SuggestedProduct
    {
        /// <summary>
        /// A list of URLs for additional images associated with the suggested product. For the URL of the primary image, see the imageUrl field.
        /// </summary>
        /// <value>A list of URLs for additional images associated with the suggested product. For the URL of the primary image, see the imageUrl field.</value>
        [DataMember(Name = "additionalImageUrls", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "additionalImageUrls")]
        public string[] AdditionalImageUrls { get; set; }
        /// <summary>
        /// Contains one or more category aspects and their values that are associated with the suggested product.
        /// </summary>
        /// <value>Contains one or more category aspects and their values that are associated with the suggested product.</value>
        [DataMember(Name = "aspects", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspects")]
        public ProductAspect[] Aspects { get; set; }
        /// <summary>
        /// The manufacturer's brand name for the suggested product.
        /// </summary>
        /// <value>The manufacturer's brand name for the suggested product.</value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "brand")]
        public string Brand { get; set; }
        /// <summary>
        /// A rich description of the suggested product, which can contain HTML, including the following basic tags: Text formatting tags such as &lt;b&gt;, &lt;i&gt;, &lt;br&gt;, &lt;ol&gt;, &lt;ul&gt;, and &lt;li&gt; Table formatting tags such as &lt;table&gt;, &lt;tr&gt;, &lt;td&gt;, &lt;th&gt;, &lt;thead&gt;, &lt;tfoot&gt;, &lt;tbody&gt;, &lt;caption&gt;, &lt;col&gt;, and &lt;colgroup&gt;Note: Active content from sellers is prohibited on eBay, including animation or video via JavaScript, Flash, plug-ins, or form actions.
        /// </summary>
        /// <value>A rich description of the suggested product, which can contain HTML, including the following basic tags: Text formatting tags such as &lt;b&gt;, &lt;i&gt;, &lt;br&gt;, &lt;ol&gt;, &lt;ul&gt;, and &lt;li&gt; Table formatting tags such as &lt;table&gt;, &lt;tr&gt;, &lt;td&gt;, &lt;th&gt;, &lt;thead&gt;, &lt;tfoot&gt;, &lt;tbody&gt;, &lt;caption&gt;, &lt;col&gt;, and &lt;colgroup&gt;Note: Active content from sellers is prohibited on eBay, including animation or video via JavaScript, Flash, plug-ins, or form actions.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        /// <summary>
        /// A list of all European Article Numbers (EANs) that identify the suggested product.
        /// </summary>
        /// <value>A list of all European Article Numbers (EANs) that identify the suggested product.</value>
        [DataMember(Name = "ean", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "ean")]
        public string[] Ean { get; set; }
        /// <summary>
        /// Required or returned only if the value of the changeRequestType field is PRODUCT_UPDATE. This is the eBay product ID of the product record for which an update is being suggested.
        /// </summary>
        /// <value>Required or returned only if the value of the changeRequestType field is PRODUCT_UPDATE. This is the eBay product ID of the product record for which an update is being suggested.</value>
        [DataMember(Name = "epid", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "epid")]
        public string Epid { get; set; }
        /// <summary>
        /// Required or returned if the value of the changeRequestType field is PRODUCT_CREATION. This is the URL of the primary image associated with the suggested product.
        /// </summary>
        /// <value>Required or returned if the value of the changeRequestType field is PRODUCT_CREATION. This is the URL of the primary image associated with the suggested product.</value>
        [DataMember(Name = "imageUrl", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "imageUrl")]
        public string ImageUrl { get; set; }
        /// <summary>
        /// A list of all International Standard Book Numbers (ISBNs) that identify the suggested product.
        /// </summary>
        /// <value>A list of all International Standard Book Numbers (ISBNs) that identify the suggested product.</value>
        [DataMember(Name = "isbn", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "isbn")]
        public string[] Isbn { get; set; }
        /// <summary>
        /// A list of all Manufacturer Product Number (MPN) values that the manufacturer uses to identify the suggested product.
        /// </summary>
        /// <value>A list of all Manufacturer Product Number (MPN) values that the manufacturer uses to identify the suggested product.</value>
        [DataMember(Name = "mpn", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "mpn")]
        public string[] Mpn { get; set; }
        /// <summary>
        /// A list of category IDs (other than the value of primaryCategoryId) for all the leaf categories to which the suggested product might belong.
        /// </summary>
        /// <value>A list of category IDs (other than the value of primaryCategoryId) for all the leaf categories to which the suggested product might belong.</value>
        [DataMember(Name = "otherApplicableCategoryIds", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "otherApplicableCategoryIds")]
        public string[] OtherApplicableCategoryIds { get; set; }
        /// <summary>
        /// The identifier of the category that eBay recommends using to list the suggested product, based on previous listings of similar products. Products in the eBay catalog are not automatically associated with any particular category, but using an inappropriate category can make it difficult for prospective buyers to find the product. For other possible categories that might be used, see otherApplicableCategoryIds.
        /// </summary>
        /// <value>The identifier of the category that eBay recommends using to list the suggested product, based on previous listings of similar products. Products in the eBay catalog are not automatically associated with any particular category, but using an inappropriate category can make it difficult for prospective buyers to find the product. For other possible categories that might be used, see otherApplicableCategoryIds.</value>
        [DataMember(Name = "primaryCategoryId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "primaryCategoryId")]
        public string PrimaryCategoryId { get; set; }
        /// <summary>
        /// The catalog title that will be used as the listing title for all item listings based on the suggested product.
        /// </summary>
        /// <value>The catalog title that will be used as the listing title for all item listings based on the suggested product.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }
        /// <summary>
        /// A list of all Universal Product Codes (UPCs) that identify the suggested product.
        /// </summary>
        /// <value>A list of all Universal Product Codes (UPCs) that identify the suggested product.</value>
        [DataMember(Name = "upc", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "upc")]
        public string[] Upc { get; set; }
        /// <summary>
        /// Required or returned only if the value of changeRequestType is PRODUCT_UPDATE. This is the current version number in the catalog of the product record for which an update is being suggested.
        /// </summary>
        /// <value>Required or returned only if the value of changeRequestType is PRODUCT_UPDATE. This is the current version number in the catalog of the product record for which an update is being suggested.</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AdditionalImageUrls: ").Append(AdditionalImageUrls).Append("\n");
            sb.Append("  Aspects: ").Append(Aspects).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Ean: ").Append(Ean).Append("\n");
            sb.Append("  Epid: ").Append(Epid).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  Isbn: ").Append(Isbn).Append("\n");
            sb.Append("  Mpn: ").Append(Mpn).Append("\n");
            sb.Append("  OtherApplicableCategoryIds: ").Append(OtherApplicableCategoryIds).Append("\n");
            sb.Append("  PrimaryCategoryId: ").Append(PrimaryCategoryId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Upc: ").Append(Upc).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains a list of the dependencies that identify when a particular value is available for a given aspect of a given category. Each dependency specifies the values of another aspect of the same category (the <i>control</i> aspect), for which the given value of the given aspect can also be selected by the seller. This container consists of constraint information for the corresponding product aspect value.
    /// </summary>
    [DataContract]
    public class ValueConstraint
    {
        /// <summary>
        /// The name of the control aspect on which the current aspect value depends.
        /// </summary>
        /// <value>The name of the control aspect on which the current aspect value depends.</value>
        [DataMember(Name = "applicableForAspectName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "applicableForAspectName")]
        public string ApplicableForAspectName { get; set; }
        /// <summary>
        /// Contains a list of the values of the control aspect on which this aspect's value depends. When the control aspect has any of the specified values, the current value of the current aspect will also be available.
        /// </summary>
        /// <value>Contains a list of the values of the control aspect on which this aspect's value depends. When the control aspect has any of the specified values, the current value of the current aspect will also be available.</value>
        [DataMember(Name = "applicableForAspectValues", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "applicableForAspectValues")]
        public string[] ApplicableForAspectValues { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ApplicableForAspectName: ").Append(ApplicableForAspectName).Append("\n");
            sb.Append("  ApplicableForAspectValues: ").Append(ApplicableForAspectValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about a violation of eBay standards in a change request.
    /// </summary>
    [DataContract]
    public class Violation
    {
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "aspectsValues", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectsValues")]
        public ViolationAspectValues AspectsValues { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "productAttribute", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "productAttribute")]
        public ViolationProductAttribute ProductAttribute { get; set; }
        /// <summary>
        /// An explanation of the reason for this violation.
        /// </summary>
        /// <value>An explanation of the reason for this violation.</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "reason")]
        public string Reason { get; set; }
        /// <summary>
        /// The eBay-assigned identifier of the violation type of this violation.
        /// </summary>
        /// <value>The eBay-assigned identifier of the violation type of this violation.</value>
        [DataMember(Name = "violationCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "violationCode")]
        public string ViolationCode { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AspectsValues: ").Append(AspectsValues).Append("\n");
            sb.Append("  ProductAttribute: ").Append(ProductAttribute).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ViolationCode: ").Append(ViolationCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// Contains the name of a product aspect that is in violation of eBay standards in a particular catalog change request, along with its values that produced the violation.
    /// </summary>
    [DataContract]
    public class ViolationAspectValues
    {
        /// <summary>
        /// The localized name of this product aspect that's in violation, such as Model Number, Size, or Color.
        /// </summary>
        /// <value>The localized name of this product aspect that's in violation, such as Model Number, Size, or Color.</value>
        [DataMember(Name = "aspectName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectName")]
        public string AspectName { get; set; }
        /// <summary>
        /// A list of one or more values of this product aspect that are in violation of eBay standards.
        /// </summary>
        /// <value>A list of one or more values of this product aspect that are in violation of eBay standards.</value>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "values")]
        public string[] Values { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AspectName: ").Append(AspectName).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains the name of a particular product attribute with a value in violation of eBay standards, and if the name is not <code>ASPECT_NAME</code> (a product aspect), the values of the attribute that are in violation. 
    /// </summary>
    [DataContract]
    public class ViolationProductAttribute
    {
        /// <summary>
        /// The name of the product attribute type in the change request which is in violation, such as BRAND, CATEGORY, or TITLE. See the ProductAttributeName type for available values. Note: If the value of this field is ASPECT_NAME, see violations.aspectsValues for violation information. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ProductAttributeName.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The name of the product attribute type in the change request which is in violation, such as BRAND, CATEGORY, or TITLE. See the ProductAttributeName type for available values. Note: If the value of this field is ASPECT_NAME, see violations.aspectsValues for violation information. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/catalog/types/ProductAttributeName.html'>eBay API documentation</a></value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        /// <summary>
        /// Not returned if the value of name is ASPECT_NAME (see instead violations.aspectsValues). This is a list of the named attribute's values that are in violation.
        /// </summary>
        /// <value>Not returned if the value of name is ASPECT_NAME (see instead violations.aspectsValues). This is a list of the named attribute's values that are in violation.</value>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "values")]
        public string[] Values { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
}
namespace eBayApi.Commerce.Taxonomy
{
    public class TaxonomyClient : Api.Client.ApiBase
    {
        public TaxonomyClient(Api.Client.ApiClient apiClient = null) : base(apiClient) { }
        public TaxonomyClient(string basePath) : base(basePath) { }
        /// <summary>
        ///  This call retrieves the details of all nodes of the category tree hierarchy (the subtree) below a specified category of a category tree. You identify the tree using the category_tree_id parameter, which was returned by the getDefaultCategoryTreeId call in the categoryTreeId field. Note: This call can return a very large payload, so you are strongly advised to submit the request with the following HTTP header: &nbsp;&nbsp;Accept-Encoding: application/gzip With this header (in addition to the required headers described under HTTP Request Headers), the call returns the response with gzip compression.
        /// </summary>
        /// <param name="categoryId">The unique identifier of the category at the top of the subtree being requested. Note: If the category_id submitted identifies the root node of the tree, this call returns an error. To retrieve the complete tree, use this value with the getCategoryTree call. If the category_id submitted identifies a leaf node of the tree, the call response will contain information about only that leaf node, which is a valid subtree.</param> 
        /// <param name="categoryTreeId">The unique identifier of the eBay category tree from which a category subtree is being requested.</param> 
        /// <returns>Models.CategorySubtree</returns>
        public Models.CategorySubtree GetCategorySubtree(string categoryTreeId, string categoryId)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'categoryId' when calling GetCategorySubtree");
            // verify the required parameter 'categoryTreeId' is set
            if (categoryTreeId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'categoryTreeId' when calling GetCategorySubtree");

            var path = "/category_tree/{category_tree_id}/get_category_subtree";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "category_tree_id" + "}", ApiClient.ParameterToString(categoryTreeId));

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (categoryId != null) queryParams.Add("category_id", ApiClient.ParameterToString(categoryId)); // query parameter




            // authentication setting, if any
            var authSettings = new String[] { "Client Credentials" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetCategorySubtree: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetCategorySubtree: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.CategorySubtree)ApiClient.Deserialize(response.Content, typeof(Models.CategorySubtree), response.Headers);
        }
        /// <summary>
        ///  This call returns an array of category tree leaf nodes in the specified category tree that are considered by eBay to most closely correspond to the query string q. Returned with each suggested node is a localized name for that category (based on the Accept-Language header specified for the call), and details about each of the category's ancestor nodes, extending from its immediate parent up to the root of the category tree. Note: This call can return a large payload, so you are advised to submit the request with the following HTTP header: &nbsp;&nbsp;Accept-Encoding: application/gzip With this header (in addition to the required headers described under HTTP Request Headers), the call returns the response with gzip compression. You identify the tree using the category_tree_id parameter, which was returned by the getDefaultCategoryTreeId call in the categoryTreeId field. Important: This call is not supported in the Sandbox environment. It will return a response payload in which the categoryName fields contain random or boilerplate text regardless of the query submitted.
        /// </summary>
        /// <param name="categoryTreeId">The unique identifier of the eBay category tree for which suggested nodes are being requested.</param> 
        /// <param name="q">A quoted string that describes or characterizes the item being offered for sale. The string format is free form, and can contain any combination of phrases or keywords. eBay will parse the string and return suggested categories for the item.</param> 
        /// <returns>Models.CategorySuggestionResponse</returns>
        public Models.CategorySuggestionResponse GetCategorySuggestions(string categoryTreeId, string q)
        {
            // verify the required parameter 'categoryTreeId' is set
            if (categoryTreeId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'categoryTreeId' when calling GetCategorySuggestions");
            // verify the required parameter 'q' is set
            if (q == null) throw new Api.Client.ApiException(400, "Missing required parameter 'q' when calling GetCategorySuggestions");

            var path = "/category_tree/{category_tree_id}/get_category_suggestions";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "category_tree_id" + "}", ApiClient.ParameterToString(categoryTreeId));

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (q != null) queryParams.Add("q", ApiClient.ParameterToString(q)); // query parameter




            // authentication setting, if any
            var authSettings = new String[] { "Client Credentials" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetCategorySuggestions: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetCategorySuggestions: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.CategorySuggestionResponse)ApiClient.Deserialize(response.Content, typeof(Models.CategorySuggestionResponse), response.Headers);
        }
        /// <summary>
        ///  This call retrieves the complete category tree that is identified by the category_tree_id parameter. The value of category_tree_id was returned by the getDefaultCategoryTreeId call in the categoryTreeId field. The response contains details of all nodes of the specified eBay category tree, as well as the eBay marketplaces that use this category tree. Note: This call can return a very large payload, so you are strongly advised to submit the request with the following HTTP header: &nbsp;&nbsp;Accept-Encoding: application/gzip With this header (in addition to the required headers described under HTTP Request Headers), the call returns the response with gzip compression.
        /// </summary>
        /// <param name="categoryTreeId">The unique identifier of the eBay category tree being requested.</param> 
        /// <returns>Models.CategoryTree</returns>
        public Models.CategoryTree GetCategoryTree(string categoryTreeId)
        {
            // verify the required parameter 'categoryTreeId' is set
            if (categoryTreeId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'categoryTreeId' when calling GetCategoryTree");

            var path = "/category_tree/{category_tree_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "category_tree_id" + "}", ApiClient.ParameterToString(categoryTreeId));

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;







            // authentication setting, if any
            var authSettings = new String[] { "Client Credentials" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetCategoryTree: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetCategoryTree: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.CategoryTree)ApiClient.Deserialize(response.Content, typeof(Models.CategoryTree), response.Headers);
        }
        /// <summary>
        ///  A given eBay marketplace might use multiple category trees, but one of those trees is considered to be the default for that marketplace. This call retrieves a reference to the default category tree associated with the specified eBay marketplace ID. The response includes only the tree's unique identifier and version, which you can use to retrieve more details about the tree, its structure, and its individual category nodes.
        /// </summary>
        /// <param name="marketplaceId">The ID of the eBay marketplace for which the category tree ID is being requested. For a list of supported marketplace IDs, see Marketplaces with Default Category Trees.</param> 
        /// <returns>Models.BaseCategoryTree</returns>
        public Models.BaseCategoryTree GetDefaultCategoryTreeId(string marketplaceId)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'marketplaceId' when calling GetDefaultCategoryTreeId");

            var path = "/get_default_category_tree_id";
            path = path.Replace("{format}", "json");


            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (marketplaceId != null) queryParams.Add("marketplace_id", ApiClient.ParameterToString(marketplaceId)); // query parameter




            // authentication setting, if any
            var authSettings = new String[] { "Client Credentials" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetDefaultCategoryTreeId: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetDefaultCategoryTreeId: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.BaseCategoryTree)ApiClient.Deserialize(response.Content, typeof(Models.BaseCategoryTree), response.Headers);
        }
        /// <summary>
        ///  This call returns a list of aspects that are appropriate or necessary for accurately describing items in the specified leaf category. Each aspect identifies an item attribute (for example, color) for which the seller will be required or encouraged to provide a value (or variation values) when offering an item in that category on eBay. For each aspect, getItemAspectsForCategory provides complete metadata, including: The aspect's data type, format, and entry mode Whether the aspect is required in listings Whether the aspect can be used for item variations Whether the aspect accepts multiple values for an item Allowed values for the aspectUse this information to construct an interface through which sellers can enter or select the appropriate values for their items or item variations. Once you collect those values, include them as product aspects when creating inventory items using the Inventory API.
        /// </summary>
        /// <param name="categoryId">The unique identifier of the leaf category for which aspects are being requested. Note: If the category_id submitted does not identify a leaf node of the tree, this call returns an error.</param> 
        /// <param name="categoryTreeId">The unique identifier of the eBay category tree from which the specified category's aspects are being requested.</param> 
        /// <returns>Models.AspectMetadata</returns>
        public Models.AspectMetadata GetItemAspectsForCategory(string categoryTreeId, string categoryId)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'categoryId' when calling GetItemAspectsForCategory");
            // verify the required parameter 'categoryTreeId' is set
            if (categoryTreeId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'categoryTreeId' when calling GetItemAspectsForCategory");

            var path = "/category_tree/{category_tree_id}/get_item_aspects_for_category";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "category_tree_id" + "}", ApiClient.ParameterToString(categoryTreeId));

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (categoryId != null) queryParams.Add("category_id", ApiClient.ParameterToString(categoryId)); // query parameter




            // authentication setting, if any
            var authSettings = new String[] { "Client Credentials" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetItemAspectsForCategory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetItemAspectsForCategory: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.AspectMetadata)ApiClient.Deserialize(response.Content, typeof(Models.AspectMetadata), response.Headers);
        }
    }
}
namespace eBayApi.Commerce.Taxonomy.Models
{
    /// <summary>
    /// This type contains information about one of the ancestors of a suggested category. An ordered list of these references describes the path from the suggested category to the root of the category tree it belongs to.
    /// </summary>
    [DataContract]
    public class AncestorReference
    {
        /// <summary>
        /// The unique identifier of the eBay ancestor category. Note: The root node of a full default category tree includes the categoryId field, but its value should not be relied upon. It provides no useful information for application development.
        /// </summary>
        /// <value>The unique identifier of the eBay ancestor category. Note: The root node of a full default category tree includes the categoryId field, but its value should not be relied upon. It provides no useful information for application development.</value>
        [DataMember(Name = "categoryId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryId")]
        public string CategoryId { get; set; }
        /// <summary>
        /// The canonical name of the ancestor category identified by categoryId. Note: Don't depend on category names to be unique within a given category tree.
        /// </summary>
        /// <value>The canonical name of the ancestor category identified by categoryId. Note: Don't depend on category names to be unique within a given category tree.</value>
        [DataMember(Name = "categoryName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryName")]
        public string CategoryName { get; set; }
        /// <summary>
        /// The href portion of the getCategorySubtree call that retrieves the subtree below the ancestor category node.
        /// </summary>
        /// <value>The href portion of the getCategorySubtree call that retrieves the subtree below the ancestor category node.</value>
        [DataMember(Name = "categorySubtreeNodeHref", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categorySubtreeNodeHref")]
        public string CategorySubtreeNodeHref { get; set; }
        /// <summary>
        /// The absolute level of the ancestor category node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.
        /// </summary>
        /// <value>The absolute level of the ancestor category node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.</value>
        [DataMember(Name = "categoryTreeNodeLevel", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryTreeNodeLevel")]
        public int? CategoryTreeNodeLevel { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  CategorySubtreeNodeHref: ").Append(CategorySubtreeNodeHref).Append("\n");
            sb.Append("  CategoryTreeNodeLevel: ").Append(CategoryTreeNodeLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about a item attribute (for example, color) that is appropriate or necessary for accurately describing items in a particular leaf category. Sellers will be required or encouraged to provide one or more values of this aspect when offering an item in that category on eBay.
    /// </summary>
    [DataContract]
    public class Aspect
    {
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "aspectConstraint", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectConstraint")]
        public AspectConstraint AspectConstraint { get; set; }
        /// <summary>
        /// Contains a list of valid values for this aspect (for example: Red, Green, and Blue), along with any constraints on those values.
        /// </summary>
        /// <value>Contains a list of valid values for this aspect (for example: Red, Green, and Blue), along with any constraints on those values.</value>
        [DataMember(Name = "aspectValues", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectValues")]
        public AspectValue[] AspectValues { get; set; }
        /// <summary>
        /// The localized name of this aspect (for example: colour on the eBay UK site). Note: This name is always localized for the specified marketplace. There is no canonical aspect name.
        /// </summary>
        /// <value>The localized name of this aspect (for example: colour on the eBay UK site). Note: This name is always localized for the specified marketplace. There is no canonical aspect name.</value>
        [DataMember(Name = "localizedAspectName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "localizedAspectName")]
        public string LocalizedAspectName { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AspectConstraint: ").Append(AspectConstraint).Append("\n");
            sb.Append("  AspectValues: ").Append(AspectValues).Append("\n");
            sb.Append("  LocalizedAspectName: ").Append(LocalizedAspectName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about the formatting, occurrence, and support of an aspect.
    /// </summary>
    [DataContract]
    public class AspectConstraint
    {
        /// <summary>
        /// The data type of this aspect. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/taxonomy/types/AspectDataTypeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The data type of this aspect. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/taxonomy/types/AspectDataTypeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "aspectDataType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectDataType")]
        public string AspectDataType { get; set; }
        /// <summary>
        /// A value of true indicates that this aspect can be used to help identify item variations.
        /// </summary>
        /// <value>A value of true indicates that this aspect can be used to help identify item variations.</value>
        [DataMember(Name = "aspectEnabledForVariations", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectEnabledForVariations")]
        public bool? AspectEnabledForVariations { get; set; }
        /// <summary>
        /// Returned only if the value of aspectDataType identifies a data type that requires specific formatting. Currently, this field provides formatting hints as follows: DATE: YYYY, YYYYMM, YYYYMMDD NUMBER: int32, double
        /// </summary>
        /// <value>Returned only if the value of aspectDataType identifies a data type that requires specific formatting. Currently, this field provides formatting hints as follows: DATE: YYYY, YYYYMM, YYYYMMDD NUMBER: int32, double</value>
        [DataMember(Name = "aspectFormat", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectFormat")]
        public string AspectFormat { get; set; }
        /// <summary>
        /// The manner in which values of this aspect must be specified by the seller (as free text or by selecting from available options). For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/taxonomy/types/AspectModeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The manner in which values of this aspect must be specified by the seller (as free text or by selecting from available options). For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/taxonomy/types/AspectModeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "aspectMode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectMode")]
        public string AspectMode { get; set; }
        /// <summary>
        /// A value of true indicates that this aspect is required when offering items in the specified category.
        /// </summary>
        /// <value>A value of true indicates that this aspect is required when offering items in the specified category.</value>
        [DataMember(Name = "aspectRequired", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspectRequired")]
        public bool? AspectRequired { get; set; }
        /// <summary>
        /// Indicates whether this aspect can accept single or multiple values for items in the specified category. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/taxonomy/types/ItemToAspectCardinalityEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>Indicates whether this aspect can accept single or multiple values for items in the specified category. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/taxonomy/types/ItemToAspectCardinalityEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "itemToAspectCardinality", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "itemToAspectCardinality")]
        public string ItemToAspectCardinality { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AspectDataType: ").Append(AspectDataType).Append("\n");
            sb.Append("  AspectEnabledForVariations: ").Append(AspectEnabledForVariations).Append("\n");
            sb.Append("  AspectFormat: ").Append(AspectFormat).Append("\n");
            sb.Append("  AspectMode: ").Append(AspectMode).Append("\n");
            sb.Append("  AspectRequired: ").Append(AspectRequired).Append("\n");
            sb.Append("  ItemToAspectCardinality: ").Append(ItemToAspectCardinality).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type is the container type for the response payload of the <b>getItemAspectsForCategory</b> call.
    /// </summary>
    [DataContract]
    public class AspectMetadata
    {
        /// <summary>
        /// A list of item attributes (for example, color) that are appropriate or necessary for accurately describing items in a particular leaf category. Each category has a different set of aspects and different requirements for aspect values. Sellers will be required or encouraged to provide one or more acceptable values for each aspect when offering an item in that category on eBay.
        /// </summary>
        /// <value>A list of item attributes (for example, color) that are appropriate or necessary for accurately describing items in a particular leaf category. Each category has a different set of aspects and different requirements for aspect values. Sellers will be required or encouraged to provide one or more acceptable values for each aspect when offering an item in that category on eBay.</value>
        [DataMember(Name = "aspects", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "aspects")]
        public Aspect[] Aspects { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Aspects: ").Append(Aspects).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains a valid value for an aspect, along with any constraints on the occurrence of that value.
    /// </summary>
    [DataContract]
    public class AspectValue
    {
        /// <summary>
        /// The localized value of this aspect. Note: This value is always localized for the specified marketplace. There is no canonical version of this value.
        /// </summary>
        /// <value>The localized value of this aspect. Note: This value is always localized for the specified marketplace. There is no canonical version of this value.</value>
        [DataMember(Name = "localizedValue", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "localizedValue")]
        public string LocalizedValue { get; set; }
        /// <summary>
        /// Not returned if the value of the localizedValue field can always be selected for this aspect of the specified category. Contains a list of the dependencies that identify when the value of the localizedValue field is available for the current aspect. Each dependency specifies the values of another aspect of the same category (a control aspect), for which the current value of the current aspect can also be selected by the seller. Example: A shirt is available in three sizes and three colors, but only the Small and Medium sizes come in Green. Thus for the Color aspect, the value Green is constrained by its dependency on Size (the control aspect). Only when the Size aspect value is Small or Medium, can the Color aspect value of Green be selected by the seller.
        /// </summary>
        /// <value>Not returned if the value of the localizedValue field can always be selected for this aspect of the specified category. Contains a list of the dependencies that identify when the value of the localizedValue field is available for the current aspect. Each dependency specifies the values of another aspect of the same category (a control aspect), for which the current value of the current aspect can also be selected by the seller. Example: A shirt is available in three sizes and three colors, but only the Small and Medium sizes come in Green. Thus for the Color aspect, the value Green is constrained by its dependency on Size (the control aspect). Only when the Size aspect value is Small or Medium, can the Color aspect value of Green be selected by the seller.</value>
        [DataMember(Name = "valueConstraints", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "valueConstraints")]
        public ValueConstraint[] ValueConstraints { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  LocalizedValue: ").Append(LocalizedValue).Append("\n");
            sb.Append("  ValueConstraints: ").Append(ValueConstraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains identifying information for the category tree associated with a particular eBay marketplace.
    /// </summary>
    [DataContract]
    public class BaseCategoryTree
    {
        /// <summary>
        /// The unique identifier of the eBay category tree for the specified marketplace.
        /// </summary>
        /// <value>The unique identifier of the eBay category tree for the specified marketplace.</value>
        [DataMember(Name = "categoryTreeId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryTreeId")]
        public string CategoryTreeId { get; set; }
        /// <summary>
        /// The version of the category tree identified by categoryTreeId. It's a good idea to cache this value for comparison so you can determine if this category tree has been modified in subsequent calls.
        /// </summary>
        /// <value>The version of the category tree identified by categoryTreeId. It's a good idea to cache this value for comparison so you can determine if this category tree has been modified in subsequent calls.</value>
        [DataMember(Name = "categoryTreeVersion", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryTreeVersion")]
        public string CategoryTreeVersion { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  CategoryTreeId: ").Append(CategoryTreeId).Append("\n");
            sb.Append("  CategoryTreeVersion: ").Append(CategoryTreeVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about a particular eBay category.
    /// </summary>
    [DataContract]
    public class Category
    {
        /// <summary>
        /// The unique identifier of the eBay category within its category tree. Note: The root node of a full default category tree includes the categoryId field, but its value should not be relied upon. It provides no useful information for application development.
        /// </summary>
        /// <value>The unique identifier of the eBay category within its category tree. Note: The root node of a full default category tree includes the categoryId field, but its value should not be relied upon. It provides no useful information for application development.</value>
        [DataMember(Name = "categoryId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryId")]
        public string CategoryId { get; set; }
        /// <summary>
        /// The canonical name of the category identified by categoryId. Note: Don't depend on category names to be unique within a given category tree.
        /// </summary>
        /// <value>The canonical name of the category identified by categoryId. Note: Don't depend on category names to be unique within a given category tree.</value>
        [DataMember(Name = "categoryName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryName")]
        public string CategoryName { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about a particular subtree of a specified eBay category tree. A category subtree consists of a non-root node of the category tree, and all of its descendants down to the leaf nodes.
    /// </summary>
    [DataContract]
    public class CategorySubtree
    {
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "categorySubtreeNode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categorySubtreeNode")]
        public CategoryTreeNode CategorySubtreeNode { get; set; }
        /// <summary>
        /// The unique identifier of the eBay category tree to which this subtree belongs.
        /// </summary>
        /// <value>The unique identifier of the eBay category tree to which this subtree belongs.</value>
        [DataMember(Name = "categoryTreeId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryTreeId")]
        public string CategoryTreeId { get; set; }
        /// <summary>
        /// The version of the category tree identified by categoryTreeId. It's a good idea to cache this value for comparison so you can determine if this category tree has been modified in subsequent calls.
        /// </summary>
        /// <value>The version of the category tree identified by categoryTreeId. It's a good idea to cache this value for comparison so you can determine if this category tree has been modified in subsequent calls.</value>
        [DataMember(Name = "categoryTreeVersion", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryTreeVersion")]
        public string CategoryTreeVersion { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  CategorySubtreeNode: ").Append(CategorySubtreeNode).Append("\n");
            sb.Append("  CategoryTreeId: ").Append(CategoryTreeId).Append("\n");
            sb.Append("  CategoryTreeVersion: ").Append(CategoryTreeVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about a suggested category tree leaf node that corresponds to keywords provided in the request. It includes details about each of the category's ancestor nodes extending up to the root of the category tree.
    /// </summary>
    [DataContract]
    public class CategorySuggestion
    {
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "category")]
        public Category Category { get; set; }
        /// <summary>
        /// An ordered list of category references that describes the location of the suggested category in the specified category tree. The list identifies the category's ancestry as a sequence of parent nodes, from the current node's immediate parent to the root node of the category tree. Note: The root node of a full default category tree includes categoryId and categoryName fields, but their values should not be relied upon. They provide no useful information for application development.
        /// </summary>
        /// <value>An ordered list of category references that describes the location of the suggested category in the specified category tree. The list identifies the category's ancestry as a sequence of parent nodes, from the current node's immediate parent to the root node of the category tree. Note: The root node of a full default category tree includes categoryId and categoryName fields, but their values should not be relied upon. They provide no useful information for application development.</value>
        [DataMember(Name = "categoryTreeNodeAncestors", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryTreeNodeAncestors")]
        public AncestorReference[] CategoryTreeNodeAncestors { get; set; }
        /// <summary>
        /// The absolute level of the category tree node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.
        /// </summary>
        /// <value>The absolute level of the category tree node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.</value>
        [DataMember(Name = "categoryTreeNodeLevel", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryTreeNodeLevel")]
        public int? CategoryTreeNodeLevel { get; set; }
        /// <summary>
        /// This field is reserved for internal or future use.
        /// </summary>
        /// <value>This field is reserved for internal or future use.</value>
        [DataMember(Name = "relevancy", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "relevancy")]
        public string Relevancy { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CategoryTreeNodeAncestors: ").Append(CategoryTreeNodeAncestors).Append("\n");
            sb.Append("  CategoryTreeNodeLevel: ").Append(CategoryTreeNodeLevel).Append("\n");
            sb.Append("  Relevancy: ").Append(Relevancy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains an array of suggested category tree nodes that are considered by eBay to most closely correspond to the keywords provided in a query string, from a specified category tree.
    /// </summary>
    [DataContract]
    public class CategorySuggestionResponse
    {
        /// <summary>
        /// Contains details about one or more suggested categories that correspond to the provided keywords. The array of suggested categories is sorted in order of eBay's confidence of the relevance of each category (the first category is the most relevant). Important: This call is not supported in the Sandbox environment. It will return a response payload in which the categoryName fields contain random or boilerplate text regardless of the query submitted.
        /// </summary>
        /// <value>Contains details about one or more suggested categories that correspond to the provided keywords. The array of suggested categories is sorted in order of eBay's confidence of the relevance of each category (the first category is the most relevant). Important: This call is not supported in the Sandbox environment. It will return a response payload in which the categoryName fields contain random or boilerplate text regardless of the query submitted.</value>
        [DataMember(Name = "categorySuggestions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categorySuggestions")]
        public CategorySuggestion[] CategorySuggestions { get; set; }
        /// <summary>
        /// The unique identifier of the eBay category tree from which suggestions are returned.
        /// </summary>
        /// <value>The unique identifier of the eBay category tree from which suggestions are returned.</value>
        [DataMember(Name = "categoryTreeId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryTreeId")]
        public string CategoryTreeId { get; set; }
        /// <summary>
        /// The version of the category tree identified by categoryTreeId. It's a good idea to cache this value for comparison so you can determine if this category tree has been modified in subsequent calls.
        /// </summary>
        /// <value>The version of the category tree identified by categoryTreeId. It's a good idea to cache this value for comparison so you can determine if this category tree has been modified in subsequent calls.</value>
        [DataMember(Name = "categoryTreeVersion", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryTreeVersion")]
        public string CategoryTreeVersion { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  CategorySuggestions: ").Append(CategorySuggestions).Append("\n");
            sb.Append("  CategoryTreeId: ").Append(CategoryTreeId).Append("\n");
            sb.Append("  CategoryTreeVersion: ").Append(CategoryTreeVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about all nodes of a specified eBay category tree.
    /// </summary>
    [DataContract]
    public class CategoryTree
    {
        /// <summary>
        /// A list of one or more identifiers of the eBay marketplaces that use this category tree.
        /// </summary>
        /// <value>A list of one or more identifiers of the eBay marketplaces that use this category tree.</value>
        [DataMember(Name = "applicableMarketplaceIds", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "applicableMarketplaceIds")]
        public string[] ApplicableMarketplaceIds { get; set; }
        /// <summary>
        /// The unique identifier of this eBay category tree.
        /// </summary>
        /// <value>The unique identifier of this eBay category tree.</value>
        [DataMember(Name = "categoryTreeId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryTreeId")]
        public string CategoryTreeId { get; set; }
        /// <summary>
        /// The version of this category tree. It's a good idea to cache this value for comparison so you can determine if this category tree has been modified in subsequent calls.
        /// </summary>
        /// <value>The version of this category tree. It's a good idea to cache this value for comparison so you can determine if this category tree has been modified in subsequent calls.</value>
        [DataMember(Name = "categoryTreeVersion", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryTreeVersion")]
        public string CategoryTreeVersion { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "rootCategoryNode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "rootCategoryNode")]
        public CategoryTreeNode RootCategoryNode { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ApplicableMarketplaceIds: ").Append(ApplicableMarketplaceIds).Append("\n");
            sb.Append("  CategoryTreeId: ").Append(CategoryTreeId).Append("\n");
            sb.Append("  CategoryTreeVersion: ").Append(CategoryTreeVersion).Append("\n");
            sb.Append("  RootCategoryNode: ").Append(RootCategoryNode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about all nodes of a category tree or subtree hierarchy, including and below the specified <b>Category</b>, down to the leaf nodes. It is a recursive structure.
    /// </summary>
    [DataContract]
    public class CategoryTreeNode
    {
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "category")]
        public Category Category { get; set; }
        /// <summary>
        /// The absolute level of the current category tree node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.
        /// </summary>
        /// <value>The absolute level of the current category tree node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.</value>
        [DataMember(Name = "categoryTreeNodeLevel", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "categoryTreeNodeLevel")]
        public int? CategoryTreeNodeLevel { get; set; }
        /// <summary>
        /// An array of one or more category tree nodes that are the immediate children of the current category tree node, as well as their children, recursively down to the leaf nodes. Returned only if the the current category tree node is not a leaf node (the value of leafCategoryTreeNode is false).
        /// </summary>
        /// <value>An array of one or more category tree nodes that are the immediate children of the current category tree node, as well as their children, recursively down to the leaf nodes. Returned only if the the current category tree node is not a leaf node (the value of leafCategoryTreeNode is false).</value>
        [DataMember(Name = "childCategoryTreeNodes", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "childCategoryTreeNodes")]
        public CategoryTreeNode[] ChildCategoryTreeNodes { get; set; }
        /// <summary>
        /// A value of true indicates that the current category tree node is a leaf node (it has no child nodes). A value of false indicates that the current node has one or more child nodes, which are identified by the childCategoryTreeNodes array. Returned only if the value of this field is true.
        /// </summary>
        /// <value>A value of true indicates that the current category tree node is a leaf node (it has no child nodes). A value of false indicates that the current node has one or more child nodes, which are identified by the childCategoryTreeNodes array. Returned only if the value of this field is true.</value>
        [DataMember(Name = "leafCategoryTreeNode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "leafCategoryTreeNode")]
        public bool? LeafCategoryTreeNode { get; set; }
        /// <summary>
        /// The href portion of the getCategorySubtree call that retrieves the subtree below the parent of this category tree node. Not returned if the current category tree node is the root node of its tree.
        /// </summary>
        /// <value>The href portion of the getCategorySubtree call that retrieves the subtree below the parent of this category tree node. Not returned if the current category tree node is the root node of its tree.</value>
        [DataMember(Name = "parentCategoryTreeNodeHref", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "parentCategoryTreeNodeHref")]
        public string ParentCategoryTreeNodeHref { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CategoryTreeNodeLevel: ").Append(CategoryTreeNodeLevel).Append("\n");
            sb.Append("  ChildCategoryTreeNodes: ").Append(ChildCategoryTreeNodes).Append("\n");
            sb.Append("  LeafCategoryTreeNode: ").Append(LeafCategoryTreeNode).Append("\n");
            sb.Append("  ParentCategoryTreeNodeHref: ").Append(ParentCategoryTreeNodeHref).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains a list of the dependencies that identify when a particular value is available for a given aspect of a given category. Each dependency specifies the values of another aspect of the same category (the <i>control</i> aspect), for which the given value of the given aspect can also be selected by the seller.
    /// </summary>
    [DataContract]
    public class ValueConstraint
    {
        /// <summary>
        /// The name of the control aspect on which the current aspect value depends.
        /// </summary>
        /// <value>The name of the control aspect on which the current aspect value depends.</value>
        [DataMember(Name = "applicableForLocalizedAspectName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "applicableForLocalizedAspectName")]
        public string ApplicableForLocalizedAspectName { get; set; }
        /// <summary>
        /// Contains a list of the values of the control aspect on which this aspect's value depends. When the control aspect has any of the specified values, the current value of the current aspect will also be available.
        /// </summary>
        /// <value>Contains a list of the values of the control aspect on which this aspect's value depends. When the control aspect has any of the specified values, the current value of the current aspect will also be available.</value>
        [DataMember(Name = "applicableForLocalizedAspectValues", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "applicableForLocalizedAspectValues")]
        public string[] ApplicableForLocalizedAspectValues { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ApplicableForLocalizedAspectName: ").Append(ApplicableForLocalizedAspectName).Append("\n");
            sb.Append("  ApplicableForLocalizedAspectValues: ").Append(ApplicableForLocalizedAspectValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
}
namespace eBayApi.Sell.Compliance
{
    public class ComplianceClient : Api.Client.ApiBase
    {
        public ComplianceClient(Api.Client.ApiClient apiClient = null) : base(apiClient) { }
        public ComplianceClient(string basePath) : base(basePath) { }
        /// <summary>
        ///  This call returns specific listing violations for a seller. The seller can either retrieve all listing violations of a specific compliance type, or they can pass in a specific listing ID, and all listing violations applicable to this listing are returned. This call also has pagination control. Note: For the initial release of Compliance API, the only supported compliance type is PRODUCT_ADOPTION. With this compliance type, a seller will be able to discover which active listings need to be revised with an eBay catalog prodoct or product identifier. Searching for violations for a specific listing is also not supported with the initial release of the Compliance API.
        /// </summary>
        /// <param name="xEBAYCMARKETPLACEID">Use this header to specify the eBay marketplace identifier. Supported values for this header can be found in the MarketplaceIdEnum type definition. Note that Version 1.0.0 of the Compliance API is only supported on the US, UK, Australia, and Canada (English) sites.</param> 
        /// <param name="complianceType">A seller uses this query parameter to retrieve all listing violations of a specific compliance type. Only one compliance type value should be passed in here. See ComplianceTypeEnum for more information on the compliance types that can be passed in here. If the listing_id query parameter is used, the compliance_type query parameter (if passed in) will be ignored. This is because all of a listing's policy violations (each compliance type) will be returned if a listing_id is provided. Either the listing_id or a compliance_type query parameter must be used, and if the seller only wants to view listing violations of a specific compliance type, both of these parameters can be used. Note: For the initial release of Compliance API, the listing_id query parameter is not available for use, so the seller does not have the ability to retrieve listing violations for one or more specific listings. Until the listing_id query parameter becomes available, the compliance_type query parameter is required with each getListingViolations call. Note: For the initial release of Compliance API, the only supported compliance type is PRODUCT_ADOPTION. With this compliance type, a seller will be able to discover which active listings need to be revised with an eBay catalog prodoct or other product identifier.</param> 
        /// <param name="offset">The first policy violation to return based on its position in the collection of listing violations. Use this parameter in conjunction with the limit parameter to control the pagination of the output. For example, if offset is set to 10 and limit is set to 10, the call retrieves listing violations 11 thru 20 from the resulting collection of listing violations. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0. If the listing_id parameter is included in the request, this parameter will be ignored. Default: 0 (zero)</param> 
        /// <param name="listingId">Note: This query parameter is for future use, and will not be supported for the initial release of Compliance API. This query parameter is used if the user wants to view all listing violations for one or more eBay listings. The string value passed into this field is the unique identifier of the listing, sometimes referred to as the Item ID. If this query parameter is used, all other query parameters (if provided) are ignored. Either the listing_id or a compliance_type query parameter must be used, and if the seller only wants to view listing violations of a specific compliance type, both of these parameters can be used. Up to 50 listing IDs can be specified with this query parameter, and each unique listing ID is separated with a comma.</param> 
        /// <param name="limit">This query parameter is used if the user wants to set a limit on the number of listing violations that are returned in the current result set. This parameter is used in conjunction with the offset parameter to control the pagination of the output. For example, if offset is set to 10 and limit is set to 10, the call retrieves listing violations 11 thru 20 from the collection of listing violations that match the value set in the compliance_type parameter. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0. If the listing_id parameter is included in the request, this parameter will be ignored. Default: 50 Maximum: 200</param> 
        /// <returns>Models.PagedComplianceViolationCollection</returns>
        public Models.PagedComplianceViolationCollection GetListingViolations(string xEBAYCMARKETPLACEID, string complianceType = null, int? limit = null, string listingId = null, int? offset = null)
        {
            // verify the required parameter 'xEBAYCMARKETPLACEID' is set
            if (xEBAYCMARKETPLACEID == null) throw new Api.Client.ApiException(400, "Missing required parameter 'xEBAYCMARKETPLACEID' when calling GetListingViolations");

            var path = "/listing_violation";
            path = path.Replace("{format}", "json");


            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (complianceType != null) queryParams.Add("compliance_type", ApiClient.ParameterToString(complianceType)); // query parameter
            if (offset != null) queryParams.Add("offset", ApiClient.ParameterToString(offset)); // query parameter
            if (listingId != null) queryParams.Add("listing_id", ApiClient.ParameterToString(listingId)); // query parameter
            if (limit != null) queryParams.Add("limit", ApiClient.ParameterToString(limit)); // query parameter
            if (xEBAYCMARKETPLACEID != null) headerParams.Add("X-EBAY-C-MARKETPLACE-ID", ApiClient.ParameterToString(xEBAYCMARKETPLACEID)); // header parameter



            // authentication setting, if any
            var authSettings = new String[] { "Authorization Code" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetListingViolations: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetListingViolations: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.PagedComplianceViolationCollection)ApiClient.Deserialize(response.Content, typeof(Models.PagedComplianceViolationCollection), response.Headers);
        }
        /// <summary>
        ///  This call returns listing violation counts for a seller. A user can pass in one or more compliance types through the compliance_type query parameter. Listing violations are returned for multiple marketplaces if the seller sells on multiple eBay marketplaces. Note: For the initial release of Compliance API, the only supported compliance type is PRODUCT_ADOPTION. With this compliance type, a seller will be able to discover which active listings need to be revised with an eBay catalog product or product identifier.
        /// </summary>
        /// <param name="complianceType">A user passes in one or more compliance type values through this query parameter. See ComplianceTypeEnum for more information on the compliance types that can be passed in here. If more than one compliance type values is used, delimit these values with a comma. If no compliance type values are passed in, the listing count for all compliance types will be returned. Note: For the initial release of Compliance API, the only supported compliance type is PRODUCT_ADOPTION. With this compliance type, a seller will be able to discover which active listings need to be revised with an eBay catalog prodoct or product identifier.</param> 
        /// <param name="xEBAYCMARKETPLACEID">Use this header to specify the eBay marketplace identifier. Supported values for this header can be found in the MarketplaceIdEnum type definition. Note that Version 1.0.0 of the Compliance API is only supported on the US, UK, Australia, and Canada (English) sites.</param> 
        /// <returns>Models.ComplianceSummary</returns>
        public Models.ComplianceSummary GetListingViolationsSummary(string xEBAYCMARKETPLACEID, string complianceType = null)
        {
            // verify the required parameter 'xEBAYCMARKETPLACEID' is set
            if (xEBAYCMARKETPLACEID == null) throw new Api.Client.ApiException(400, "Missing required parameter 'xEBAYCMARKETPLACEID' when calling GetListingViolationsSummary");

            var path = "/listing_violation_summary";
            path = path.Replace("{format}", "json");


            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (complianceType != null) queryParams.Add("compliance_type", ApiClient.ParameterToString(complianceType)); // query parameter
            if (xEBAYCMARKETPLACEID != null) headerParams.Add("X-EBAY-C-MARKETPLACE-ID", ApiClient.ParameterToString(xEBAYCMARKETPLACEID)); // header parameter



            // authentication setting, if any
            var authSettings = new String[] { "Authorization Code" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetListingViolationsSummary: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetListingViolationsSummary: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.ComplianceSummary)ApiClient.Deserialize(response.Content, typeof(Models.ComplianceSummary), response.Headers);
        }
    }
}
namespace eBayApi.Sell.Compliance.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class ComplianceSummaryInfo
    {
        /// <summary>
        /// This enumeration value indicates the type of compliance. See ComplianceTypeEnum for more information on each compliance type. Note: For the initial release of Compliance API, the only supported compliance type is PRODUCT_ADOPTION. With this compliance type, a seller will be able to discover which active listings (or variations within a multiple-variation listing) need to be revised with an eBay catalog prodoct and/or a product identifier value. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/compliance/types/ComplianceTypeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>This enumeration value indicates the type of compliance. See ComplianceTypeEnum for more information on each compliance type. Note: For the initial release of Compliance API, the only supported compliance type is PRODUCT_ADOPTION. With this compliance type, a seller will be able to discover which active listings (or variations within a multiple-variation listing) need to be revised with an eBay catalog prodoct and/or a product identifier value. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/compliance/types/ComplianceTypeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "complianceType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "complianceType")]
        public string ComplianceType { get; set; }
        /// <summary>
        /// This enumeration value indicates the eBay marketplace where the listing violations are occurring. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/compliance/types/MarketplaceIdEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>This enumeration value indicates the eBay marketplace where the listing violations are occurring. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/compliance/types/MarketplaceIdEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "marketplaceId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "marketplaceId")]
        public string MarketplaceId { get; set; }
        /// <summary>
        /// This integer value indicates the number of eBay listings that are currently violating the compliance type indicated in the complianceType field for the eBay marketplace indicated in the marketplaceId field. If there are no listing violations for the corresponding compliance type, 0 will be returned.
        /// </summary>
        /// <value>This integer value indicates the number of eBay listings that are currently violating the compliance type indicated in the complianceType field for the eBay marketplace indicated in the marketplaceId field. If there are no listing violations for the corresponding compliance type, 0 will be returned.</value>
        [DataMember(Name = "listingCount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "listingCount")]
        public int? ListingCount { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ComplianceType: ").Append(ComplianceType).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  ListingCount: ").Append(ListingCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type is used by each listing violation that is returned under the <b>listingViolations</b> container.
    /// </summary>
    [DataContract]
    public class ComplianceViolation
    {
        /// <summary>
        /// This enumeration value indicates the compliance type of listing violation. See ComplianceTypeEnum for more information on each compliance type. This will always be returned for each listing violation that is found. Note: For the initial release of Compliance API, the only supported compliance type is PRODUCT_ADOPTION. With this compliance type, a seller will be able to discover which active listings need to be revised with an eBay catalog prodoct and/or a product identifier value. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/compliance/types/ComplianceTypeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>This enumeration value indicates the compliance type of listing violation. See ComplianceTypeEnum for more information on each compliance type. This will always be returned for each listing violation that is found. Note: For the initial release of Compliance API, the only supported compliance type is PRODUCT_ADOPTION. With this compliance type, a seller will be able to discover which active listings need to be revised with an eBay catalog prodoct and/or a product identifier value. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/compliance/types/ComplianceTypeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "complianceType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "complianceType")]
        public string ComplianceType { get; set; }
        /// <summary>
        /// The unique identifier of the eBay listing that currently has the corresponding listing violation(s). This will always be returned for each listing that has one or more violations.
        /// </summary>
        /// <value>The unique identifier of the eBay listing that currently has the corresponding listing violation(s). This will always be returned for each listing that has one or more violations.</value>
        [DataMember(Name = "listingId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "listingId")]
        public string ListingId { get; set; }
        /// <summary>
        /// The seller-defined SKU value of the product in the listing with the violation(s). This field is only returned if defined in the listing. SKU values are optional in listings except when creating listings using the Inventory API.
        /// </summary>
        /// <value>The seller-defined SKU value of the product in the listing with the violation(s). This field is only returned if defined in the listing. SKU values are optional in listings except when creating listings using the Inventory API.</value>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sku")]
        public string Sku { get; set; }
        /// <summary>
        /// Note: This field is not supported with the initial release of the Compliance API, and will not be returned. The unique identifier of the offer. This field is only applicable and returned for listings that were created through the Inventory API. To convert an Inventory Item object into an eBay listing, an Offer object must be created and published
        /// </summary>
        /// <value>Note: This field is not supported with the initial release of the Compliance API, and will not be returned. The unique identifier of the offer. This field is only applicable and returned for listings that were created through the Inventory API. To convert an Inventory Item object into an eBay listing, an Offer object must be created and published</value>
        [DataMember(Name = "offerId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "offerId")]
        public string OfferId { get; set; }
        /// <summary>
        /// This container consists of an array of one or more listing violations applicable to the eBay listing specified in the listingId field. This array is returned for each eBay listing that has one or more violations.
        /// </summary>
        /// <value>This container consists of an array of one or more listing violations applicable to the eBay listing specified in the listingId field. This array is returned for each eBay listing that has one or more violations.</value>
        [DataMember(Name = "violations", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "violations")]
        public ComplianceDetail[] Violations { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ComplianceType: ").Append(ComplianceType).Append("\n");
            sb.Append("  ListingId: ").Append(ListingId).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  OfferId: ").Append(OfferId).Append("\n");
            sb.Append("  Violations: ").Append(Violations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type is the base type for the <b>getListingViolationsSummary</b> response. The <b>violationSummaries</b> container contains an array of policy violation counts for each unique eBay marketplace and compliance type violation.
    /// </summary>
    [DataContract]
    public class ComplianceSummary
    {
        /// <summary>
        /// This container is an array of one or more policy violation counts. A policy violation count is returned for each unique eBay marketplace and compliance type violation. Note: For the initial release of Compliance API, the only supported compliance type is PRODUCT_ADOPTION. With this compliance type, a seller will be able to discover which active listings need to be revised with an eBay catalog prodoct or product identifier.
        /// </summary>
        /// <value>This container is an array of one or more policy violation counts. A policy violation count is returned for each unique eBay marketplace and compliance type violation. Note: For the initial release of Compliance API, the only supported compliance type is PRODUCT_ADOPTION. With this compliance type, a seller will be able to discover which active listings need to be revised with an eBay catalog prodoct or product identifier.</value>
        [DataMember(Name = "violationSummaries", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "violationSummaries")]
        public ComplianceSummaryInfo[] ViolationSummaries { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ViolationSummaries: ").Append(ViolationSummaries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class PagedComplianceViolationCollection
    {
        /// <summary>
        /// The distance (number of records) from the first policy violation in the collection to the first policy violation in this result set. In the call request, you can use the offset parameter in conjunction with the limit parameter to control the pagination of the output. For example, if offset is set to 30 and limit is set to 10, the call retrieves policy violations 31 thru 40 from the resulting collection of policy violations. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0. Default: 0 (zero)
        /// </summary>
        /// <value>The distance (number of records) from the first policy violation in the collection to the first policy violation in this result set. In the call request, you can use the offset parameter in conjunction with the limit parameter to control the pagination of the output. For example, if offset is set to 30 and limit is set to 10, the call retrieves policy violations 31 thru 40 from the resulting collection of policy violations. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0. Default: 0 (zero)</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "offset")]
        public int? Offset { get; set; }
        /// <summary>
        /// The URI of the getListingViolations call request that produced this result set.
        /// </summary>
        /// <value>The URI of the getListingViolations call request that produced this result set.</value>
        [DataMember(Name = "href", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "href")]
        public string Href { get; set; }
        /// <summary>
        /// The total number of policy violations in the collection. Note: If no policy violations are found, this field is returned with a value of 0.
        /// </summary>
        /// <value>The total number of policy violations in the collection. Note: If no policy violations are found, this field is returned with a value of 0.</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "total")]
        public int? Total { get; set; }
        /// <summary>
        /// The getListingViolations call URI for the next result set. For example, the following URI returns policy violations 41 thru 50 from the collection of policy violations: path/listing_violation?limit=10&amp;offset=40 This field is only returned if an additional page of listing violations exists.
        /// </summary>
        /// <value>The getListingViolations call URI for the next result set. For example, the following URI returns policy violations 41 thru 50 from the collection of policy violations: path/listing_violation?limit=10&amp;offset=40 This field is only returned if an additional page of listing violations exists.</value>
        [DataMember(Name = "next", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "next")]
        public string Next { get; set; }
        /// <summary>
        /// The getListingViolations call URI for the previous result set. For example, the following URI returns policy violations 21 thru 30 from the collection of policy violations: path/listing_violation?limit=10&amp;offset=20 Note: This feature employs a zero-based list, where the first policy violation in the list has an offset of 0. This field is only returned if a previous page of listing violations exists.
        /// </summary>
        /// <value>The getListingViolations call URI for the previous result set. For example, the following URI returns policy violations 21 thru 30 from the collection of policy violations: path/listing_violation?limit=10&amp;offset=20 Note: This feature employs a zero-based list, where the first policy violation in the list has an offset of 0. This field is only returned if a previous page of listing violations exists.</value>
        [DataMember(Name = "prev", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "prev")]
        public string Prev { get; set; }
        /// <summary>
        /// The maximum number of policy violations returned in the current result set. Note: If this is the last or only result set in the collection, it may contain fewer listing violations. To determine the number of result sets in the collection, divide this into the value of total and round up to the next integer. Default: 50 Max: 200
        /// </summary>
        /// <value>The maximum number of policy violations returned in the current result set. Note: If this is the last or only result set in the collection, it may contain fewer listing violations. To determine the number of result sets in the collection, divide this into the value of total and round up to the next integer. Default: 50 Max: 200</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "limit")]
        public int? Limit { get; set; }
        /// <summary>
        /// An array of listing violations that match the criteria in the call request, including pagination control (if set). An empty array is returned if no listing violations are found.
        /// </summary>
        /// <value>An array of listing violations that match the criteria in the call request, including pagination control (if set). An empty array is returned if no listing violations are found.</value>
        [DataMember(Name = "listingViolations", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "listingViolations")]
        public ComplianceViolation[] ListingViolations { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Prev: ").Append(Prev).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  ListingViolations: ").Append(ListingViolations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class VariationDetails
    {
        /// <summary>
        /// The seller-defined SKU value of the variation within the multiple-variation listing with the violation(s). This field is only returned if a seller-defined SKU value is defined for the variation. SKU values are optional in listing except when creating listings using the Inventory API.
        /// </summary>
        /// <value>The seller-defined SKU value of the variation within the multiple-variation listing with the violation(s). This field is only returned if a seller-defined SKU value is defined for the variation. SKU values are optional in listing except when creating listings using the Inventory API.</value>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sku")]
        public string Sku { get; set; }
        /// <summary>
        /// An array of one or more variation aspects that define a variation within a multiple variation listing. The aspect(s) returned here define the individual variation because these aspects will differ for each variation. Common varying aspects include color and size.
        /// </summary>
        /// <value>An array of one or more variation aspects that define a variation within a multiple variation listing. The aspect(s) returned here define the individual variation because these aspects will differ for each variation. Common varying aspects include color and size.</value>
        [DataMember(Name = "variationAspects", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "variationAspects")]
        public NameValueList[] VariationAspects { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  VariationAspects: ").Append(VariationAspects).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type is used by each listing violation that is returned under the <b>violations</b> container.
    /// </summary>
    [DataContract]
    public class ComplianceDetail
    {
        /// <summary>
        /// This value states the nature of the listing violation. Each compliance type has one or more reason codes. See the Revising Non-Compliant Listings topic in the Product-Based Shopping Experience Playbook for information on revising non-compliant listings based on the PRODUCT_ADOPTION reason code that is received. A reasonCode value is returned for each listing violation.
        /// </summary>
        /// <value>This value states the nature of the listing violation. Each compliance type has one or more reason codes. See the Revising Non-Compliant Listings topic in the Product-Based Shopping Experience Playbook for information on revising non-compliant listings based on the PRODUCT_ADOPTION reason code that is received. A reasonCode value is returned for each listing violation.</value>
        [DataMember(Name = "reasonCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "reasonCode")]
        public string ReasonCode { get; set; }
        /// <summary>
        /// This field provides a textual summary of the listing violation. A message field is returned for each listing violation.
        /// </summary>
        /// <value>This field provides a textual summary of the listing violation. A message field is returned for each listing violation.</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "variation", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "variation")]
        public VariationDetails Variation { get; set; }
        /// <summary>
        /// Note: This container is for future use, and will not be applicable for the initial release of Compliance API. This container provides more information about the listing violation if applicable. The type of information that appears here will vary based on the compliance type and type of violation.
        /// </summary>
        /// <value>Note: This container is for future use, and will not be applicable for the initial release of Compliance API. This container provides more information about the listing violation if applicable. The type of information that appears here will vary based on the compliance type and type of violation.</value>
        [DataMember(Name = "violationData", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "violationData")]
        public NameValueList[] ViolationData { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Variation: ").Append(Variation).Append("\n");
            sb.Append("  ViolationData: ").Append(ViolationData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type is used by the <b>violationData</b> container to provide more information about the listing violation if applicable.<br/><br/><span class="tablenote"><strong>Note:</strong> The <strong>violationData</strong> container is for future use, and will not be applicable for the initial release of Compliance API.</span>
    /// </summary>
    [DataContract]
    public class NameValueList
    {
        /// <summary>
        /// The category of information is returned in this field. The type of information that appears here will vary based on the compliance type and type of violation.
        /// </summary>
        /// <value>The category of information is returned in this field. The type of information that appears here will vary based on the compliance type and type of violation.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        /// <summary>
        /// This value corresponds to violation category returned in the corresponding name field.
        /// </summary>
        /// <value>This value corresponds to violation category returned in the corresponding name field.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
}
namespace eBayApi.Sell.Fulfillment
{
    public class FulfillmentClient : Api.Client.ApiBase
    {
        public FulfillmentClient(Api.Client.ApiClient apiClient = null) : base(apiClient) { }
        public FulfillmentClient(string basePath) : base(basePath) { }
        /// <summary>
        ///  When you group an order's line items into one or more packages, each package requires a corresponding plan for handling, addressing, and shipping; this is a shipping fulfillment. For each package, execute this call once to generate a shipping fulfillment associated with that package. Note: A single line item in an order can consist of multiple units of a purchased item, and one unit can consist of multiple parts or components. Although these components might be provided by the manufacturer in separate packaging, the seller must include all components of a given line item in the same package. Before using this call for a given package, you must determine which line items are in the package. If the package has been shipped, you should provide the date of shipment in the request. If not provided, it will default to the current date and time.
        /// </summary>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param> 
        /// <param name="body">fulfillment payload</param> 
        /// <returns>void</returns>
        public void CreateShippingFulfillment(string orderId, Models.ShippingFulfillmentDetails body)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'orderId' when calling CreateShippingFulfillment");
            // verify the required parameter 'body' is set
            if (body == null) throw new Api.Client.ApiException(400, "Missing required parameter 'body' when calling CreateShippingFulfillment");

            var path = "/order/{orderId}/shipping_fulfillment";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "orderId" + "}", ApiClient.ParameterToString(orderId));

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;

            postBody = ApiClient.Serialize(body); // http body (model) parameter





            // authentication setting, if any
            var authSettings = new String[] { "Authorization Code" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling CreateShippingFulfillment: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling CreateShippingFulfillment: " + response.ErrorMessage, response.ErrorMessage);

            return;
        }
        /// <summary>
        ///  Use this call to retrieve the contents of an order based on its unique identifier, orderId. This value was returned in the getOrders call's orders.orderId field when you searched for orders by creation date, modification date, or fulfillment status. The returned Order object contains information you can use to create and process fulfillments, including: Information about the buyer and seller Information about the order's line items The plans for packaging, addressing and shipping the order The status of payment, packaging, addressing, and shipping the order A summary of monetary amounts specific to the order such as pricing, payments, and shipping costs
        /// </summary>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param> 
        /// <returns>Models.Order</returns>
        public Models.Order GetOrder(string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'orderId' when calling GetOrder");

            var path = "/order/{orderId}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "orderId" + "}", ApiClient.ParameterToString(orderId));

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;







            // authentication setting, if any
            var authSettings = new String[] { "Authorization Code" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetOrder: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetOrder: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.Order)ApiClient.Deserialize(response.Content, typeof(Models.Order), response.Headers);
        }
        /// <summary>
        ///  Use this call to search for and retrieve one or more orders based on their creation date, last modification date, or fulfillment status using the filter parameter. You can alternatively specify a list of orders using the orderIds parameter. The returned Order objects contain information you can use to create and process fulfillments, including: Information about the buyer and seller Information about the order's line items The plans for packaging, addressing and shipping the order The status of payment, packaging, addressing, and shipping the order A summary of monetary amounts specific to the order such as pricing, payments, and shipping costs Important: In this call, the cancelStatus.cancelRequests array is returned but is always empty. Use the getOrder call instead, which returns this array fully populated with information about any cancellation requests.
        /// </summary>
        /// <param name="filter">One or more comma-separated criteria for narrowing down the collection of orders returned by this call. These criteria correspond to specific fields in the response payload. Multiple filter criteria combine to further restrict the results. Note: Currently, filter returns data from only the last 90 days. If the orderIds parameter is included in the request, the filter parameter will be ignored. The available criteria are as follows: creationdate The time period during which qualifying orders were created (the orders.creationDate field). In the URI, this is expressed as a starting timestamp, with or without an ending timestamp (in brackets). The timestamps are in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock.For example: creationdate:[2016-02-21T08:25:43.511Z..] identifies orders created on or after the given timestamp. creationdate:[2016-02-21T08:25:43.511Z..2016-04-21T08:25:43.511Z] identifies orders created between the given timestamps, inclusive. lastmodifieddate The time period during which qualifying orders were last modified (the orders.modifiedDate field). In the URI, this is expressed as a starting timestamp, with or without an ending timestamp (in brackets). The timestamps are in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock.For example: lastmodifieddate:[2016-05-15T08:25:43.511Z..] identifies orders modified on or after the given timestamp. lastmodifieddate:[2016-05-15T08:25:43.511Z..2016-05-31T08:25:43.511Z] identifies orders modified between the given timestamps, inclusive.Note: If creationdate and lastmodifieddate are both included, only creationdate is used. orderfulfillmentstatus The degree to which qualifying orders have been shipped (the orders.orderFulfillmentStatus field). In the URI, this is expressed as one of the following value combinations: orderfulfillmentstatus:{NOT_STARTED|IN_PROGRESS} specifies orders for which no shipping fulfillments have been started, plus orders for which at least one shipping fulfillment has been started but not completed. orderfulfillmentstatus:{FULFILLED|IN_PROGRESS} specifies orders for which all shipping fulfillments have been completed, plus orders for which at least one shipping fulfillment has been started but not completed.Note: The values NOT_STARTED, IN_PROGRESS, and FULFILLED can be used in various combinations, but only the combinations shown here are currently supported.Here is an example of a getOrders call using all of these filters: GET https://api.ebay.com/sell/v1/order? filter=creationdate:%5B2016-03-21T08:25:43.511Z..2016-04-21T08:25:43.511Z%5D, lastmodifieddate:%5B2016-05-15T08:25:43.511Z..%5D, orderfulfillmentstatus:%7BNOT_STARTED%7CIN_PROGRESS%7D Note: This call requires that certain special characters in the URI query string be percent-encoded: &nbsp;&nbsp;&nbsp;&nbsp;[ = %5B &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;] = %5D &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ = %7B &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| = %7C &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} = %7D This query filter example uses these codes. For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/FilterField.html</param> 
        /// <param name="limit">The number of orders to return in the current result set. Use this parameter in conjunction with the offset parameter to control the pagination of the output. For example, if offset is set to 10 and limit is set to 10, the call retrieves orders 11 thru 20 from the resulting collection of orders. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0. If the orderIds parameter is included in the request, this parameter will be ignored. Maximum: 1000 Default: 50</param> 
        /// <param name="offset">The first order to return based on its position in the collection of orders. Use this parameter in conjunction with the limit parameter to control the pagination of the output. For example, if offset is set to 10 and limit is set to 10, the call retrieves orders 11 thru 20 from the resulting collection of orders. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0. If the orderIds parameter is included in the request, this parameter will be ignored. Default: 0 (zero)</param> 
        /// <param name="orderIds">A comma-separated list of the unique identifiers of the orders to retrieve (maximum 50). These values were originally generated by eBay as a result of the buyer's checkout process; for example, 170009092860-9849164007!140000000544476. These values are also returned in the orders.orderId field by invoking this call with filter parameters. Note: If the orderIds parameter is included in the request, all other query parameters will be ignored.</param> 
        /// <returns>Models.OrderSearchPagedCollection</returns>
        public Models.OrderSearchPagedCollection GetOrders(string filter = null, string limit = null, string offset = null, string orderIds = null)
        {


            var path = "/order";
            path = path.Replace("{format}", "json");


            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;


            if (filter != null) queryParams.Add("filter", ApiClient.ParameterToString(filter)); // query parameter
            if (limit != null) queryParams.Add("limit", ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) queryParams.Add("offset", ApiClient.ParameterToString(offset)); // query parameter
            if (orderIds != null) queryParams.Add("orderIds", ApiClient.ParameterToString(orderIds)); // query parameter




            // authentication setting, if any
            var authSettings = new String[] { "Authorization Code" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetOrders: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetOrders: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.OrderSearchPagedCollection)ApiClient.Deserialize(response.Content, typeof(Models.OrderSearchPagedCollection), response.Headers);
        }
        /// <summary>
        ///  Use this call to retrieve the contents of a fulfillment based on its unique identifier, fulfillmentId (combined with the associated order's orderId). The fulfillmentId value was originally generated by the createShippingFulfillment call, and is returned by the getShippingFulfillments call in the members.fulfillmentId field.
        /// </summary>
        /// <param name="fulfillmentId">The unique identifier of the fulfillment. This eBay-generated value was created by the Create Shipping Fulfillment call, and returned by the getShippingFulfillments call in the fulfillments.fulfillmentId field; for example, 9405509699937003457459.</param> 
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param> 
        /// <returns>Models.ShippingFulfillment</returns>
        public Models.ShippingFulfillment GetShippingFulfillment(string fulfillmentId, string orderId)
        {
            // verify the required parameter 'fulfillmentId' is set
            if (fulfillmentId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'fulfillmentId' when calling GetShippingFulfillment");
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'orderId' when calling GetShippingFulfillment");

            var path = "/order/{orderId}/shipping_fulfillment/{fulfillmentId}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "fulfillmentId" + "}", ApiClient.ParameterToString(fulfillmentId));
            path = path.Replace("{" + "orderId" + "}", ApiClient.ParameterToString(orderId));

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;







            // authentication setting, if any
            var authSettings = new String[] { "Authorization Code" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetShippingFulfillment: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetShippingFulfillment: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.ShippingFulfillment)ApiClient.Deserialize(response.Content, typeof(Models.ShippingFulfillment), response.Headers);
        }
        /// <summary>
        ///  Use this call to retrieve the contents of all fulfillments currently defined for a specified order based on the order's unique identifier, orderId. This value is returned in the getOrders call's members.orderId field when you search for orders by creation date or shipment status.
        /// </summary>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param> 
        /// <returns>Models.ShippingFulfillmentPagedCollection</returns>
        public Models.ShippingFulfillmentPagedCollection GetShippingFulfillments(string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new Api.Client.ApiException(400, "Missing required parameter 'orderId' when calling GetShippingFulfillments");

            var path = "/order/{orderId}/shipping_fulfillment";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "orderId" + "}", ApiClient.ParameterToString(orderId));

            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;







            // authentication setting, if any
            var authSettings = new String[] { "Authorization Code" };

            // make the HTTP request
            var response = (IRestResponse)ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetShippingFulfillments: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new Api.Client.ApiException((int)response.StatusCode, "Error calling GetShippingFulfillments: " + response.ErrorMessage, response.ErrorMessage);

            return (Models.ShippingFulfillmentPagedCollection)ApiClient.Deserialize(response.Content, typeof(Models.ShippingFulfillmentPagedCollection), response.Headers);
        }
    }
}
namespace eBayApi.Sell.Fulfillment.Models
{
    /// <summary>
    /// This type contains a string field representing a telephone number.
    /// </summary>
    [DataContract]
    public class PhoneNumber
    {
        /// <summary>
        /// The telephone number.
        /// </summary>
        /// <value>The telephone number.</value>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "phoneNumber")]
        public string _PhoneNumber { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  _PhoneNumber: ").Append(_PhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains a error or warning related to a call request. 
    /// </summary>
    [DataContract]
    public class Error
    {
        /// <summary>
        /// The context or source of this error or warning.
        /// </summary>
        /// <value>The context or source of this error or warning.</value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }
        /// <summary>
        /// The name of the domain containing the service or application. For example, sell is a domain.
        /// </summary>
        /// <value>The name of the domain containing the service or application. For example, sell is a domain.</value>
        [DataMember(Name = "domain", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "domain")]
        public string Domain { get; set; }
        /// <summary>
        /// A positive integer that uniquely identifies the specific error condition that occurred. Your application can use these values as error code identifiers in your customized error-handling algorithms.
        /// </summary>
        /// <value>A positive integer that uniquely identifies the specific error condition that occurred. Your application can use these values as error code identifiers in your customized error-handling algorithms.</value>
        [DataMember(Name = "errorId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "errorId")]
        public int? ErrorId { get; set; }
        /// <summary>
        /// A list of one or more specific request elements (if any) associated with the error or warning. The format of these strings depends on the request payload format. For JSON, use JSONPath notation.
        /// </summary>
        /// <value>A list of one or more specific request elements (if any) associated with the error or warning. The format of these strings depends on the request payload format. For JSON, use JSONPath notation.</value>
        [DataMember(Name = "inputRefIds", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "inputRefIds")]
        public string[] InputRefIds { get; set; }
        /// <summary>
        /// An expanded version of the message field. Maximum length: 200 characters
        /// </summary>
        /// <value>An expanded version of the message field. Maximum length: 200 characters</value>
        [DataMember(Name = "longMessage", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "longMessage")]
        public string LongMessage { get; set; }
        /// <summary>
        /// A message about the error or warning which is device agnostic and readable by end users and application developers. It explains what the error or warning is, and how to fix it (in a general sense). If applicable, the value is localized to the end user's requested locale. Maximum length: 50 characters
        /// </summary>
        /// <value>A message about the error or warning which is device agnostic and readable by end users and application developers. It explains what the error or warning is, and how to fix it (in a general sense). If applicable, the value is localized to the end user's requested locale. Maximum length: 50 characters</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }
        /// <summary>
        /// A list of one or more specific response elements (if any) associated with the error or warning. The format of these strings depends on the request payload format. For JSON, use JSONPath notation.
        /// </summary>
        /// <value>A list of one or more specific response elements (if any) associated with the error or warning. The format of these strings depends on the request payload format. For JSON, use JSONPath notation.</value>
        [DataMember(Name = "outputRefIds", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "outputRefIds")]
        public string[] OutputRefIds { get; set; }
        /// <summary>
        /// Contains a list of name/value pairs that provide additional information concerning this error or warning. Each item in the list is an input parameter that contributed to the error or warning condition.
        /// </summary>
        /// <value>Contains a list of name/value pairs that provide additional information concerning this error or warning. Each item in the list is an input parameter that contributed to the error or warning condition.</value>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "parameters")]
        public ErrorParameter[] Parameters { get; set; }
        /// <summary>
        /// The name of the domain's subsystem or subdivision. For example, fulfillment is a subdomain in the sell domain.
        /// </summary>
        /// <value>The name of the domain's subsystem or subdivision. For example, fulfillment is a subdomain in the sell domain.</value>
        [DataMember(Name = "subdomain", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "subdomain")]
        public string Subdomain { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  ErrorId: ").Append(ErrorId).Append("\n");
            sb.Append("  InputRefIds: ").Append(InputRefIds).Append("\n");
            sb.Append("  LongMessage: ").Append(LongMessage).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  OutputRefIds: ").Append(OutputRefIds).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Subdomain: ").Append(Subdomain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains the name and value of an input parameter that contributed toa specific error or warning condition.
    /// </summary>
    [DataContract]
    public class ErrorParameter
    {
        /// <summary>
        /// The name of the parameter.
        /// </summary>
        /// <value>The name of the parameter.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        /// <summary>
        /// The value of the parameter.
        /// </summary>
        /// <value>The value of the parameter.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains the details of a geographical address.
    /// </summary>
    [DataContract]
    public class Address
    {
        /// <summary>
        /// The first line of the street address.
        /// </summary>
        /// <value>The first line of the street address.</value>
        [DataMember(Name = "addressLine1", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "addressLine1")]
        public string AddressLine1 { get; set; }
        /// <summary>
        /// The second line of the street address. This field can be used for additional address information, such as a suite or apartment number.
        /// </summary>
        /// <value>The second line of the street address. This field can be used for additional address information, such as a suite or apartment number.</value>
        [DataMember(Name = "addressLine2", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "addressLine2")]
        public string AddressLine2 { get; set; }
        /// <summary>
        /// The city of the address.
        /// </summary>
        /// <value>The city of the address.</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "city")]
        public string City { get; set; }
        /// <summary>
        /// The country of the address, represented as two-letter ISO 3166-1 alpha-2 country code. For example, US represents the United States, and DE represents Germany. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/CountryCodeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The country of the address, represented as two-letter ISO 3166-1 alpha-2 country code. For example, US represents the United States, and DE represents Germany. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/CountryCodeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "countryCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "countryCode")]
        public string CountryCode { get; set; }
        /// <summary>
        /// The county (not the country) in which the address is located. Counties typically, but not always, contain multiple cities or towns.
        /// </summary>
        /// <value>The county (not the country) in which the address is located. Counties typically, but not always, contain multiple cities or towns.</value>
        [DataMember(Name = "county", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "county")]
        public string County { get; set; }
        /// <summary>
        /// The postal code (if any) of the address.
        /// </summary>
        /// <value>The postal code (if any) of the address.</value>
        [DataMember(Name = "postalCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "postalCode")]
        public string PostalCode { get; set; }
        /// <summary>
        /// The state or province within the country in which the address resides.
        /// </summary>
        /// <value>The state or province within the country in which the address resides.</value>
        [DataMember(Name = "stateOrProvince", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "stateOrProvince")]
        public string StateOrProvince { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  County: ").Append(County).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  StateOrProvince: ").Append(StateOrProvince).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type defines the monetary value of an amount. It can provide the amount in both the currency used on the eBay site where an item is being offered and the conversion of that value into another currency, if applicable.
    /// </summary>
    [DataContract]
    public class Amount
    {
        /// <summary>
        /// A three-letter ISO 4217 code that indicates the currency of the amount in the convertedFromValue field. This value is required or returned only if currency conversion/localization is required, and represents the pre-conversion currency. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/CurrencyCodeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>A three-letter ISO 4217 code that indicates the currency of the amount in the convertedFromValue field. This value is required or returned only if currency conversion/localization is required, and represents the pre-conversion currency. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/CurrencyCodeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "convertedFromCurrency", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "convertedFromCurrency")]
        public string ConvertedFromCurrency { get; set; }
        /// <summary>
        /// The monetary amount before any conversion is performed, in the currency specified by the convertedFromCurrency field. This value is required or returned only if currency conversion/localization is required. The value field contains the converted amount of this value, in the currency specified by the currency field.
        /// </summary>
        /// <value>The monetary amount before any conversion is performed, in the currency specified by the convertedFromCurrency field. This value is required or returned only if currency conversion/localization is required. The value field contains the converted amount of this value, in the currency specified by the currency field.</value>
        [DataMember(Name = "convertedFromValue", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "convertedFromValue")]
        public string ConvertedFromValue { get; set; }
        /// <summary>
        /// A three-letter ISO 4217 code that indicates the currency of the amount in the value field. If currency conversion/localization is required, this is the post-conversion currency of the amount in the value field. Default: The currency of the authenticated user's country. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/CurrencyCodeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>A three-letter ISO 4217 code that indicates the currency of the amount in the value field. If currency conversion/localization is required, this is the post-conversion currency of the amount in the value field. Default: The currency of the authenticated user's country. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/CurrencyCodeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "currency")]
        public string Currency { get; set; }
        /// <summary>
        /// The monetary amount, in the currency specified by the currency field. If currency conversion/localization is required, this value is the converted amount, and the convertedFromValue field contains the amount in the original currency.
        /// </summary>
        /// <value>The monetary amount, in the currency specified by the currency field. If currency conversion/localization is required, this value is the converted amount, and the convertedFromValue field contains the amount in the original currency.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ConvertedFromCurrency: ").Append(ConvertedFromCurrency).Append("\n");
            sb.Append("  ConvertedFromValue: ").Append(ConvertedFromValue).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about a sales promotion or discount that is applied to a line item.
    /// </summary>
    [DataContract]
    public class AppliedPromotion
    {
        /// <summary>
        /// A description of the applied promotion.
        /// </summary>
        /// <value>A description of the applied promotion.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "discountAmount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "discountAmount")]
        public Amount DiscountAmount { get; set; }
        /// <summary>
        /// An eBay-generated identifier for the promotion. This is the value generated by the Marketing API's Create Item Promotion call and returned as the resource identifier of the location code that accompanies the HTTP 201 status code. It is also returned by the Trading API's SetPromotionalSale call and in the PromotionalSaleID field.
        /// </summary>
        /// <value>An eBay-generated identifier for the promotion. This is the value generated by the Marketing API's Create Item Promotion call and returned as the resource identifier of the location code that accompanies the HTTP 201 status code. It is also returned by the Trading API's SetPromotionalSale call and in the PromotionalSaleID field.</value>
        [DataMember(Name = "promotionId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "promotionId")]
        public string PromotionId { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  PromotionId: ").Append(PromotionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about the buyer of an order.
    /// </summary>
    [DataContract]
    public class Buyer
    {
        /// <summary>
        /// The buyer's eBay user name.
        /// </summary>
        /// <value>The buyer's eBay user name.</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about a buyer request to cancel an order.
    /// </summary>
    [DataContract]
    public class CancelRequest
    {
        /// <summary>
        /// The date and time that the order cancellation was completed, if applicable. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z
        /// </summary>
        /// <value>The date and time that the order cancellation was completed, if applicable. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z</value>
        [DataMember(Name = "cancelCompletedDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "cancelCompletedDate")]
        public string CancelCompletedDate { get; set; }
        /// <summary>
        /// The party who made the initial cancellation request.
        /// </summary>
        /// <value>The party who made the initial cancellation request.</value>
        [DataMember(Name = "cancelInitiator", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "cancelInitiator")]
        public string CancelInitiator { get; set; }
        /// <summary>
        /// The reason why the cancelInitiator initiated the cancellation request.
        /// </summary>
        /// <value>The reason why the cancelInitiator initiated the cancellation request.</value>
        [DataMember(Name = "cancelReason", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "cancelReason")]
        public string CancelReason { get; set; }
        /// <summary>
        /// The date and time that the order cancellation was requested. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z
        /// </summary>
        /// <value>The date and time that the order cancellation was requested. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z</value>
        [DataMember(Name = "cancelRequestedDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "cancelRequestedDate")]
        public string CancelRequestedDate { get; set; }
        /// <summary>
        /// The unique identifier of the order cancellation request.
        /// </summary>
        /// <value>The unique identifier of the order cancellation request.</value>
        [DataMember(Name = "cancelRequestId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "cancelRequestId")]
        public string CancelRequestId { get; set; }
        /// <summary>
        /// The current stage or condition of the cancellation request. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/CancelRequestStateEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The current stage or condition of the cancellation request. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/CancelRequestStateEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "cancelRequestState", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "cancelRequestState")]
        public string CancelRequestState { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  CancelCompletedDate: ").Append(CancelCompletedDate).Append("\n");
            sb.Append("  CancelInitiator: ").Append(CancelInitiator).Append("\n");
            sb.Append("  CancelReason: ").Append(CancelReason).Append("\n");
            sb.Append("  CancelRequestedDate: ").Append(CancelRequestedDate).Append("\n");
            sb.Append("  CancelRequestId: ").Append(CancelRequestId).Append("\n");
            sb.Append("  CancelRequestState: ").Append(CancelRequestState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about any requests that have been made to cancel an order.
    /// </summary>
    [DataContract]
    public class CancelStatus
    {
        /// <summary>
        /// The date and time the order was cancelled, if applicable. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z
        /// </summary>
        /// <value>The date and time the order was cancelled, if applicable. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z</value>
        [DataMember(Name = "cancelledDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "cancelledDate")]
        public string CancelledDate { get; set; }
        /// <summary>
        /// Contains the details of one or more buyer requests to cancel the order. For the getOrders call: This array is returned but is always empty. For the getOrder call: This array is returned fully populated with information about any cancellation requests.
        /// </summary>
        /// <value>Contains the details of one or more buyer requests to cancel the order. For the getOrders call: This array is returned but is always empty. For the getOrder call: This array is returned fully populated with information about any cancellation requests.</value>
        [DataMember(Name = "cancelRequests", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "cancelRequests")]
        public CancelRequest[] CancelRequests { get; set; }
        /// <summary>
        /// The state of the order with regard to cancellation. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/CancelStateEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The state of the order with regard to cancellation. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/CancelStateEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "cancelState", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "cancelState")]
        public string CancelState { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  CancelledDate: ").Append(CancelledDate).Append("\n");
            sb.Append("  CancelRequests: ").Append(CancelRequests).Append("\n");
            sb.Append("  CancelState: ").Append(CancelState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains a breakdown of all costs associated with the fulfillment of a line item.
    /// </summary>
    [DataContract]
    public class DeliveryCost
    {
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "importCharges", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "importCharges")]
        public Amount ImportCharges { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "shippingCost", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shippingCost")]
        public Amount ShippingCost { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "shippingIntermediationFee", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shippingIntermediationFee")]
        public Amount ShippingIntermediationFee { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ImportCharges: ").Append(ImportCharges).Append("\n");
            sb.Append("  ShippingCost: ").Append(ShippingCost).Append("\n");
            sb.Append("  ShippingIntermediationFee: ").Append(ShippingIntermediationFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains contact information for an individual who represents (or is) a buyer or seller.
    /// </summary>
    [DataContract]
    public class ExtendedContact
    {
        /// <summary>
        /// The contact's company name.
        /// </summary>
        /// <value>The contact's company name.</value>
        [DataMember(Name = "companyName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "companyName")]
        public string CompanyName { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "contactAddress", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "contactAddress")]
        public Address ContactAddress { get; set; }
        /// <summary>
        /// Returned only within 14 days of order creation, this is the contact's email address. Note: This field always contains the email address of the buyer even with a Global Shipping Program shipment.
        /// </summary>
        /// <value>Returned only within 14 days of order creation, this is the contact's email address. Note: This field always contains the email address of the buyer even with a Global Shipping Program shipment.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }
        /// <summary>
        /// The contact's full name.
        /// </summary>
        /// <value>The contact's full name.</value>
        [DataMember(Name = "fullName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fullName")]
        public string FullName { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "primaryPhone", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "primaryPhone")]
        public PhoneNumber PrimaryPhone { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  ContactAddress: ").Append(ContactAddress).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  PrimaryPhone: ").Append(PrimaryPhone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains a set of specifications for processing a fulfillment of an order, including the type of fulfillment, shipping carrier and service, addressing details, and estimated delivery window. These instructions are derived from the buyer's and seller's eBay account preferences, the listing parameters, and the buyer's checkout selections. The seller can use them as a starting point for packaging, addressing, and shipping the order.
    /// </summary>
    [DataContract]
    public class FulfillmentStartInstruction
    {
        /// <summary>
        /// Returned only if its value is true, which indicates that the fulfillment will be shipped via eBay's Global Shipping Program. For more information, see Managing Shipping.
        /// </summary>
        /// <value>Returned only if its value is true, which indicates that the fulfillment will be shipped via eBay's Global Shipping Program. For more information, see Managing Shipping.</value>
        [DataMember(Name = "ebaySupportedFulfillment", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "ebaySupportedFulfillment")]
        public bool? EbaySupportedFulfillment { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "finalDestinationAddress", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "finalDestinationAddress")]
        public Address FinalDestinationAddress { get; set; }
        /// <summary>
        /// The method of fulfillment that will be used to deliver this set of line items (this package) to the buyer. This field will have a value of SHIP_TO if the ebaySupportedFulfillment field is returned with a value of true. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/FulfillmentInstructionsType.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The method of fulfillment that will be used to deliver this set of line items (this package) to the buyer. This field will have a value of SHIP_TO if the ebaySupportedFulfillment field is returned with a value of true. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/FulfillmentInstructionsType.html'>eBay API documentation</a></value>
        [DataMember(Name = "fulfillmentInstructionsType", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fulfillmentInstructionsType")]
        public string FulfillmentInstructionsType { get; set; }
        /// <summary>
        /// NOT returned if the value of the fulfillmentInstructionsType field is DIGITAL or PREPARE_FOR_PICKUP, or if the order has promotional free shipping. This is the estimated latest date that the fulfillment will be completed. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z
        /// </summary>
        /// <value>NOT returned if the value of the fulfillmentInstructionsType field is DIGITAL or PREPARE_FOR_PICKUP, or if the order has promotional free shipping. This is the estimated latest date that the fulfillment will be completed. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z</value>
        [DataMember(Name = "maxEstimatedDeliveryDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "maxEstimatedDeliveryDate")]
        public string MaxEstimatedDeliveryDate { get; set; }
        /// <summary>
        /// NOT returned if the value of the fulfillmentInstructionsType field is DIGITAL or PREPARE_FOR_PICKUP, or if the order has promotional free shipping. This is the estimated earliest date that the fulfillment will be completed. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z
        /// </summary>
        /// <value>NOT returned if the value of the fulfillmentInstructionsType field is DIGITAL or PREPARE_FOR_PICKUP, or if the order has promotional free shipping. This is the estimated earliest date that the fulfillment will be completed. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z</value>
        [DataMember(Name = "minEstimatedDeliveryDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "minEstimatedDeliveryDate")]
        public string MinEstimatedDeliveryDate { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "shippingStep", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shippingStep")]
        public ShippingStep ShippingStep { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  EbaySupportedFulfillment: ").Append(EbaySupportedFulfillment).Append("\n");
            sb.Append("  FinalDestinationAddress: ").Append(FinalDestinationAddress).Append("\n");
            sb.Append("  FulfillmentInstructionsType: ").Append(FulfillmentInstructionsType).Append("\n");
            sb.Append("  MaxEstimatedDeliveryDate: ").Append(MaxEstimatedDeliveryDate).Append("\n");
            sb.Append("  MinEstimatedDeliveryDate: ").Append(MinEstimatedDeliveryDate).Append("\n");
            sb.Append("  ShippingStep: ").Append(ShippingStep).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about a line item that was purchased as a gift.
    /// </summary>
    [DataContract]
    public class GiftDetails
    {
        /// <summary>
        /// A gift message from the buyer to the gift recipient.
        /// </summary>
        /// <value>A gift message from the buyer to the gift recipient.</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }
        /// <summary>
        /// The email address of the gift recipient.
        /// </summary>
        /// <value>The email address of the gift recipient.</value>
        [DataMember(Name = "recipientEmail", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "recipientEmail")]
        public string RecipientEmail { get; set; }
        /// <summary>
        /// The name of the buyer to provide to the gift recipient.
        /// </summary>
        /// <value>The name of the buyer to provide to the gift recipient.</value>
        [DataMember(Name = "senderName", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "senderName")]
        public string SenderName { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  RecipientEmail: ").Append(RecipientEmail).Append("\n");
            sb.Append("  SenderName: ").Append(SenderName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains the details of a line item in an order. A line item consists of one or more units of a specific variation and version of a listed item that has been purchased.
    /// </summary>
    [DataContract]
    public class LineItem
    {
        /// <summary>
        /// Contains information about one or more sales promotions or discounts applied to the line item.
        /// </summary>
        /// <value>Contains information about one or more sales promotions or discounts applied to the line item.</value>
        [DataMember(Name = "appliedPromotions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "appliedPromotions")]
        public AppliedPromotion[] AppliedPromotions { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "deliveryCost", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "deliveryCost")]
        public DeliveryCost DeliveryCost { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "discountedLineItemCost", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "discountedLineItemCost")]
        public Amount DiscountedLineItemCost { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "giftDetails", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "giftDetails")]
        public GiftDetails GiftDetails { get; set; }
        /// <summary>
        /// The eBay-generated legacy listing item ID of the line item. This partially identifies the line item, but does not include the variation, version, or unit quantity.
        /// </summary>
        /// <value>The eBay-generated legacy listing item ID of the line item. This partially identifies the line item, but does not include the variation, version, or unit quantity.</value>
        [DataMember(Name = "legacyItemId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "legacyItemId")]
        public string LegacyItemId { get; set; }
        /// <summary>
        /// An eBay-generated string that uniquely identifies the combination of item variations that apply to this line item.
        /// </summary>
        /// <value>An eBay-generated string that uniquely identifies the combination of item variations that apply to this line item.</value>
        [DataMember(Name = "legacyVariationId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "legacyVariationId")]
        public string LegacyVariationId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "lineItemCost", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "lineItemCost")]
        public Amount LineItemCost { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "lineItemFulfillmentInstructions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "lineItemFulfillmentInstructions")]
        public LineItemFulfillmentInstructions LineItemFulfillmentInstructions { get; set; }
        /// <summary>
        /// The degree to which fulfillment of the line item is complete. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/LineItemFulfillmentStatusEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The degree to which fulfillment of the line item is complete. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/LineItemFulfillmentStatusEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "lineItemFulfillmentStatus", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "lineItemFulfillmentStatus")]
        public string LineItemFulfillmentStatus { get; set; }
        /// <summary>
        /// The globally unique eBay-generated identifier of the line item. Note: A single line item can consist of multiple units of a purchased item, and one unit can consist of multiple parts or components. Although these components might be provided by the manufacturer in separate packaging, the seller cannot distribute them among multiple shipping packages. Thus, each line item ID will appear in exactly one fulfillment.
        /// </summary>
        /// <value>The globally unique eBay-generated identifier of the line item. Note: A single line item can consist of multiple units of a purchased item, and one unit can consist of multiple parts or components. Although these components might be provided by the manufacturer in separate packaging, the seller cannot distribute them among multiple shipping packages. Thus, each line item ID will appear in exactly one fulfillment.</value>
        [DataMember(Name = "lineItemId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "lineItemId")]
        public string LineItemId { get; set; }
        /// <summary>
        /// The eBay marketplace where the line item was listed. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/MarketplaceIdEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The eBay marketplace where the line item was listed. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/MarketplaceIdEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "listingMarketplaceId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "listingMarketplaceId")]
        public string ListingMarketplaceId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "properties")]
        public LineItemProperties Properties { get; set; }
        /// <summary>
        /// The eBay marketplace where the line item was purchased. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/MarketplaceIdEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The eBay marketplace where the line item was purchased. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/MarketplaceIdEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "purchaseMarketplaceId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "purchaseMarketplaceId")]
        public string PurchaseMarketplaceId { get; set; }
        /// <summary>
        /// The number of units of the line item in the order. These are represented as a group by a single lineItemId.
        /// </summary>
        /// <value>The number of units of the line item in the order. These are represented as a group by a single lineItemId.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "quantity")]
        public int? Quantity { get; set; }
        /// <summary>
        /// This field is reserved for internal or future use.
        /// </summary>
        /// <value>This field is reserved for internal or future use.</value>
        [DataMember(Name = "refunds", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "refunds")]
        public LineItemRefund[] Refunds { get; set; }
        /// <summary>
        /// Stock Keeping Unit. This is the seller's inventory reference identifier, which typically applies to a specific variation and version of the item.
        /// </summary>
        /// <value>Stock Keeping Unit. This is the seller's inventory reference identifier, which typically applies to a specific variation and version of the item.</value>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sku")]
        public string Sku { get; set; }
        /// <summary>
        /// The eBay listing type of the line item. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/SoldFormatEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The eBay listing type of the line item. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/SoldFormatEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "soldFormat", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "soldFormat")]
        public string SoldFormat { get; set; }
        /// <summary>
        /// Contains a list of taxes applied to the line item, if any.
        /// </summary>
        /// <value>Contains a list of taxes applied to the line item, if any.</value>
        [DataMember(Name = "taxes", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "taxes")]
        public Tax[] Taxes { get; set; }
        /// <summary>
        /// The seller's listing title for the line item.
        /// </summary>
        /// <value>The seller's listing title for the line item.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "total")]
        public Amount Total { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  AppliedPromotions: ").Append(AppliedPromotions).Append("\n");
            sb.Append("  DeliveryCost: ").Append(DeliveryCost).Append("\n");
            sb.Append("  DiscountedLineItemCost: ").Append(DiscountedLineItemCost).Append("\n");
            sb.Append("  GiftDetails: ").Append(GiftDetails).Append("\n");
            sb.Append("  LegacyItemId: ").Append(LegacyItemId).Append("\n");
            sb.Append("  LegacyVariationId: ").Append(LegacyVariationId).Append("\n");
            sb.Append("  LineItemCost: ").Append(LineItemCost).Append("\n");
            sb.Append("  LineItemFulfillmentInstructions: ").Append(LineItemFulfillmentInstructions).Append("\n");
            sb.Append("  LineItemFulfillmentStatus: ").Append(LineItemFulfillmentStatus).Append("\n");
            sb.Append("  LineItemId: ").Append(LineItemId).Append("\n");
            sb.Append("  ListingMarketplaceId: ").Append(ListingMarketplaceId).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  PurchaseMarketplaceId: ").Append(PurchaseMarketplaceId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Refunds: ").Append(Refunds).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  SoldFormat: ").Append(SoldFormat).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains the specifications for processing the fulfillment of a line item, including the handling window and the delivery window. These fields provide guidance for <i>eBay Guaranteed Delivery</i> as well as for non-guaranteed delivery.
    /// </summary>
    [DataContract]
    public class LineItemFulfillmentInstructions
    {
        /// <summary>
        /// A value of true indicates that the seller offered this line item with eBay Guaranteed Delivery, and the buyer purchased the line item with the Guaranteed Delivery option. Guaranteed Delivery is presented to the buyer for a given item listing based on the following criteria: The item is of a type, size, weight, and location defined by the seller as eligible for eBay Guaranteed Delivery in a shipping rate table. The seller is offering the item with eBay Guaranteed Delivery. The buyer is located in a destination region that can be shipped to within the delivery window of at least one shipping service category (e.g. One-day, Expedited, Standard, or Economy) for which eBay Guaranteed Delivery is offered by the seller for the item.Sellers who opt into handling time Guaranteed Delivery must complete handling for the line item before the time indicated by the shipByDate field. Sellers who opt into door-to-door Guaranteed Delivery must also ensure that the line item is delivered before the time specified by the maxEstimatedDeliveryDate field.
        /// </summary>
        /// <value>A value of true indicates that the seller offered this line item with eBay Guaranteed Delivery, and the buyer purchased the line item with the Guaranteed Delivery option. Guaranteed Delivery is presented to the buyer for a given item listing based on the following criteria: The item is of a type, size, weight, and location defined by the seller as eligible for eBay Guaranteed Delivery in a shipping rate table. The seller is offering the item with eBay Guaranteed Delivery. The buyer is located in a destination region that can be shipped to within the delivery window of at least one shipping service category (e.g. One-day, Expedited, Standard, or Economy) for which eBay Guaranteed Delivery is offered by the seller for the item.Sellers who opt into handling time Guaranteed Delivery must complete handling for the line item before the time indicated by the shipByDate field. Sellers who opt into door-to-door Guaranteed Delivery must also ensure that the line item is delivered before the time specified by the maxEstimatedDeliveryDate field.</value>
        [DataMember(Name = "guaranteedDelivery", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "guaranteedDelivery")]
        public bool? GuaranteedDelivery { get; set; }
        /// <summary>
        /// The estimated latest date and time that the buyer can expect to receive the line item. If the value of guaranteedDelivery is true, failure to deliver by this time will be counted in eBay Top Rated Seller calculations for sellers who opted into door-to-door Guaranteed Delivery. Note: This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z
        /// </summary>
        /// <value>The estimated latest date and time that the buyer can expect to receive the line item. If the value of guaranteedDelivery is true, failure to deliver by this time will be counted in eBay Top Rated Seller calculations for sellers who opted into door-to-door Guaranteed Delivery. Note: This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z</value>
        [DataMember(Name = "maxEstimatedDeliveryDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "maxEstimatedDeliveryDate")]
        public string MaxEstimatedDeliveryDate { get; set; }
        /// <summary>
        /// The estimated earliest date and time that the buyer can expect to receive the line item. Note: This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z
        /// </summary>
        /// <value>The estimated earliest date and time that the buyer can expect to receive the line item. Note: This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z</value>
        [DataMember(Name = "minEstimatedDeliveryDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "minEstimatedDeliveryDate")]
        public string MinEstimatedDeliveryDate { get; set; }
        /// <summary>
        /// The latest date and time by which this line item must be shipped. If the value of guaranteedDelivery is true, failure to ship by this time will be counted in eBay Top Rated Seller calculations for sellers who opted into handling time Guaranteed Delivery. Note: This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z
        /// </summary>
        /// <value>The latest date and time by which this line item must be shipped. If the value of guaranteedDelivery is true, failure to ship by this time will be counted in eBay Top Rated Seller calculations for sellers who opted into handling time Guaranteed Delivery. Note: This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z</value>
        [DataMember(Name = "shipByDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shipByDate")]
        public string ShipByDate { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  GuaranteedDelivery: ").Append(GuaranteedDelivery).Append("\n");
            sb.Append("  MaxEstimatedDeliveryDate: ").Append(MaxEstimatedDeliveryDate).Append("\n");
            sb.Append("  MinEstimatedDeliveryDate: ").Append(MinEstimatedDeliveryDate).Append("\n");
            sb.Append("  ShipByDate: ").Append(ShipByDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about the eBay programs under which a line item was listed.
    /// </summary>
    [DataContract]
    public class LineItemProperties
    {
        /// <summary>
        /// A value of true indicates that the line item is covered by eBay's Buyer Protection program.
        /// </summary>
        /// <value>A value of true indicates that the line item is covered by eBay's Buyer Protection program.</value>
        [DataMember(Name = "buyerProtection", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "buyerProtection")]
        public bool? BuyerProtection { get; set; }
        /// <summary>
        /// Note: This field is always returned, but its value is not currently reliable (always false). It will become significant in a future release.
        /// </summary>
        /// <value>Note: This field is always returned, but its value is not currently reliable (always false). It will become significant in a future release.</value>
        [DataMember(Name = "fromBestOffer", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fromBestOffer")]
        public bool? FromBestOffer { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  BuyerProtection: ").Append(BuyerProtection).Append("\n");
            sb.Append("  FromBestOffer: ").Append(FromBestOffer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type identifies a line item in an order.
    /// </summary>
    [DataContract]
    public class LineItemReference
    {
        /// <summary>
        /// The globally unique eBay-generated identifier of the line item. Note: A single line item can consist of multiple units of a purchased item, and one unit can consist of multiple parts or components. Although these components might be provided by the manufacturer in separate packaging, the seller cannot distribute them among multiple shipping packages. Thus, each line item ID will appear in exactly one fulfillment.
        /// </summary>
        /// <value>The globally unique eBay-generated identifier of the line item. Note: A single line item can consist of multiple units of a purchased item, and one unit can consist of multiple parts or components. Although these components might be provided by the manufacturer in separate packaging, the seller cannot distribute them among multiple shipping packages. Thus, each line item ID will appear in exactly one fulfillment.</value>
        [DataMember(Name = "lineItemId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "lineItemId")]
        public string LineItemId { get; set; }
        /// <summary>
        /// This field is reserved for internal or future use.
        /// </summary>
        /// <value>This field is reserved for internal or future use.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "quantity")]
        public int? Quantity { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  LineItemId: ").Append(LineItemId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type is reserved for internal or future use.
    /// </summary>
    [DataContract]
    public class LineItemRefund
    {
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "amount")]
        public Amount Amount { get; set; }
        /// <summary>
        /// This field is reserved for internal or future use.
        /// </summary>
        /// <value>This field is reserved for internal or future use.</value>
        [DataMember(Name = "refundDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "refundDate")]
        public string RefundDate { get; set; }
        /// <summary>
        /// This field is reserved for internal or future use.
        /// </summary>
        /// <value>This field is reserved for internal or future use.</value>
        [DataMember(Name = "refundReferenceId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "refundReferenceId")]
        public string RefundReferenceId { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  RefundDate: ").Append(RefundDate).Append("\n");
            sb.Append("  RefundReferenceId: ").Append(RefundReferenceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains the details of an order, including information about the buyer, order history, shipping fulfillments, line items, costs, payments, and order fulfillment status.
    /// </summary>
    [DataContract]
    public class Order
    {
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "buyer", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "buyer")]
        public Buyer Buyer { get; set; }
        /// <summary>
        /// Comments about the order (if any) provided by the buyer at checkout.
        /// </summary>
        /// <value>Comments about the order (if any) provided by the buyer at checkout.</value>
        [DataMember(Name = "buyerCheckoutNotes", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "buyerCheckoutNotes")]
        public string BuyerCheckoutNotes { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "cancelStatus", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "cancelStatus")]
        public CancelStatus CancelStatus { get; set; }
        /// <summary>
        /// The date and time that the order was created. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z
        /// </summary>
        /// <value>The date and time that the order was created. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z</value>
        [DataMember(Name = "creationDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "creationDate")]
        public string CreationDate { get; set; }
        /// <summary>
        /// Contains a list of one or more hypertext references in the form of URLs. Each URL can be used to invoke the Get Shipping Fulfillment call to retrieve the details of each fulfillment, if any, that is associated with this order.
        /// </summary>
        /// <value>Contains a list of one or more hypertext references in the form of URLs. Each URL can be used to invoke the Get Shipping Fulfillment call to retrieve the details of each fulfillment, if any, that is associated with this order.</value>
        [DataMember(Name = "fulfillmentHrefs", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fulfillmentHrefs")]
        public string[] FulfillmentHrefs { get; set; }
        /// <summary>
        /// Contains a set of specifications for fulfilling the order, including the type of fulfillment, shipping carrier and service, addressing details, and estimated delivery window. These instructions are derived from the buyer's and seller's eBay account preferences, the listing parameters, and the buyer's checkout selections. The seller can use them as a starting point for packaging, addressing, and shipping the order. Note: Although this container is presented as an array, it currently returns only one set of fulfillment specifications. Additional array members will be supported in future functionality.
        /// </summary>
        /// <value>Contains a set of specifications for fulfilling the order, including the type of fulfillment, shipping carrier and service, addressing details, and estimated delivery window. These instructions are derived from the buyer's and seller's eBay account preferences, the listing parameters, and the buyer's checkout selections. The seller can use them as a starting point for packaging, addressing, and shipping the order. Note: Although this container is presented as an array, it currently returns only one set of fulfillment specifications. Additional array members will be supported in future functionality.</value>
        [DataMember(Name = "fulfillmentStartInstructions", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fulfillmentStartInstructions")]
        public FulfillmentStartInstruction[] FulfillmentStartInstructions { get; set; }
        /// <summary>
        /// The date and time that the order was last modified.This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z
        /// </summary>
        /// <value>The date and time that the order was last modified.This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z</value>
        [DataMember(Name = "lastModifiedDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "lastModifiedDate")]
        public string LastModifiedDate { get; set; }
        /// <summary>
        /// The order's unique identifier, as formatted for legacy APIs. Both the orderId field and this field are always returned. Use the value of legacyOrderId instead of the value of orderId with APIs that require a legacy order ID, such as the Post-Order API or the Trading API. Note: The value of this field is not formatted the same way as the value of the orderId field. Do not attempt to use this field's value in the orderId field.
        /// </summary>
        /// <value>The order's unique identifier, as formatted for legacy APIs. Both the orderId field and this field are always returned. Use the value of legacyOrderId instead of the value of orderId with APIs that require a legacy order ID, such as the Post-Order API or the Trading API. Note: The value of this field is not formatted the same way as the value of the orderId field. Do not attempt to use this field's value in the orderId field.</value>
        [DataMember(Name = "legacyOrderId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "legacyOrderId")]
        public string LegacyOrderId { get; set; }
        /// <summary>
        /// Contains the details of one or more line items that comprise the order. A line item consists of one or more units of a specific variation and version of a listed item that has been purchased.
        /// </summary>
        /// <value>Contains the details of one or more line items that comprise the order. A line item consists of one or more units of a specific variation and version of a listed item that has been purchased.</value>
        [DataMember(Name = "lineItems", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "lineItems")]
        public LineItem[] LineItems { get; set; }
        /// <summary>
        /// The degree to which fulfillment of the order is complete. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/OrderFulfillmentStatus.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The degree to which fulfillment of the order is complete. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/OrderFulfillmentStatus.html'>eBay API documentation</a></value>
        [DataMember(Name = "orderFulfillmentStatus", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "orderFulfillmentStatus")]
        public string OrderFulfillmentStatus { get; set; }
        /// <summary>
        /// The unique identifier of the order. This value was originally generated by eBay as a result of the buyer's checkout process; for example, 170009092860-9849164007!140000000544476. Note: The value of this field is not formatted the same way as the value of the Trading API's OrderId field. Use the value of the legacyOrderId field instead of this one with the Trading API.
        /// </summary>
        /// <value>The unique identifier of the order. This value was originally generated by eBay as a result of the buyer's checkout process; for example, 170009092860-9849164007!140000000544476. Note: The value of this field is not formatted the same way as the value of the Trading API's OrderId field. Use the value of the legacyOrderId field instead of this one with the Trading API.</value>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "orderId")]
        public string OrderId { get; set; }
        /// <summary>
        /// The current status of all monetary exchanges (payment by buyer and refund to buyer) for the order. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/OrderPaymentStatusEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The current status of all monetary exchanges (payment by buyer and refund to buyer) for the order. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/OrderPaymentStatusEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "orderPaymentStatus", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "orderPaymentStatus")]
        public string OrderPaymentStatus { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "paymentSummary", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "paymentSummary")]
        public PaymentSummary PaymentSummary { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "pricingSummary", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "pricingSummary")]
        public PricingSummary PricingSummary { get; set; }
        /// <summary>
        /// The eBay ID of the seller who sold the order.
        /// </summary>
        /// <value>The eBay ID of the seller who sold the order.</value>
        [DataMember(Name = "sellerId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sellerId")]
        public string SellerId { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Buyer: ").Append(Buyer).Append("\n");
            sb.Append("  BuyerCheckoutNotes: ").Append(BuyerCheckoutNotes).Append("\n");
            sb.Append("  CancelStatus: ").Append(CancelStatus).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  FulfillmentHrefs: ").Append(FulfillmentHrefs).Append("\n");
            sb.Append("  FulfillmentStartInstructions: ").Append(FulfillmentStartInstructions).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  LegacyOrderId: ").Append(LegacyOrderId).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  OrderFulfillmentStatus: ").Append(OrderFulfillmentStatus).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderPaymentStatus: ").Append(OrderPaymentStatus).Append("\n");
            sb.Append("  PaymentSummary: ").Append(PaymentSummary).Append("\n");
            sb.Append("  PricingSummary: ").Append(PricingSummary).Append("\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about a refund issued for an order. This does not include line item level refunds.
    /// </summary>
    [DataContract]
    public class OrderRefund
    {
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "amount")]
        public Amount Amount { get; set; }
        /// <summary>
        /// The date and time that the refund was issued. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z
        /// </summary>
        /// <value>The date and time that the refund was issued. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z</value>
        [DataMember(Name = "refundDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "refundDate")]
        public string RefundDate { get; set; }
        /// <summary>
        /// The eBay-generated identifier for the refund
        /// </summary>
        /// <value>The eBay-generated identifier for the refund</value>
        [DataMember(Name = "refundReferenceId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "refundReferenceId")]
        public string RefundReferenceId { get; set; }
        /// <summary>
        /// The degree of completion of a refund being made to the buyer. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/RefundStatusEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The degree of completion of a refund being made to the buyer. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/RefundStatusEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "refundStatus", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "refundStatus")]
        public string RefundStatus { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  RefundDate: ").Append(RefundDate).Append("\n");
            sb.Append("  RefundReferenceId: ").Append(RefundReferenceId).Append("\n");
            sb.Append("  RefundStatus: ").Append(RefundStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains the specifications for the collection of orders that match the search or filter criteria of a <b>getOrders</b> call. The collection is grouped into <i>result sets</i> (pages) of manageable size, and each execution of the call returns one result set. The <b>OrderSearchPagedCollection</b> fields provide the information necessary to navigate through all of these result sets, as well as the contents of the currently specified result set.
    /// </summary>
    [DataContract]
    public class OrderSearchPagedCollection
    {
        /// <summary>
        /// The URI of the getOrders call request that produced this result set.
        /// </summary>
        /// <value>The URI of the getOrders call request that produced this result set.</value>
        [DataMember(Name = "href", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "href")]
        public string Href { get; set; }
        /// <summary>
        /// The maximum number of orders returned in the current result set. Note: If this is the last or only result set in the collection, it may contain fewer orders. To determine the number of result sets in the collection, divide this into the value of total and round up to the next integer.Default: 50
        /// </summary>
        /// <value>The maximum number of orders returned in the current result set. Note: If this is the last or only result set in the collection, it may contain fewer orders. To determine the number of result sets in the collection, divide this into the value of total and round up to the next integer.Default: 50</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "limit")]
        public int? Limit { get; set; }
        /// <summary>
        /// The getOrders call URI for the next result set. For example, the following URI returns records 41 thru 50 from the collection of orders: path/order?limit=10&amp;offset=40
        /// </summary>
        /// <value>The getOrders call URI for the next result set. For example, the following URI returns records 41 thru 50 from the collection of orders: path/order?limit=10&amp;offset=40</value>
        [DataMember(Name = "next", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "next")]
        public string Next { get; set; }
        /// <summary>
        /// The distance (number of records) from the first order in the collection to the first order in this result set. In the request, you can use the offset parameter in conjunction with the limit parameter to control the pagination of the output. For example, if offset is set to 30 and limit is set to 10, the call retrieves orders 31 thru 40 from the resulting collection of orders. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0.Default: 0 (zero)
        /// </summary>
        /// <value>The distance (number of records) from the first order in the collection to the first order in this result set. In the request, you can use the offset parameter in conjunction with the limit parameter to control the pagination of the output. For example, if offset is set to 30 and limit is set to 10, the call retrieves orders 31 thru 40 from the resulting collection of orders. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0.Default: 0 (zero)</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "offset")]
        public int? Offset { get; set; }
        /// <summary>
        /// Contains the array of orders in the current result set. The details of each order include information about the buyer, order history, shipping fulfillments, line items, costs, payments, and order fulfillment status. The orders are sorted by orders.orderId.
        /// </summary>
        /// <value>Contains the array of orders in the current result set. The details of each order include information about the buyer, order history, shipping fulfillments, line items, costs, payments, and order fulfillment status. The orders are sorted by orders.orderId.</value>
        [DataMember(Name = "orders", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "orders")]
        public Order[] Orders { get; set; }
        /// <summary>
        /// The getOrders call URI for the previous result set. For example, the following URI returns orders 21 thru 30 from the collection of orders: path/order?limit=10&amp;offset=20 Note: This feature employs a zero-based list, where the first order in the list has an offset of 0.
        /// </summary>
        /// <value>The getOrders call URI for the previous result set. For example, the following URI returns orders 21 thru 30 from the collection of orders: path/order?limit=10&amp;offset=20 Note: This feature employs a zero-based list, where the first order in the list has an offset of 0.</value>
        [DataMember(Name = "prev", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "prev")]
        public string Prev { get; set; }
        /// <summary>
        /// The total number of orders in the collection. Note: If no orders are found, this field is returned with a value of 0.
        /// </summary>
        /// <value>The total number of orders in the collection. Note: If no orders are found, this field is returned with a value of 0.</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "total")]
        public int? Total { get; set; }
        /// <summary>
        /// Contains warnings related to this call request. This is usually empty.
        /// </summary>
        /// <value>Contains warnings related to this call request. This is usually empty.</value>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "warnings")]
        public Error[] Warnings { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  Prev: ").Append(Prev).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// Contains information about a payment made for an order.
    /// </summary>
    [DataContract]
    public class Payment
    {
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "amount")]
        public Amount Amount { get; set; }
        /// <summary>
        /// The date and time that the payment was received by the seller. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z
        /// </summary>
        /// <value>The date and time that the payment was received by the seller. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z</value>
        [DataMember(Name = "paymentDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "paymentDate")]
        public string PaymentDate { get; set; }
        /// <summary>
        /// Contains information about a hold (if any) placed on some or all of the payment, including the reason why the payment for the order is being held, the expected release date of the funds into the seller's account, the current state of the hold, and if the payment has been released, the actual release date. This container is returned only if a hold exists.
        /// </summary>
        /// <value>Contains information about a hold (if any) placed on some or all of the payment, including the reason why the payment for the order is being held, the expected release date of the funds into the seller's account, the current state of the hold, and if the payment has been released, the actual release date. This container is returned only if a hold exists.</value>
        [DataMember(Name = "paymentHolds", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "paymentHolds")]
        public PaymentHold[] PaymentHolds { get; set; }
        /// <summary>
        /// The method by which the payment was made. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/PaymentMethodTypeEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The method by which the payment was made. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/PaymentMethodTypeEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "paymentMethod", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "paymentMethod")]
        public string PaymentMethod { get; set; }
        /// <summary>
        /// Returned only if the value of paymentMethod is PAYPAL. This field contains the PayPal-generated transaction identifier.
        /// </summary>
        /// <value>Returned only if the value of paymentMethod is PAYPAL. This field contains the PayPal-generated transaction identifier.</value>
        [DataMember(Name = "paymentReferenceId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "paymentReferenceId")]
        public string PaymentReferenceId { get; set; }
        /// <summary>
        /// The degree of completion of the payment. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/PaymentStatusEnum.html'>eBay API documentation</a>
        /// </summary>
        /// <value>The degree of completion of the payment. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/PaymentStatusEnum.html'>eBay API documentation</a></value>
        [DataMember(Name = "paymentStatus", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "paymentStatus")]
        public string PaymentStatus { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  PaymentHolds: ").Append(PaymentHolds).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentReferenceId: ").Append(PaymentReferenceId).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about a hold placed on a payment to a seller for an order, including the reason why the buyer's payment for the order is being held, the expected release date of the funds into the seller's account, the current state of the hold, and the actual release date if the payment has been released, and possible actions the seller can take to expedite the payout of funds into their account.
    /// </summary>
    [DataContract]
    public class PaymentHold
    {
        /// <summary>
        /// The date and time that the payment being held is expected to be released to the seller. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z
        /// </summary>
        /// <value>The date and time that the payment being held is expected to be released to the seller. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z</value>
        [DataMember(Name = "expectedReleaseDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "expectedReleaseDate")]
        public string ExpectedReleaseDate { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "holdAmount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "holdAmount")]
        public Amount HoldAmount { get; set; }
        /// <summary>
        /// The reason that the payment is being held.
        /// </summary>
        /// <value>The reason that the payment is being held.</value>
        [DataMember(Name = "holdReason", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "holdReason")]
        public string HoldReason { get; set; }
        /// <summary>
        /// The current stage or condition of the hold. Applicable values: HELD HELD_PENDING NOT_HELD RELEASE_CONFIRMED RELEASE_FAILED RELEASE_PENDING RELEASED
        /// </summary>
        /// <value>The current stage or condition of the hold. Applicable values: HELD HELD_PENDING NOT_HELD RELEASE_CONFIRMED RELEASE_FAILED RELEASE_PENDING RELEASED</value>
        [DataMember(Name = "holdState", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "holdState")]
        public string HoldState { get; set; }
        /// <summary>
        /// The date and time that the payment being held was actually released to the seller. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z
        /// </summary>
        /// <value>The date and time that the payment being held was actually released to the seller. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z</value>
        [DataMember(Name = "releaseDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "releaseDate")]
        public string ReleaseDate { get; set; }
        /// <summary>
        /// A list of actions the seller can take to release the hold on the payment.
        /// </summary>
        /// <value>A list of actions the seller can take to release the hold on the payment.</value>
        [DataMember(Name = "sellerActionsToRelease", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sellerActionsToRelease")]
        public SellerActionsToRelease[] SellerActionsToRelease { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ExpectedReleaseDate: ").Append(ExpectedReleaseDate).Append("\n");
            sb.Append("  HoldAmount: ").Append(HoldAmount).Append("\n");
            sb.Append("  HoldReason: ").Append(HoldReason).Append("\n");
            sb.Append("  HoldState: ").Append(HoldState).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  SellerActionsToRelease: ").Append(SellerActionsToRelease).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about the various monetary exchanges that apply to the net balance due for the order.
    /// </summary>
    [DataContract]
    public class PaymentSummary
    {
        /// <summary>
        /// Contains a list of payments made for the order, if any.
        /// </summary>
        /// <value>Contains a list of payments made for the order, if any.</value>
        [DataMember(Name = "payments", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "payments")]
        public Payment[] Payments { get; set; }
        /// <summary>
        /// Contains a list of refunds issued for the order, if any. This does not include line item level refunds.
        /// </summary>
        /// <value>Contains a list of refunds issued for the order, if any. This does not include line item level refunds.</value>
        [DataMember(Name = "refunds", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "refunds")]
        public OrderRefund[] Refunds { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "totalDueSeller", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "totalDueSeller")]
        public Amount TotalDueSeller { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  Refunds: ").Append(Refunds).Append("\n");
            sb.Append("  TotalDueSeller: ").Append(TotalDueSeller).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains a summary of costs and charges for an order, including price, adjustments, taxes, and delivery costs.
    /// </summary>
    [DataContract]
    public class PricingSummary
    {
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "adjustment", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "adjustment")]
        public Amount Adjustment { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "deliveryCost", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "deliveryCost")]
        public Amount DeliveryCost { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "deliveryDiscount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "deliveryDiscount")]
        public Amount DeliveryDiscount { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "fee", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fee")]
        public Amount Fee { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "priceDiscountSubtotal", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "priceDiscountSubtotal")]
        public Amount PriceDiscountSubtotal { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "priceSubtotal", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "priceSubtotal")]
        public Amount PriceSubtotal { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "tax", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "tax")]
        public Amount Tax { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "total")]
        public Amount Total { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Adjustment: ").Append(Adjustment).Append("\n");
            sb.Append("  DeliveryCost: ").Append(DeliveryCost).Append("\n");
            sb.Append("  DeliveryDiscount: ").Append(DeliveryDiscount).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  PriceDiscountSubtotal: ").Append(PriceDiscountSubtotal).Append("\n");
            sb.Append("  PriceSubtotal: ").Append(PriceSubtotal).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// A possible action that a seller can take to release a hold placed on a payment intended for the seller.
    /// </summary>
    [DataContract]
    public class SellerActionsToRelease
    {
        /// <summary>
        /// An action the seller can take to release the hold.
        /// </summary>
        /// <value>An action the seller can take to release the hold.</value>
        [DataMember(Name = "sellerActionToRelease", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "sellerActionToRelease")]
        public string SellerActionToRelease { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  SellerActionToRelease: ").Append(SellerActionToRelease).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains the complete details of an existing fulfillment for an order.
    /// </summary>
    [DataContract]
    public class ShippingFulfillment
    {
        /// <summary>
        /// The unique identifier of the fulfillment; for example, 9405509699937003457459. This eBay-generated value was created by the Create Shipping Fulfillment call.
        /// </summary>
        /// <value>The unique identifier of the fulfillment; for example, 9405509699937003457459. This eBay-generated value was created by the Create Shipping Fulfillment call.</value>
        [DataMember(Name = "fulfillmentId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fulfillmentId")]
        public string FulfillmentId { get; set; }
        /// <summary>
        /// Contains a list of the line items to which the fulfillment applies.
        /// </summary>
        /// <value>Contains a list of the line items to which the fulfillment applies.</value>
        [DataMember(Name = "lineItems", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "lineItems")]
        public LineItemReference[] LineItems { get; set; }
        /// <summary>
        /// The tracking number provided by the shipping carrier for the package shipped in this fulfillment.
        /// </summary>
        /// <value>The tracking number provided by the shipping carrier for the package shipped in this fulfillment.</value>
        [DataMember(Name = "shipmentTrackingNumber", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shipmentTrackingNumber")]
        public string ShipmentTrackingNumber { get; set; }
        /// <summary>
        /// The date and time that the fulfillment package was shipped. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z
        /// </summary>
        /// <value>The date and time that the fulfillment package was shipped. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z</value>
        [DataMember(Name = "shippedDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shippedDate")]
        public string ShippedDate { get; set; }
        /// <summary>
        /// The eBay code identifying the shipping carrier for this fulfillment. Note: The Trading API's ShippingCarrierCodeType enumeration contains the most current list of eBay shipping carrier codes and the countries served by each carrier. See ShippingCarrierCodeType.
        /// </summary>
        /// <value>The eBay code identifying the shipping carrier for this fulfillment. Note: The Trading API's ShippingCarrierCodeType enumeration contains the most current list of eBay shipping carrier codes and the countries served by each carrier. See ShippingCarrierCodeType.</value>
        [DataMember(Name = "shippingCarrierCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shippingCarrierCode")]
        public string ShippingCarrierCode { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  FulfillmentId: ").Append(FulfillmentId).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  ShipmentTrackingNumber: ").Append(ShipmentTrackingNumber).Append("\n");
            sb.Append("  ShippedDate: ").Append(ShippedDate).Append("\n");
            sb.Append("  ShippingCarrierCode: ").Append(ShippingCarrierCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains the details for creating a fulfillment for an order.
    /// </summary>
    [DataContract]
    public class ShippingFulfillmentDetails
    {
        /// <summary>
        /// Contains a list of the line items (or their components) to which the fulfillment applies.
        /// </summary>
        /// <value>Contains a list of the line items (or their components) to which the fulfillment applies.</value>
        [DataMember(Name = "lineItems", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "lineItems")]
        public LineItemReference[] LineItems { get; set; }
        /// <summary>
        /// The date and time that the fulfillment package was shipped. Default: The current date and time.
        /// </summary>
        /// <value>The date and time that the fulfillment package was shipped. Default: The current date and time.</value>
        [DataMember(Name = "shippedDate", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shippedDate")]
        public string ShippedDate { get; set; }
        /// <summary>
        /// The code identifying the shipping carrier for this fulfillment. This field and the trackingNumber field are mutually dependent. If you include one, you must also include the other. Note: The Trading API's ShippingCarrierCodeType enumeration contains the most current list of eBay shipping carrier codes and the countries served by each carrier. See ShippingCarrierCodeType.
        /// </summary>
        /// <value>The code identifying the shipping carrier for this fulfillment. This field and the trackingNumber field are mutually dependent. If you include one, you must also include the other. Note: The Trading API's ShippingCarrierCodeType enumeration contains the most current list of eBay shipping carrier codes and the countries served by each carrier. See ShippingCarrierCodeType.</value>
        [DataMember(Name = "shippingCarrierCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shippingCarrierCode")]
        public string ShippingCarrierCode { get; set; }
        /// <summary>
        /// The tracking number provided by the shipping carrier for this fulfillment. This field and the shippingCarrierCode field are mutually dependent. If you include one, you must also include the other. Note: If you include trackingNumber (and shippingCarrierCode) in the request, the resulting fulfillment's ID (returned in the HTTP location code) is the tracking number. If you do not include the tracking number, the resulting fulfillment ID will default to an arbitrary number such as 999.
        /// </summary>
        /// <value>The tracking number provided by the shipping carrier for this fulfillment. This field and the shippingCarrierCode field are mutually dependent. If you include one, you must also include the other. Note: If you include trackingNumber (and shippingCarrierCode) in the request, the resulting fulfillment's ID (returned in the HTTP location code) is the tracking number. If you do not include the tracking number, the resulting fulfillment ID will default to an arbitrary number such as 999.</value>
        [DataMember(Name = "trackingNumber", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "trackingNumber")]
        public string TrackingNumber { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  ShippedDate: ").Append(ShippedDate).Append("\n");
            sb.Append("  ShippingCarrierCode: ").Append(ShippingCarrierCode).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains the specifications for the entire collection of shipping fulfillments that are associated with the order specified by a <b>getShippingFulfillments</b> call. The <b>fulfillments</b> container returns an array of all the fulfillments in the collection.
    /// </summary>
    [DataContract]
    public class ShippingFulfillmentPagedCollection
    {
        /// <summary>
        /// Contains an array of all the fulfillments returned by this call. The fulfillments are sorted by fulfillments.fulfillmentId.
        /// </summary>
        /// <value>Contains an array of all the fulfillments returned by this call. The fulfillments are sorted by fulfillments.fulfillmentId.</value>
        [DataMember(Name = "fulfillments", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "fulfillments")]
        public ShippingFulfillment[] Fulfillments { get; set; }
        /// <summary>
        /// The total number of fulfillments in the collection. Note: If no fulfillments are found for the order, this field is returned with a value of 0.
        /// </summary>
        /// <value>The total number of fulfillments in the collection. Note: If no fulfillments are found for the order, this field is returned with a value of 0.</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "total")]
        public int? Total { get; set; }
        /// <summary>
        /// Contains warnings related to this call request. This is usually empty.
        /// </summary>
        /// <value>Contains warnings related to this call request. This is usually empty.</value>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "warnings")]
        public Error[] Warnings { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Fulfillments: ").Append(Fulfillments).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains shipping information for a fulfillment, including the carrier, the service, the shipment destination, and the Global Shipping Program reference ID. 
    /// </summary>
    [DataContract]
    public class ShippingStep
    {
        /// <summary>
        /// The code identifying the shipping carrier for this fulfillment. Note: The Trading API's ShippingCarrierCodeType enumeration contains the most current list of eBay shipping carrier codes and the countries served by each carrier. See ShippingCarrierCodeType.
        /// </summary>
        /// <value>The code identifying the shipping carrier for this fulfillment. Note: The Trading API's ShippingCarrierCodeType enumeration contains the most current list of eBay shipping carrier codes and the countries served by each carrier. See ShippingCarrierCodeType.</value>
        [DataMember(Name = "shippingCarrierCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shippingCarrierCode")]
        public string ShippingCarrierCode { get; set; }
        /// <summary>
        /// The eBay code identifying the shipping service used for this fulfillment. Note: To get a complete list of available shipping services, applications should call the Trading API's GeteBayDetails call with a DetailName value of ShippingServiceDetails. To check for the shipping services available for a specific site, specify the site ID in the header. See also ShippingServiceCodeType.
        /// </summary>
        /// <value>The eBay code identifying the shipping service used for this fulfillment. Note: To get a complete list of available shipping services, applications should call the Trading API's GeteBayDetails call with a DetailName value of ShippingServiceDetails. To check for the shipping services available for a specific site, specify the site ID in the header. See also ShippingServiceCodeType.</value>
        [DataMember(Name = "shippingServiceCode", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shippingServiceCode")]
        public string ShippingServiceCode { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "shipTo", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shipTo")]
        public ExtendedContact ShipTo { get; set; }
        /// <summary>
        /// Returned only if the value of fulfillmentStartInstructions.ebaySupportedFulfillment is true, this field identifies this shipment for use with the Global Shipping Program. The international shipping provider uses the shipToReferenceId value as the primary reference to retrieve the relevant details about the buyer, the order, and the fulfillment, so the shipment can be completed. Sellers must include this value on the shipping label immediately above the street address of the international shipping provider. Example: &quot;Reference #1234567890123456&quot; Note: This value is the same as the ShipToAddress.ReferenceID value returned by the Trading API's GetOrders call.
        /// </summary>
        /// <value>Returned only if the value of fulfillmentStartInstructions.ebaySupportedFulfillment is true, this field identifies this shipment for use with the Global Shipping Program. The international shipping provider uses the shipToReferenceId value as the primary reference to retrieve the relevant details about the buyer, the order, and the fulfillment, so the shipment can be completed. Sellers must include this value on the shipping label immediately above the street address of the international shipping provider. Example: &quot;Reference #1234567890123456&quot; Note: This value is the same as the ShipToAddress.ReferenceID value returned by the Trading API's GetOrders call.</value>
        [DataMember(Name = "shipToReferenceId", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "shipToReferenceId")]
        public string ShipToReferenceId { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  ShippingCarrierCode: ").Append(ShippingCarrierCode).Append("\n");
            sb.Append("  ShippingServiceCode: ").Append(ShippingServiceCode).Append("\n");
            sb.Append("  ShipTo: ").Append(ShipTo).Append("\n");
            sb.Append("  ShipToReferenceId: ").Append(ShipToReferenceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
    /// <summary>
    /// This type contains information about any tax applied to a line item.
    /// </summary>
    [DataContract]
    public class Tax
    {
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        [JsonProperty(PropertyName = "amount")]
        public Amount Amount { get; set; }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryDistribution {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
}
